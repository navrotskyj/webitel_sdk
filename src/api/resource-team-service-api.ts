// tslint:disable
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.12.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { EngineCreateResourceTeamAgentRequest } from '../api'
// @ts-ignore
import { EngineCreateResourceTeamSkillRequest } from '../api'
// @ts-ignore
import { EngineListResourceTeamAgent } from '../api'
// @ts-ignore
import { EngineListResourceTeamSkill } from '../api'
// @ts-ignore
import { EnginePatchResourceTeamAgentRequest } from '../api'
// @ts-ignore
import { EnginePatchResourceTeamSkillRequest } from '../api'
// @ts-ignore
import { EngineResourceTeamAgent } from '../api'
// @ts-ignore
import { EngineResourceTeamSkill } from '../api'
// @ts-ignore
import { EngineUpdateResourceTeamAgentRequest } from '../api'
// @ts-ignore
import { EngineUpdateResourceTeamSkillRequest } from '../api'
/**
 * ResourceTeamServiceApi - axios parameter creator
 * @export
 */
export const ResourceTeamServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create ResourceTeamAgent
     * @param {string} teamId
     * @param {EngineCreateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeamAgent: async (
      teamId: string,
      body: EngineCreateResourceTeamAgentRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling createResourceTeamAgent.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(teamId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SKill Create ResourceTeamSkill
     * @param {string} teamId
     * @param {EngineCreateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeamSkill: async (
      teamId: string,
      body: EngineCreateResourceTeamSkillRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling createResourceTeamSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(teamId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeamAgent: async (
      teamId: string,
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling deleteResourceTeamAgent.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove ResourceTeamSkill
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeamSkill: async (
      teamId: string,
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling deleteResourceTeamSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {EnginePatchResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchResourceTeamAgent: async (
      teamId: string,
      id: string,
      body: EnginePatchResourceTeamAgentRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling patchResourceTeamAgent.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchResourceTeamAgent.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {EnginePatchResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchResourceTeamSkill: async (
      teamId: string,
      id: string,
      body: EnginePatchResourceTeamSkillRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling patchResourceTeamSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchResourceTeamSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ResourceTeamAgent item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeamAgent: async (
      teamId: string,
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling readResourceTeamAgent.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ResourceTeamSkill item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeamSkill: async (
      teamId: string,
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling readResourceTeamSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of ResourceTeamAgent
     * @param {string} teamId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeamAgent: async (
      teamId: string,
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling searchResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(teamId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of ResourceTeamSkill
     * @param {string} teamId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeamSkill: async (
      teamId: string,
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling searchResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(teamId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {EngineUpdateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeamAgent: async (
      teamId: string,
      id: string,
      body: EngineUpdateResourceTeamAgentRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling updateResourceTeamAgent.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateResourceTeamAgent.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update ResourceTeamSkill
     * @param {string} teamId
     * @param {string} id
     * @param {EngineUpdateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeamSkill: async (
      teamId: string,
      id: string,
      body: EngineUpdateResourceTeamSkillRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling updateResourceTeamSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateResourceTeamSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ResourceTeamServiceApi - functional programming interface
 * @export
 */
export const ResourceTeamServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create ResourceTeamAgent
     * @param {string} teamId
     * @param {EngineCreateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createResourceTeamAgent(
      teamId: string,
      body: EngineCreateResourceTeamAgentRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceTeamAgent>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).createResourceTeamAgent(teamId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SKill Create ResourceTeamSkill
     * @param {string} teamId
     * @param {EngineCreateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createResourceTeamSkill(
      teamId: string,
      body: EngineCreateResourceTeamSkillRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceTeamSkill>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).createResourceTeamSkill(teamId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteResourceTeamAgent(
      teamId: string,
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceTeamAgent>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteResourceTeamAgent(teamId, id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove ResourceTeamSkill
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteResourceTeamSkill(
      teamId: string,
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceTeamSkill>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteResourceTeamSkill(teamId, id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {EnginePatchResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchResourceTeamAgent(
      teamId: string,
      id: string,
      body: EnginePatchResourceTeamAgentRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceTeamAgent>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).patchResourceTeamAgent(teamId, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {EnginePatchResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchResourceTeamSkill(
      teamId: string,
      id: string,
      body: EnginePatchResourceTeamSkillRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceTeamSkill>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).patchResourceTeamSkill(teamId, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ResourceTeamAgent item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readResourceTeamAgent(
      teamId: string,
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceTeamAgent>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).readResourceTeamAgent(teamId, id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ResourceTeamSkill item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readResourceTeamSkill(
      teamId: string,
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceTeamSkill>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).readResourceTeamSkill(teamId, id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of ResourceTeamAgent
     * @param {string} teamId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchResourceTeamAgent(
      teamId: string,
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListResourceTeamAgent>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).searchResourceTeamAgent(teamId, page, size, q, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of ResourceTeamSkill
     * @param {string} teamId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchResourceTeamSkill(
      teamId: string,
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListResourceTeamSkill>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).searchResourceTeamSkill(teamId, page, size, q, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {EngineUpdateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateResourceTeamAgent(
      teamId: string,
      id: string,
      body: EngineUpdateResourceTeamAgentRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceTeamAgent>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).updateResourceTeamAgent(teamId, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update ResourceTeamSkill
     * @param {string} teamId
     * @param {string} id
     * @param {EngineUpdateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateResourceTeamSkill(
      teamId: string,
      id: string,
      body: EngineUpdateResourceTeamSkillRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceTeamSkill>
    > {
      const localVarAxiosArgs = await ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).updateResourceTeamSkill(teamId, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * ResourceTeamServiceApi - factory interface
 * @export
 */
export const ResourceTeamServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create ResourceTeamAgent
     * @param {string} teamId
     * @param {EngineCreateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeamAgent(
      teamId: string,
      body: EngineCreateResourceTeamAgentRequest,
      options?: any
    ): AxiosPromise<EngineResourceTeamAgent> {
      return ResourceTeamServiceApiFp(configuration)
        .createResourceTeamAgent(teamId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary SKill Create ResourceTeamSkill
     * @param {string} teamId
     * @param {EngineCreateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeamSkill(
      teamId: string,
      body: EngineCreateResourceTeamSkillRequest,
      options?: any
    ): AxiosPromise<EngineResourceTeamSkill> {
      return ResourceTeamServiceApiFp(configuration)
        .createResourceTeamSkill(teamId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeamAgent(
      teamId: string,
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineResourceTeamAgent> {
      return ResourceTeamServiceApiFp(configuration)
        .deleteResourceTeamAgent(teamId, id, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove ResourceTeamSkill
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeamSkill(
      teamId: string,
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineResourceTeamSkill> {
      return ResourceTeamServiceApiFp(configuration)
        .deleteResourceTeamSkill(teamId, id, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {EnginePatchResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchResourceTeamAgent(
      teamId: string,
      id: string,
      body: EnginePatchResourceTeamAgentRequest,
      options?: any
    ): AxiosPromise<EngineResourceTeamAgent> {
      return ResourceTeamServiceApiFp(configuration)
        .patchResourceTeamAgent(teamId, id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {EnginePatchResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchResourceTeamSkill(
      teamId: string,
      id: string,
      body: EnginePatchResourceTeamSkillRequest,
      options?: any
    ): AxiosPromise<EngineResourceTeamSkill> {
      return ResourceTeamServiceApiFp(configuration)
        .patchResourceTeamSkill(teamId, id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary ResourceTeamAgent item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeamAgent(
      teamId: string,
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineResourceTeamAgent> {
      return ResourceTeamServiceApiFp(configuration)
        .readResourceTeamAgent(teamId, id, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary ResourceTeamSkill item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeamSkill(
      teamId: string,
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineResourceTeamSkill> {
      return ResourceTeamServiceApiFp(configuration)
        .readResourceTeamSkill(teamId, id, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List of ResourceTeamAgent
     * @param {string} teamId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeamAgent(
      teamId: string,
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineListResourceTeamAgent> {
      return ResourceTeamServiceApiFp(configuration)
        .searchResourceTeamAgent(teamId, page, size, q, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List of ResourceTeamSkill
     * @param {string} teamId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeamSkill(
      teamId: string,
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineListResourceTeamSkill> {
      return ResourceTeamServiceApiFp(configuration)
        .searchResourceTeamSkill(teamId, page, size, q, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update ResourceTeamAgent
     * @param {string} teamId
     * @param {string} id
     * @param {EngineUpdateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeamAgent(
      teamId: string,
      id: string,
      body: EngineUpdateResourceTeamAgentRequest,
      options?: any
    ): AxiosPromise<EngineResourceTeamAgent> {
      return ResourceTeamServiceApiFp(configuration)
        .updateResourceTeamAgent(teamId, id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update ResourceTeamSkill
     * @param {string} teamId
     * @param {string} id
     * @param {EngineUpdateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeamSkill(
      teamId: string,
      id: string,
      body: EngineUpdateResourceTeamSkillRequest,
      options?: any
    ): AxiosPromise<EngineResourceTeamSkill> {
      return ResourceTeamServiceApiFp(configuration)
        .updateResourceTeamSkill(teamId, id, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ResourceTeamServiceApi - object-oriented interface
 * @export
 * @class ResourceTeamServiceApi
 * @extends {BaseAPI}
 */
export class ResourceTeamServiceApi extends BaseAPI {
  /**
   *
   * @summary Create ResourceTeamAgent
   * @param {string} teamId
   * @param {EngineCreateResourceTeamAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public createResourceTeamAgent(
    teamId: string,
    body: EngineCreateResourceTeamAgentRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .createResourceTeamAgent(teamId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary SKill Create ResourceTeamSkill
   * @param {string} teamId
   * @param {EngineCreateResourceTeamSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public createResourceTeamSkill(
    teamId: string,
    body: EngineCreateResourceTeamSkillRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .createResourceTeamSkill(teamId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove ResourceTeamAgent
   * @param {string} teamId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public deleteResourceTeamAgent(
    teamId: string,
    id: string,
    domainId?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .deleteResourceTeamAgent(teamId, id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove ResourceTeamSkill
   * @param {string} teamId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public deleteResourceTeamSkill(
    teamId: string,
    id: string,
    domainId?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .deleteResourceTeamSkill(teamId, id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Patch ResourceTeamAgent
   * @param {string} teamId
   * @param {string} id
   * @param {EnginePatchResourceTeamAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public patchResourceTeamAgent(
    teamId: string,
    id: string,
    body: EnginePatchResourceTeamAgentRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .patchResourceTeamAgent(teamId, id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Patch ResourceTeamAgent
   * @param {string} teamId
   * @param {string} id
   * @param {EnginePatchResourceTeamSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public patchResourceTeamSkill(
    teamId: string,
    id: string,
    body: EnginePatchResourceTeamSkillRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .patchResourceTeamSkill(teamId, id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary ResourceTeamAgent item
   * @param {string} teamId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public readResourceTeamAgent(
    teamId: string,
    id: string,
    domainId?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .readResourceTeamAgent(teamId, id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary ResourceTeamSkill item
   * @param {string} teamId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public readResourceTeamSkill(
    teamId: string,
    id: string,
    domainId?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .readResourceTeamSkill(teamId, id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List of ResourceTeamAgent
   * @param {string} teamId
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public searchResourceTeamAgent(
    teamId: string,
    page?: number,
    size?: number,
    q?: string,
    domainId?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .searchResourceTeamAgent(teamId, page, size, q, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List of ResourceTeamSkill
   * @param {string} teamId
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public searchResourceTeamSkill(
    teamId: string,
    page?: number,
    size?: number,
    q?: string,
    domainId?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .searchResourceTeamSkill(teamId, page, size, q, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update ResourceTeamAgent
   * @param {string} teamId
   * @param {string} id
   * @param {EngineUpdateResourceTeamAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public updateResourceTeamAgent(
    teamId: string,
    id: string,
    body: EngineUpdateResourceTeamAgentRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .updateResourceTeamAgent(teamId, id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update ResourceTeamSkill
   * @param {string} teamId
   * @param {string} id
   * @param {EngineUpdateResourceTeamSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public updateResourceTeamSkill(
    teamId: string,
    id: string,
    body: EngineUpdateResourceTeamSkillRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration)
      .updateResourceTeamSkill(teamId, id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
