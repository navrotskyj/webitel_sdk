// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019.0.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as globalImportUrl from 'url'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from './base'
/**
 * `NullValue` is a singleton enumeration to represent the null value for the  `Value` type union.     The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */
export var ProtobufNullValue
;(function(ProtobufNullValue) {
  ProtobufNullValue['NULLVALUE'] = 'NULL_VALUE'
})(ProtobufNullValue || (ProtobufNullValue = {}))
/**
 * AgentServiceApi - axios parameter creator
 * @export
 */
export const AgentServiceApiAxiosParamCreator = function(configuration) {
  return {
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(body, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgent.'
        )
      }
      const localVarPath = `/call_center/agents`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateAgentRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Agent
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent(domainId, size, page, options = {}) {
      const localVarPath = `/call_center/agents`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Agent
     * @param {EngineUpdateAgentRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(body, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgent.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateAgentRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Change agent status
     * @param {EngineAgentStatusRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus(body, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentStatus.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgentStatus.'
        )
      }
      const localVarPath = `/call_center/agents/{id}/status`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PATCH' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineAgentStatusRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * AgentServiceApi - functional programming interface
 * @export
 */
export const AgentServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(body, options) {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).createAgent(body, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(id, domainId, options) {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).deleteAgent(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent(id, domainId, options) {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).readAgent(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Agent
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent(domainId, size, page, options) {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgent(domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Agent
     * @param {EngineUpdateAgentRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(body, id, options) {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).updateAgent(body, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Change agent status
     * @param {EngineAgentStatusRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus(body, id, options) {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).updateAgentStatus(body, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * AgentServiceApi - factory interface
 * @export
 */
export const AgentServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(body, options) {
      return AgentServiceApiFp(configuration).createAgent(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(id, domainId, options) {
      return AgentServiceApiFp(configuration).deleteAgent(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent(id, domainId, options) {
      return AgentServiceApiFp(configuration).readAgent(id, domainId, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of Agent
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent(domainId, size, page, options) {
      return AgentServiceApiFp(configuration).searchAgent(
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update Agent
     * @param {EngineUpdateAgentRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(body, id, options) {
      return AgentServiceApiFp(configuration).updateAgent(body, id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Change agent status
     * @param {EngineAgentStatusRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus(body, id, options) {
      return AgentServiceApiFp(configuration).updateAgentStatus(
        body,
        id,
        options
      )(axios, basePath)
    },
  }
}
/**
 * AgentServiceApi - object-oriented interface
 * @export
 * @class AgentServiceApi
 * @extends {BaseAPI}
 */
export class AgentServiceApi extends BaseAPI {
  /**
   *
   * @summary Create Agent
   * @param {EngineCreateAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  createAgent(body, options) {
    return AgentServiceApiFp(this.configuration).createAgent(body, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary Remove Agent
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  deleteAgent(id, domainId, options) {
    return AgentServiceApiFp(this.configuration).deleteAgent(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Agent item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  readAgent(id, domainId, options) {
    return AgentServiceApiFp(this.configuration).readAgent(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary List of Agent
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  searchAgent(domainId, size, page, options) {
    return AgentServiceApiFp(this.configuration).searchAgent(
      domainId,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Update Agent
   * @param {EngineUpdateAgentRequest} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  updateAgent(body, id, options) {
    return AgentServiceApiFp(this.configuration).updateAgent(body, id, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary Change agent status
   * @param {EngineAgentStatusRequest} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  updateAgentStatus(body, id, options) {
    return AgentServiceApiFp(this.configuration).updateAgentStatus(
      body,
      id,
      options
    )(this.axios, this.basePath)
  }
}
/**
 * AgentSkillServiceApi - axios parameter creator
 * @export
 */
export const AgentSkillServiceApiAxiosParamCreator = function(configuration) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {EngineCreateAgentSkillRequest} body
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill(body, agentId, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgentSkill.'
        )
      }
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling createAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agentId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateAgentSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill(agentId, id, domainId, options = {}) {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling deleteAgentSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agentId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill(agentId, id, domainId, options = {}) {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling readAgentSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agentId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agentId
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill(agentId, domainId, size, page, options = {}) {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling searchAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agentId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {string} agentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill(body, agentId, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentSkill.'
        )
      }
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling updateAgentSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agentId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateAgentSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * AgentSkillServiceApi - functional programming interface
 * @export
 */
export const AgentSkillServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {EngineCreateAgentSkillRequest} body
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill(body, agentId, options) {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).createAgentSkill(body, agentId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill(agentId, id, domainId, options) {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).deleteAgentSkill(agentId, id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill(agentId, id, domainId, options) {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).readAgentSkill(agentId, id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agentId
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill(agentId, domainId, size, page, options) {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).searchAgentSkill(agentId, domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {string} agentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill(body, agentId, id, options) {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).updateAgentSkill(body, agentId, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * AgentSkillServiceApi - factory interface
 * @export
 */
export const AgentSkillServiceApiFactory = function(
  configuration,
  basePath,
  axios
) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {EngineCreateAgentSkillRequest} body
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill(body, agentId, options) {
      return AgentSkillServiceApiFp(configuration).createAgentSkill(
        body,
        agentId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill(agentId, id, domainId, options) {
      return AgentSkillServiceApiFp(configuration).deleteAgentSkill(
        agentId,
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill(agentId, id, domainId, options) {
      return AgentSkillServiceApiFp(configuration).readAgentSkill(
        agentId,
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agentId
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill(agentId, domainId, size, page, options) {
      return AgentSkillServiceApiFp(configuration).searchAgentSkill(
        agentId,
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {string} agentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill(body, agentId, id, options) {
      return AgentSkillServiceApiFp(configuration).updateAgentSkill(
        body,
        agentId,
        id,
        options
      )(axios, basePath)
    },
  }
}
/**
 * AgentSkillServiceApi - object-oriented interface
 * @export
 * @class AgentSkillServiceApi
 * @extends {BaseAPI}
 */
export class AgentSkillServiceApi extends BaseAPI {
  /**
   *
   * @summary Create AgentSkill
   * @param {EngineCreateAgentSkillRequest} body
   * @param {string} agentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  createAgentSkill(body, agentId, options) {
    return AgentSkillServiceApiFp(this.configuration).createAgentSkill(
      body,
      agentId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Remove AgentSkill
   * @param {string} agentId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  deleteAgentSkill(agentId, id, domainId, options) {
    return AgentSkillServiceApiFp(this.configuration).deleteAgentSkill(
      agentId,
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary AgentSkill item
   * @param {string} agentId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  readAgentSkill(agentId, id, domainId, options) {
    return AgentSkillServiceApiFp(this.configuration).readAgentSkill(
      agentId,
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary List of AgentSkill
   * @param {string} agentId
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  searchAgentSkill(agentId, domainId, size, page, options) {
    return AgentSkillServiceApiFp(this.configuration).searchAgentSkill(
      agentId,
      domainId,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Update AgentSkill
   * @param {EngineUpdateAgentSkillRequest} body
   * @param {string} agentId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  updateAgentSkill(body, agentId, id, options) {
    return AgentSkillServiceApiFp(this.configuration).updateAgentSkill(
      body,
      agentId,
      id,
      options
    )(this.axios, this.basePath)
  }
}
/**
 * AgentTeamServiceApi - axios parameter creator
 * @export
 */
export const AgentTeamServiceApiAxiosParamCreator = function(configuration) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam(body, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateAgentTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam(domainId, size, page, options = {}) {
      const localVarPath = `/call_center/teams`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam(body, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateAgentTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * AgentTeamServiceApi - functional programming interface
 * @export
 */
export const AgentTeamServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam(body, options) {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).createAgentTeam(body, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam(id, domainId, options) {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteAgentTeam(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam(id, domainId, options) {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).readAgentTeam(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam(domainId, size, page, options) {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).searchAgentTeam(domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam(body, id, options) {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).updateAgentTeam(body, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * AgentTeamServiceApi - factory interface
 * @export
 */
export const AgentTeamServiceApiFactory = function(
  configuration,
  basePath,
  axios
) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam(body, options) {
      return AgentTeamServiceApiFp(configuration).createAgentTeam(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam(id, domainId, options) {
      return AgentTeamServiceApiFp(configuration).deleteAgentTeam(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam(id, domainId, options) {
      return AgentTeamServiceApiFp(configuration).readAgentTeam(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam(domainId, size, page, options) {
      return AgentTeamServiceApiFp(configuration).searchAgentTeam(
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam(body, id, options) {
      return AgentTeamServiceApiFp(configuration).updateAgentTeam(
        body,
        id,
        options
      )(axios, basePath)
    },
  }
}
/**
 * AgentTeamServiceApi - object-oriented interface
 * @export
 * @class AgentTeamServiceApi
 * @extends {BaseAPI}
 */
export class AgentTeamServiceApi extends BaseAPI {
  /**
   *
   * @summary Create AgentTeam
   * @param {EngineCreateAgentTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  createAgentTeam(body, options) {
    return AgentTeamServiceApiFp(this.configuration).createAgentTeam(
      body,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Remove AgentTeam
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  deleteAgentTeam(id, domainId, options) {
    return AgentTeamServiceApiFp(this.configuration).deleteAgentTeam(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary AgentTeam item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  readAgentTeam(id, domainId, options) {
    return AgentTeamServiceApiFp(this.configuration).readAgentTeam(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary List of AgentTeam
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  searchAgentTeam(domainId, size, page, options) {
    return AgentTeamServiceApiFp(this.configuration).searchAgentTeam(
      domainId,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Update AgentTeam
   * @param {EngineUpdateAgentTeamRequest} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  updateAgentTeam(body, id, options) {
    return AgentTeamServiceApiFp(this.configuration).updateAgentTeam(
      body,
      id,
      options
    )(this.axios, this.basePath)
  }
}
/**
 * CalendarServiceApi - axios parameter creator
 * @export
 */
export const CalendarServiceApiAxiosParamCreator = function(configuration) {
  return {
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar(body, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createCalendar.'
        )
      }
      const localVarPath = `/calendars`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateCalendarRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteCalendar.'
        )
      }
      const localVarPath = `/calendars/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readCalendar.'
        )
      }
      const localVarPath = `/calendars/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary -GET /calendar/:id/accept
     * @param {string} calendarId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAcceptOfDay(calendarId, options = {}) {
      // verify required parameter 'calendarId' is not null or undefined
      if (calendarId === null || calendarId === undefined) {
        throw new RequiredError(
          'calendarId',
          'Required parameter calendarId was null or undefined when calling searchAcceptOfDay.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/accepts`.replace(
        `{${'calendar_id'}}`,
        encodeURIComponent(String(calendarId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of calendar
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar(domainId, size, page, options = {}) {
      const localVarPath = `/calendars`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List timezones
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones(size, page, options = {}) {
      const localVarPath = `/calendars/timezones`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update calendar
     * @param {EngineUpdateCalendarRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar(body, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateCalendar.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateCalendar.'
        )
      }
      const localVarPath = `/calendars/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateCalendarRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * CalendarServiceApi - functional programming interface
 * @export
 */
export const CalendarServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar(body, options) {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).createCalendar(body, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar(id, domainId, options) {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).deleteCalendar(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar(id, domainId, options) {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).readCalendar(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary -GET /calendar/:id/accept
     * @param {string} calendarId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAcceptOfDay(calendarId, options) {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).searchAcceptOfDay(calendarId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of calendar
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar(domainId, size, page, options) {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).searchCalendar(domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List timezones
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones(size, page, options) {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).searchTimezones(size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update calendar
     * @param {EngineUpdateCalendarRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar(body, id, options) {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).updateCalendar(body, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * CalendarServiceApi - factory interface
 * @export
 */
export const CalendarServiceApiFactory = function(
  configuration,
  basePath,
  axios
) {
  return {
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar(body, options) {
      return CalendarServiceApiFp(configuration).createCalendar(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar(id, domainId, options) {
      return CalendarServiceApiFp(configuration).deleteCalendar(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar(id, domainId, options) {
      return CalendarServiceApiFp(configuration).readCalendar(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary -GET /calendar/:id/accept
     * @param {string} calendarId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAcceptOfDay(calendarId, options) {
      return CalendarServiceApiFp(configuration).searchAcceptOfDay(
        calendarId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of calendar
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar(domainId, size, page, options) {
      return CalendarServiceApiFp(configuration).searchCalendar(
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List timezones
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones(size, page, options) {
      return CalendarServiceApiFp(configuration).searchTimezones(
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update calendar
     * @param {EngineUpdateCalendarRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar(body, id, options) {
      return CalendarServiceApiFp(configuration).updateCalendar(
        body,
        id,
        options
      )(axios, basePath)
    },
  }
}
/**
 * CalendarServiceApi - object-oriented interface
 * @export
 * @class CalendarServiceApi
 * @extends {BaseAPI}
 */
export class CalendarServiceApi extends BaseAPI {
  /**
   *
   * @summary Create calendar
   * @param {EngineCreateCalendarRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  createCalendar(body, options) {
    return CalendarServiceApiFp(this.configuration).createCalendar(
      body,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Remove calendar
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  deleteCalendar(id, domainId, options) {
    return CalendarServiceApiFp(this.configuration).deleteCalendar(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Calendar item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  readCalendar(id, domainId, options) {
    return CalendarServiceApiFp(this.configuration).readCalendar(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary -GET /calendar/:id/accept
   * @param {string} calendarId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  searchAcceptOfDay(calendarId, options) {
    return CalendarServiceApiFp(this.configuration).searchAcceptOfDay(
      calendarId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary List of calendar
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  searchCalendar(domainId, size, page, options) {
    return CalendarServiceApiFp(this.configuration).searchCalendar(
      domainId,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary List timezones
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  searchTimezones(size, page, options) {
    return CalendarServiceApiFp(this.configuration).searchTimezones(
      size,
      page,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Update calendar
   * @param {EngineUpdateCalendarRequest} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  updateCalendar(body, id, options) {
    return CalendarServiceApiFp(this.configuration).updateCalendar(
      body,
      id,
      options
    )(this.axios, this.basePath)
  }
}
/**
 * OutboundResourceServiceApi - axios parameter creator
 * @export
 */
export const OutboundResourceServiceApiAxiosParamCreator = function(
  configuration
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource(body, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateOutboundResourceRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource(domainId, size, page, options = {}) {
      const localVarPath = `/call_center/resources`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource(body, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateOutboundResource.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateOutboundResourceRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * OutboundResourceServiceApi - functional programming interface
 * @export
 */
export const OutboundResourceServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource(body, options) {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).createOutboundResource(body, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource(id, domainId, options) {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).deleteOutboundResource(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource(id, domainId, options) {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).readOutboundResource(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource(domainId, size, page, options) {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).searchOutboundResource(domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource(body, id, options) {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).updateOutboundResource(body, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * OutboundResourceServiceApi - factory interface
 * @export
 */
export const OutboundResourceServiceApiFactory = function(
  configuration,
  basePath,
  axios
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource(body, options) {
      return OutboundResourceServiceApiFp(configuration).createOutboundResource(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource(id, domainId, options) {
      return OutboundResourceServiceApiFp(configuration).deleteOutboundResource(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource(id, domainId, options) {
      return OutboundResourceServiceApiFp(configuration).readOutboundResource(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource(domainId, size, page, options) {
      return OutboundResourceServiceApiFp(configuration).searchOutboundResource(
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource(body, id, options) {
      return OutboundResourceServiceApiFp(configuration).updateOutboundResource(
        body,
        id,
        options
      )(axios, basePath)
    },
  }
}
/**
 * OutboundResourceServiceApi - object-oriented interface
 * @export
 * @class OutboundResourceServiceApi
 * @extends {BaseAPI}
 */
export class OutboundResourceServiceApi extends BaseAPI {
  /**
   *
   * @summary Create OutboundResource
   * @param {EngineCreateOutboundResourceRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  createOutboundResource(body, options) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).createOutboundResource(body, options)(this.axios, this.basePath)
  }
  /**
   *
   * @summary Remove OutboundResource
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  deleteOutboundResource(id, domainId, options) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).deleteOutboundResource(id, domainId, options)(this.axios, this.basePath)
  }
  /**
   *
   * @summary OutboundResource item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  readOutboundResource(id, domainId, options) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).readOutboundResource(id, domainId, options)(this.axios, this.basePath)
  }
  /**
   *
   * @summary List of OutboundResource
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  searchOutboundResource(domainId, size, page, options) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).searchOutboundResource(domainId, size, page, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary Update OutboundResource
   * @param {EngineUpdateOutboundResourceRequest} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  updateOutboundResource(body, id, options) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).updateOutboundResource(body, id, options)(this.axios, this.basePath)
  }
}
/**
 * QueueServiceApi - axios parameter creator
 * @export
 */
export const QueueServiceApiAxiosParamCreator = function(configuration) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue(body, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createQueue.'
        )
      }
      const localVarPath = `/call_center/queues`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateQueueRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Queue
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue(domainId, size, page, options = {}) {
      const localVarPath = `/call_center/queues`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Queue
     * @param {EngineUpdateQueueRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue(body, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateQueue.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateQueueRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * QueueServiceApi - functional programming interface
 * @export
 */
export const QueueServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue(body, options) {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).createQueue(body, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue(id, domainId, options) {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).deleteQueue(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue(id, domainId, options) {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).readQueue(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Queue
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue(domainId, size, page, options) {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).searchQueue(domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Queue
     * @param {EngineUpdateQueueRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue(body, id, options) {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).updateQueue(body, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * QueueServiceApi - factory interface
 * @export
 */
export const QueueServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue(body, options) {
      return QueueServiceApiFp(configuration).createQueue(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue(id, domainId, options) {
      return QueueServiceApiFp(configuration).deleteQueue(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue(id, domainId, options) {
      return QueueServiceApiFp(configuration).readQueue(id, domainId, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of Queue
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue(domainId, size, page, options) {
      return QueueServiceApiFp(configuration).searchQueue(
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update Queue
     * @param {EngineUpdateQueueRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue(body, id, options) {
      return QueueServiceApiFp(configuration).updateQueue(body, id, options)(
        axios,
        basePath
      )
    },
  }
}
/**
 * QueueServiceApi - object-oriented interface
 * @export
 * @class QueueServiceApi
 * @extends {BaseAPI}
 */
export class QueueServiceApi extends BaseAPI {
  /**
   *
   * @summary Create Queue
   * @param {EngineCreateQueueRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  createQueue(body, options) {
    return QueueServiceApiFp(this.configuration).createQueue(body, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary Remove Queue
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  deleteQueue(id, domainId, options) {
    return QueueServiceApiFp(this.configuration).deleteQueue(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Queue item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  readQueue(id, domainId, options) {
    return QueueServiceApiFp(this.configuration).readQueue(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary List of Queue
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  searchQueue(domainId, size, page, options) {
    return QueueServiceApiFp(this.configuration).searchQueue(
      domainId,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Update Queue
   * @param {EngineUpdateQueueRequest} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  updateQueue(body, id, options) {
    return QueueServiceApiFp(this.configuration).updateQueue(body, id, options)(
      this.axios,
      this.basePath
    )
  }
}
/**
 * ResourceTeamServiceApi - axios parameter creator
 * @export
 */
export const ResourceTeamServiceApiAxiosParamCreator = function(configuration) {
  return {
    /**
     *
     * @summary Create ResourceTeam
     * @param {EngineCreateResourceTeamRequest} body
     * @param {string} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeam(body, teamId, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createResourceTeam.'
        )
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling createResourceTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/resources`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(teamId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateResourceTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove ResourceTeam
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeam(teamId, id, domainId, options = {}) {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling deleteResourceTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteResourceTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/resources/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ResourceTeam item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeam(teamId, id, domainId, options = {}) {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling readResourceTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readResourceTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/resources/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of ResourceTeam
     * @param {string} teamId
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeam(teamId, domainId, size, page, options = {}) {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling searchResourceTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/resources`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(teamId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update ResourceTeam
     * @param {EngineUpdateResourceTeamRequest} body
     * @param {string} teamId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeam(body, teamId, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateResourceTeam.'
        )
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling updateResourceTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateResourceTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/resources/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateResourceTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * ResourceTeamServiceApi - functional programming interface
 * @export
 */
export const ResourceTeamServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create ResourceTeam
     * @param {EngineCreateResourceTeamRequest} body
     * @param {string} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeam(body, teamId, options) {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).createResourceTeam(body, teamId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove ResourceTeam
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeam(teamId, id, domainId, options) {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteResourceTeam(teamId, id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ResourceTeam item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeam(teamId, id, domainId, options) {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).readResourceTeam(teamId, id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of ResourceTeam
     * @param {string} teamId
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeam(teamId, domainId, size, page, options) {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).searchResourceTeam(teamId, domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update ResourceTeam
     * @param {EngineUpdateResourceTeamRequest} body
     * @param {string} teamId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeam(body, teamId, id, options) {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).updateResourceTeam(body, teamId, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * ResourceTeamServiceApi - factory interface
 * @export
 */
export const ResourceTeamServiceApiFactory = function(
  configuration,
  basePath,
  axios
) {
  return {
    /**
     *
     * @summary Create ResourceTeam
     * @param {EngineCreateResourceTeamRequest} body
     * @param {string} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeam(body, teamId, options) {
      return ResourceTeamServiceApiFp(configuration).createResourceTeam(
        body,
        teamId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove ResourceTeam
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeam(teamId, id, domainId, options) {
      return ResourceTeamServiceApiFp(configuration).deleteResourceTeam(
        teamId,
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary ResourceTeam item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeam(teamId, id, domainId, options) {
      return ResourceTeamServiceApiFp(configuration).readResourceTeam(
        teamId,
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of ResourceTeam
     * @param {string} teamId
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeam(teamId, domainId, size, page, options) {
      return ResourceTeamServiceApiFp(configuration).searchResourceTeam(
        teamId,
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update ResourceTeam
     * @param {EngineUpdateResourceTeamRequest} body
     * @param {string} teamId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeam(body, teamId, id, options) {
      return ResourceTeamServiceApiFp(configuration).updateResourceTeam(
        body,
        teamId,
        id,
        options
      )(axios, basePath)
    },
  }
}
/**
 * ResourceTeamServiceApi - object-oriented interface
 * @export
 * @class ResourceTeamServiceApi
 * @extends {BaseAPI}
 */
export class ResourceTeamServiceApi extends BaseAPI {
  /**
   *
   * @summary Create ResourceTeam
   * @param {EngineCreateResourceTeamRequest} body
   * @param {string} teamId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  createResourceTeam(body, teamId, options) {
    return ResourceTeamServiceApiFp(this.configuration).createResourceTeam(
      body,
      teamId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Remove ResourceTeam
   * @param {string} teamId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  deleteResourceTeam(teamId, id, domainId, options) {
    return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeam(
      teamId,
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary ResourceTeam item
   * @param {string} teamId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  readResourceTeam(teamId, id, domainId, options) {
    return ResourceTeamServiceApiFp(this.configuration).readResourceTeam(
      teamId,
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary List of ResourceTeam
   * @param {string} teamId
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  searchResourceTeam(teamId, domainId, size, page, options) {
    return ResourceTeamServiceApiFp(this.configuration).searchResourceTeam(
      teamId,
      domainId,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Update ResourceTeam
   * @param {EngineUpdateResourceTeamRequest} body
   * @param {string} teamId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  updateResourceTeam(body, teamId, id, options) {
    return ResourceTeamServiceApiFp(this.configuration).updateResourceTeam(
      body,
      teamId,
      id,
      options
    )(this.axios, this.basePath)
  }
}
/**
 * RoutingOutboundCallServiceApi - axios parameter creator
 * @export
 */
export const RoutingOutboundCallServiceApiAxiosParamCreator = function(
  configuration
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall(body, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateRoutingOutboundCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall(domainId, size, page, options = {}) {
      const localVarPath = `/routing/outbound/calls`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall(body, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateRoutingOutboundCall.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateRoutingOutboundCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * RoutingOutboundCallServiceApi - functional programming interface
 * @export
 */
export const RoutingOutboundCallServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall(body, options) {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).createRoutingOutboundCall(body, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall(id, domainId, options) {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).deleteRoutingOutboundCall(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall(id, domainId, options) {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).readRoutingOutboundCall(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall(domainId, size, page, options) {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).searchRoutingOutboundCall(domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall(body, id, options) {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).updateRoutingOutboundCall(body, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * RoutingOutboundCallServiceApi - factory interface
 * @export
 */
export const RoutingOutboundCallServiceApiFactory = function(
  configuration,
  basePath,
  axios
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall(body, options) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).createRoutingOutboundCall(body, options)(axios, basePath)
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall(id, domainId, options) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).deleteRoutingOutboundCall(id, domainId, options)(axios, basePath)
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall(id, domainId, options) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).readRoutingOutboundCall(id, domainId, options)(axios, basePath)
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall(domainId, size, page, options) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).searchRoutingOutboundCall(domainId, size, page, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall(body, id, options) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).updateRoutingOutboundCall(body, id, options)(axios, basePath)
    },
  }
}
/**
 * RoutingOutboundCallServiceApi - object-oriented interface
 * @export
 * @class RoutingOutboundCallServiceApi
 * @extends {BaseAPI}
 */
export class RoutingOutboundCallServiceApi extends BaseAPI {
  /**
   *
   * @summary Create RoutingOutboundCall
   * @param {EngineCreateRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  createRoutingOutboundCall(body, options) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).createRoutingOutboundCall(body, options)(this.axios, this.basePath)
  }
  /**
   *
   * @summary Remove RoutingOutboundCall
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  deleteRoutingOutboundCall(id, domainId, options) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).deleteRoutingOutboundCall(id, domainId, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary RoutingOutboundCall item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  readRoutingOutboundCall(id, domainId, options) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).readRoutingOutboundCall(id, domainId, options)(this.axios, this.basePath)
  }
  /**
   *
   * @summary List of RoutingOutboundCall
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  searchRoutingOutboundCall(domainId, size, page, options) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).searchRoutingOutboundCall(domainId, size, page, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary Update RoutingOutboundCall
   * @param {EngineUpdateRoutingOutboundCallRequest} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  updateRoutingOutboundCall(body, id, options) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).updateRoutingOutboundCall(body, id, options)(this.axios, this.basePath)
  }
}
/**
 * RoutingSchemeServiceApi - axios parameter creator
 * @export
 */
export const RoutingSchemeServiceApiAxiosParamCreator = function(
  configuration
) {
  return {
    /**
     *
     * @summary Create RoutingScheme
     * @param {EngineCreateRoutingSchemeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingScheme(body, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createRoutingScheme.'
        )
      }
      const localVarPath = `/routing/schemes`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateRoutingSchemeRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove RoutingScheme
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingScheme(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteRoutingScheme.'
        )
      }
      const localVarPath = `/routing/schemes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RoutingScheme item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingScheme(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readRoutingScheme.'
        )
      }
      const localVarPath = `/routing/schemes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List RoutingScheme
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingScheme(domainId, size, page, options = {}) {
      const localVarPath = `/routing/schemes`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update RoutingScheme
     * @param {EngineUpdateRoutingSchemeRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingScheme(body, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateRoutingScheme.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateRoutingScheme.'
        )
      }
      const localVarPath = `/routing/schemes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateRoutingSchemeRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * RoutingSchemeServiceApi - functional programming interface
 * @export
 */
export const RoutingSchemeServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create RoutingScheme
     * @param {EngineCreateRoutingSchemeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingScheme(body, options) {
      const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(
        configuration
      ).createRoutingScheme(body, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove RoutingScheme
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingScheme(id, domainId, options) {
      const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(
        configuration
      ).deleteRoutingScheme(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RoutingScheme item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingScheme(id, domainId, options) {
      const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(
        configuration
      ).readRoutingScheme(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List RoutingScheme
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingScheme(domainId, size, page, options) {
      const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(
        configuration
      ).searchRoutingScheme(domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update RoutingScheme
     * @param {EngineUpdateRoutingSchemeRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingScheme(body, id, options) {
      const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(
        configuration
      ).updateRoutingScheme(body, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * RoutingSchemeServiceApi - factory interface
 * @export
 */
export const RoutingSchemeServiceApiFactory = function(
  configuration,
  basePath,
  axios
) {
  return {
    /**
     *
     * @summary Create RoutingScheme
     * @param {EngineCreateRoutingSchemeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingScheme(body, options) {
      return RoutingSchemeServiceApiFp(configuration).createRoutingScheme(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove RoutingScheme
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingScheme(id, domainId, options) {
      return RoutingSchemeServiceApiFp(configuration).deleteRoutingScheme(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary RoutingScheme item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingScheme(id, domainId, options) {
      return RoutingSchemeServiceApiFp(configuration).readRoutingScheme(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List RoutingScheme
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingScheme(domainId, size, page, options) {
      return RoutingSchemeServiceApiFp(configuration).searchRoutingScheme(
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update RoutingScheme
     * @param {EngineUpdateRoutingSchemeRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingScheme(body, id, options) {
      return RoutingSchemeServiceApiFp(configuration).updateRoutingScheme(
        body,
        id,
        options
      )(axios, basePath)
    },
  }
}
/**
 * RoutingSchemeServiceApi - object-oriented interface
 * @export
 * @class RoutingSchemeServiceApi
 * @extends {BaseAPI}
 */
export class RoutingSchemeServiceApi extends BaseAPI {
  /**
   *
   * @summary Create RoutingScheme
   * @param {EngineCreateRoutingSchemeRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemeServiceApi
   */
  createRoutingScheme(body, options) {
    return RoutingSchemeServiceApiFp(this.configuration).createRoutingScheme(
      body,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Remove RoutingScheme
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemeServiceApi
   */
  deleteRoutingScheme(id, domainId, options) {
    return RoutingSchemeServiceApiFp(this.configuration).deleteRoutingScheme(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary RoutingScheme item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemeServiceApi
   */
  readRoutingScheme(id, domainId, options) {
    return RoutingSchemeServiceApiFp(this.configuration).readRoutingScheme(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary List RoutingScheme
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemeServiceApi
   */
  searchRoutingScheme(domainId, size, page, options) {
    return RoutingSchemeServiceApiFp(this.configuration).searchRoutingScheme(
      domainId,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Update RoutingScheme
   * @param {EngineUpdateRoutingSchemeRequest} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemeServiceApi
   */
  updateRoutingScheme(body, id, options) {
    return RoutingSchemeServiceApiFp(this.configuration).updateRoutingScheme(
      body,
      id,
      options
    )(this.axios, this.basePath)
  }
}
/**
 * RoutingVariableServiceApi - axios parameter creator
 * @export
 */
export const RoutingVariableServiceApiAxiosParamCreator = function(
  configuration
) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable(body, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateRoutingVariableRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable(domainId, size, page, options = {}) {
      const localVarPath = `/routing/variables`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable(body, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateRoutingVariable.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateRoutingVariableRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * RoutingVariableServiceApi - functional programming interface
 * @export
 */
export const RoutingVariableServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable(body, options) {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).createRoutingVariable(body, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable(id, domainId, options) {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).deleteRoutingVariable(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable(id, domainId, options) {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).readRoutingVariable(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable(domainId, size, page, options) {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).searchRoutingVariable(domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable(body, id, options) {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).updateRoutingVariable(body, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * RoutingVariableServiceApi - factory interface
 * @export
 */
export const RoutingVariableServiceApiFactory = function(
  configuration,
  basePath,
  axios
) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable(body, options) {
      return RoutingVariableServiceApiFp(configuration).createRoutingVariable(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable(id, domainId, options) {
      return RoutingVariableServiceApiFp(configuration).deleteRoutingVariable(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable(id, domainId, options) {
      return RoutingVariableServiceApiFp(configuration).readRoutingVariable(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable(domainId, size, page, options) {
      return RoutingVariableServiceApiFp(configuration).searchRoutingVariable(
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable(body, id, options) {
      return RoutingVariableServiceApiFp(configuration).updateRoutingVariable(
        body,
        id,
        options
      )(axios, basePath)
    },
  }
}
/**
 * RoutingVariableServiceApi - object-oriented interface
 * @export
 * @class RoutingVariableServiceApi
 * @extends {BaseAPI}
 */
export class RoutingVariableServiceApi extends BaseAPI {
  /**
   *
   * @summary Create RoutingVariable
   * @param {EngineCreateRoutingVariableRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  createRoutingVariable(body, options) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).createRoutingVariable(body, options)(this.axios, this.basePath)
  }
  /**
   *
   * @summary Remove RoutingVariable
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  deleteRoutingVariable(id, domainId, options) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).deleteRoutingVariable(id, domainId, options)(this.axios, this.basePath)
  }
  /**
   *
   * @summary RoutingVariable item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  readRoutingVariable(id, domainId, options) {
    return RoutingVariableServiceApiFp(this.configuration).readRoutingVariable(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary List of RoutingVariable
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  searchRoutingVariable(domainId, size, page, options) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).searchRoutingVariable(domainId, size, page, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary Update RoutingVariable
   * @param {EngineUpdateRoutingVariableRequest} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  updateRoutingVariable(body, id, options) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).updateRoutingVariable(body, id, options)(this.axios, this.basePath)
  }
}
/**
 * SkillServiceApi - axios parameter creator
 * @export
 */
export const SkillServiceApiAxiosParamCreator = function(configuration) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill(body, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createSkill.'
        )
      }
      const localVarPath = `/call_center/skills`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteSkill.'
        )
      }
      const localVarPath = `/call_center/skills/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill(id, domainId, options = {}) {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readSkill.'
        )
      }
      const localVarPath = `/call_center/skills/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Skill
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill(domainId, size, page, options = {}) {
      const localVarPath = `/call_center/skills`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Skill
     * @param {EngineUpdateSkillRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill(body, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateSkill.'
        )
      }
      const localVarPath = `/call_center/skills/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * SkillServiceApi - functional programming interface
 * @export
 */
export const SkillServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill(body, options) {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).createSkill(body, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill(id, domainId, options) {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).deleteSkill(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill(id, domainId, options) {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).readSkill(id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Skill
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill(domainId, size, page, options) {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).searchSkill(domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Skill
     * @param {EngineUpdateSkillRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill(body, id, options) {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).updateSkill(body, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * SkillServiceApi - factory interface
 * @export
 */
export const SkillServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill(body, options) {
      return SkillServiceApiFp(configuration).createSkill(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill(id, domainId, options) {
      return SkillServiceApiFp(configuration).deleteSkill(
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill(id, domainId, options) {
      return SkillServiceApiFp(configuration).readSkill(id, domainId, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of Skill
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill(domainId, size, page, options) {
      return SkillServiceApiFp(configuration).searchSkill(
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update Skill
     * @param {EngineUpdateSkillRequest} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill(body, id, options) {
      return SkillServiceApiFp(configuration).updateSkill(body, id, options)(
        axios,
        basePath
      )
    },
  }
}
/**
 * SkillServiceApi - object-oriented interface
 * @export
 * @class SkillServiceApi
 * @extends {BaseAPI}
 */
export class SkillServiceApi extends BaseAPI {
  /**
   *
   * @summary Create Skill
   * @param {EngineCreateSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  createSkill(body, options) {
    return SkillServiceApiFp(this.configuration).createSkill(body, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary Remove Skill
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  deleteSkill(id, domainId, options) {
    return SkillServiceApiFp(this.configuration).deleteSkill(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Skill item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  readSkill(id, domainId, options) {
    return SkillServiceApiFp(this.configuration).readSkill(
      id,
      domainId,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary List of Skill
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  searchSkill(domainId, size, page, options) {
    return SkillServiceApiFp(this.configuration).searchSkill(
      domainId,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }
  /**
   *
   * @summary Update Skill
   * @param {EngineUpdateSkillRequest} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  updateSkill(body, id, options) {
    return SkillServiceApiFp(this.configuration).updateSkill(body, id, options)(
      this.axios,
      this.basePath
    )
  }
}
/**
 * SupervisorInTeamServiceApi - axios parameter creator
 * @export
 */
export const SupervisorInTeamServiceApiAxiosParamCreator = function(
  configuration
) {
  return {
    /**
     *
     * @summary Create SupervisorInTeam
     * @param {EngineCreateSupervisorInTeamRequest} body
     * @param {string} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupervisorInTeam(body, teamId, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createSupervisorInTeam.'
        )
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling createSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(teamId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineCreateSupervisorInTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove SupervisorInTeam
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupervisorInTeam(teamId, id, domainId, options = {}) {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling deleteSupervisorInTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SupervisorInTeam item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSupervisorInTeam(teamId, id, domainId, options = {}) {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling readSupervisorInTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of SupervisorInTeam
     * @param {string} teamId
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSupervisorInTeam(teamId, domainId, size, page, options = {}) {
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling searchSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(teamId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }
      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update SupervisorInTeam
     * @param {EngineUpdateSupervisorInTeamRequest} body
     * @param {string} teamId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupervisorInTeam(body, teamId, id, options = {}) {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateSupervisorInTeam.'
        )
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new RequiredError(
          'teamId',
          'Required parameter teamId was null or undefined when calling updateSupervisorInTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(teamId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign(
        { method: 'PUT' },
        baseOptions,
        options
      )
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )
      const needsSerialization =
        'EngineUpdateSupervisorInTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
/**
 * SupervisorInTeamServiceApi - functional programming interface
 * @export
 */
export const SupervisorInTeamServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create SupervisorInTeam
     * @param {EngineCreateSupervisorInTeamRequest} body
     * @param {string} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupervisorInTeam(body, teamId, options) {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).createSupervisorInTeam(body, teamId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove SupervisorInTeam
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupervisorInTeam(teamId, id, domainId, options) {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteSupervisorInTeam(teamId, id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SupervisorInTeam item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSupervisorInTeam(teamId, id, domainId, options) {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).readSupervisorInTeam(teamId, id, domainId, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of SupervisorInTeam
     * @param {string} teamId
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSupervisorInTeam(teamId, domainId, size, page, options) {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).searchSupervisorInTeam(teamId, domainId, size, page, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update SupervisorInTeam
     * @param {EngineUpdateSupervisorInTeamRequest} body
     * @param {string} teamId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupervisorInTeam(body, teamId, id, options) {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).updateSupervisorInTeam(body, teamId, id, options)
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        })
        return axios.request(axiosRequestArgs)
      }
    },
  }
}
/**
 * SupervisorInTeamServiceApi - factory interface
 * @export
 */
export const SupervisorInTeamServiceApiFactory = function(
  configuration,
  basePath,
  axios
) {
  return {
    /**
     *
     * @summary Create SupervisorInTeam
     * @param {EngineCreateSupervisorInTeamRequest} body
     * @param {string} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupervisorInTeam(body, teamId, options) {
      return SupervisorInTeamServiceApiFp(configuration).createSupervisorInTeam(
        body,
        teamId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove SupervisorInTeam
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupervisorInTeam(teamId, id, domainId, options) {
      return SupervisorInTeamServiceApiFp(configuration).deleteSupervisorInTeam(
        teamId,
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SupervisorInTeam item
     * @param {string} teamId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSupervisorInTeam(teamId, id, domainId, options) {
      return SupervisorInTeamServiceApiFp(configuration).readSupervisorInTeam(
        teamId,
        id,
        domainId,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of SupervisorInTeam
     * @param {string} teamId
     * @param {string} [domainId]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSupervisorInTeam(teamId, domainId, size, page, options) {
      return SupervisorInTeamServiceApiFp(configuration).searchSupervisorInTeam(
        teamId,
        domainId,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update SupervisorInTeam
     * @param {EngineUpdateSupervisorInTeamRequest} body
     * @param {string} teamId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupervisorInTeam(body, teamId, id, options) {
      return SupervisorInTeamServiceApiFp(configuration).updateSupervisorInTeam(
        body,
        teamId,
        id,
        options
      )(axios, basePath)
    },
  }
}
/**
 * SupervisorInTeamServiceApi - object-oriented interface
 * @export
 * @class SupervisorInTeamServiceApi
 * @extends {BaseAPI}
 */
export class SupervisorInTeamServiceApi extends BaseAPI {
  /**
   *
   * @summary Create SupervisorInTeam
   * @param {EngineCreateSupervisorInTeamRequest} body
   * @param {string} teamId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  createSupervisorInTeam(body, teamId, options) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).createSupervisorInTeam(body, teamId, options)(this.axios, this.basePath)
  }
  /**
   *
   * @summary Remove SupervisorInTeam
   * @param {string} teamId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  deleteSupervisorInTeam(teamId, id, domainId, options) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).deleteSupervisorInTeam(teamId, id, domainId, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary SupervisorInTeam item
   * @param {string} teamId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  readSupervisorInTeam(teamId, id, domainId, options) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).readSupervisorInTeam(teamId, id, domainId, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary List of SupervisorInTeam
   * @param {string} teamId
   * @param {string} [domainId]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  searchSupervisorInTeam(teamId, domainId, size, page, options) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).searchSupervisorInTeam(teamId, domainId, size, page, options)(
      this.axios,
      this.basePath
    )
  }
  /**
   *
   * @summary Update SupervisorInTeam
   * @param {EngineUpdateSupervisorInTeamRequest} body
   * @param {string} teamId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  updateSupervisorInTeam(body, teamId, id, options) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).updateSupervisorInTeam(body, teamId, id, options)(
      this.axios,
      this.basePath
    )
  }
}
//# sourceMappingURL=api.js.map
