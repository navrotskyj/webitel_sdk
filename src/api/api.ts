// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019.0.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface EngineAcceptOfDay
 */
export interface EngineAcceptOfDay {
    /**
     * 
     * @type {string}
     * @memberof EngineAcceptOfDay
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineAcceptOfDay
     */
    weekDay?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineAcceptOfDay
     */
    startTimeOfDay?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineAcceptOfDay
     */
    endTimeOfDay?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineAcceptOfDay
     */
    disabled?: boolean;
}
/**
 * 
 * @export
 * @interface EngineAgent
 */
export interface EngineAgent {
    /**
     * 
     * @type {string}
     * @memberof EngineAgent
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgent
     */
    domainId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineAgent
     */
    user?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineAgent
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgent
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgent
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EngineAgentSkill
 */
export interface EngineAgentSkill {
    /**
     * 
     * @type {string}
     * @memberof EngineAgentSkill
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgentSkill
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgentSkill
     */
    createdAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineAgentSkill
     */
    createdBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineAgentSkill
     */
    updatedAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineAgentSkill
     */
    updatedBy?: EngineLookup;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineAgentSkill
     */
    agent?: EngineLookup;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineAgentSkill
     */
    skill?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineAgentSkill
     */
    capacity?: number;
}
/**
 * 
 * @export
 * @interface EngineAgentSkillItem
 */
export interface EngineAgentSkillItem {
    /**
     * 
     * @type {string}
     * @memberof EngineAgentSkillItem
     */
    id?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineAgentSkillItem
     */
    skill?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineAgentSkillItem
     */
    capacity?: number;
}
/**
 * 
 * @export
 * @interface EngineAgentStatusRequest
 */
export interface EngineAgentStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineAgentStatusRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgentStatusRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgentStatusRequest
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface EngineAgentTeam
 */
export interface EngineAgentTeam {
    /**
     * 
     * @type {string}
     * @memberof EngineAgentTeam
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgentTeam
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgentTeam
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgentTeam
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineAgentTeam
     */
    strategy?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineAgentTeam
     */
    maxNoAnswer?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineAgentTeam
     */
    wrapUpTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineAgentTeam
     */
    rejectDelayTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineAgentTeam
     */
    busyDelayTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineAgentTeam
     */
    noAnswerDelayTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineAgentTeam
     */
    callTimeout?: number;
    /**
     * 
     * @type {string}
     * @memberof EngineAgentTeam
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface EngineCalendar
 */
export interface EngineCalendar {
    /**
     * 
     * @type {string}
     * @memberof EngineCalendar
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCalendar
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCalendar
     */
    createdAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCalendar
     */
    createdBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineCalendar
     */
    updatedAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCalendar
     */
    updatedBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineCalendar
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCalendar
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCalendar
     */
    finish?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCalendar
     */
    timezone?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineCalendar
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EngineCreateAcceptOfDayRequest
 */
export interface EngineCreateAcceptOfDayRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateAcceptOfDayRequest
     */
    calendarId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateAcceptOfDayRequest
     */
    domainId?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateAcceptOfDayRequest
     */
    weekDay?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateAcceptOfDayRequest
     */
    startTimeOfDay?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateAcceptOfDayRequest
     */
    endTimeOfDay?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineCreateAcceptOfDayRequest
     */
    disabled?: boolean;
}
/**
 * 
 * @export
 * @interface EngineCreateAgentRequest
 */
export interface EngineCreateAgentRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateAgentRequest
     */
    domainId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCreateAgentRequest
     */
    user?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateAgentRequest
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EngineCreateAgentSkillRequest
 */
export interface EngineCreateAgentSkillRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateAgentSkillRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateAgentSkillRequest
     */
    agentId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCreateAgentSkillRequest
     */
    skill?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateAgentSkillRequest
     */
    capacity?: number;
}
/**
 * 
 * @export
 * @interface EngineCreateAgentTeamRequest
 */
export interface EngineCreateAgentTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateAgentTeamRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateAgentTeamRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateAgentTeamRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateAgentTeamRequest
     */
    strategy?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateAgentTeamRequest
     */
    maxNoAnswer?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateAgentTeamRequest
     */
    wrapUpTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateAgentTeamRequest
     */
    rejectDelayTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateAgentTeamRequest
     */
    busyDelayTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateAgentTeamRequest
     */
    noAnswerDelayTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateAgentTeamRequest
     */
    callTimeout?: number;
}
/**
 * 
 * @export
 * @interface EngineCreateCalendarRequest
 */
export interface EngineCreateCalendarRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateCalendarRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateCalendarRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateCalendarRequest
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateCalendarRequest
     */
    finish?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCreateCalendarRequest
     */
    timezone?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateCalendarRequest
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EngineCreateExceptDateRequest
 */
export interface EngineCreateExceptDateRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateExceptDateRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateExceptDateRequest
     */
    calendarId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateExceptDateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateExceptDateRequest
     */
    date?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateExceptDateRequest
     */
    repeat?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineCreateExceptDateRequest
     */
    disabled?: boolean;
}
/**
 * 
 * @export
 * @interface EngineCreateOutboundResourceRequest
 */
export interface EngineCreateOutboundResourceRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateOutboundResourceRequest
     */
    domainId?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateOutboundResourceRequest
     */
    limit?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineCreateOutboundResourceRequest
     */
    enabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateOutboundResourceRequest
     */
    rps?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineCreateOutboundResourceRequest
     */
    reserve?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EngineCreateOutboundResourceRequest
     */
    variables?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof EngineCreateOutboundResourceRequest
     */
    number?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateOutboundResourceRequest
     */
    maxSuccessivelyErrors?: number;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateOutboundResourceRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateOutboundResourceRequest
     */
    dialString?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EngineCreateOutboundResourceRequest
     */
    errorIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface EngineCreateQueueRequest
 */
export interface EngineCreateQueueRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateQueueRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateQueueRequest
     */
    strategy?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EngineCreateQueueRequest
     */
    enabled?: boolean;
    /**
     * 
     * @type {object}
     * @memberof EngineCreateQueueRequest
     */
    payload?: object;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCreateQueueRequest
     */
    calendar?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateQueueRequest
     */
    priority?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateQueueRequest
     */
    maxCalls?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateQueueRequest
     */
    secBetweenRetries?: number;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateQueueRequest
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateQueueRequest
     */
    maxOfRetry?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EngineCreateQueueRequest
     */
    variables?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof EngineCreateQueueRequest
     */
    timeout?: number;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCreateQueueRequest
     */
    dncList?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateQueueRequest
     */
    secLocateAgent?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateQueueRequest
     */
    type?: number;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCreateQueueRequest
     */
    team?: EngineLookup;
}
/**
 * 
 * @export
 * @interface EngineCreateQueueRoutingRequest
 */
export interface EngineCreateQueueRoutingRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateQueueRoutingRequest
     */
    queueId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateQueueRoutingRequest
     */
    pattern?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateQueueRoutingRequest
     */
    priority?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineCreateQueueRoutingRequest
     */
    disabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateQueueRoutingRequest
     */
    domainId?: string;
}
/**
 * 
 * @export
 * @interface EngineCreateResourceTeamRequest
 */
export interface EngineCreateResourceTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateResourceTeamRequest
     */
    teamId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateResourceTeamRequest
     */
    domainId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCreateResourceTeamRequest
     */
    agent?: EngineLookup;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCreateResourceTeamRequest
     */
    skill?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateResourceTeamRequest
     */
    lvl?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateResourceTeamRequest
     */
    minCapacity?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateResourceTeamRequest
     */
    maxCapacity?: number;
}
/**
 * 
 * @export
 * @interface EngineCreateRoutingOutboundCallRequest
 */
export interface EngineCreateRoutingOutboundCallRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateRoutingOutboundCallRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateRoutingOutboundCallRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateRoutingOutboundCallRequest
     */
    description?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCreateRoutingOutboundCallRequest
     */
    scheme?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateRoutingOutboundCallRequest
     */
    pattern?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateRoutingOutboundCallRequest
     */
    priority?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineCreateRoutingOutboundCallRequest
     */
    disabled?: boolean;
}
/**
 * 
 * @export
 * @interface EngineCreateRoutingSchemeRequest
 */
export interface EngineCreateRoutingSchemeRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateRoutingSchemeRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateRoutingSchemeRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateRoutingSchemeRequest
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineCreateRoutingSchemeRequest
     */
    type?: number;
    /**
     * 
     * @type {object}
     * @memberof EngineCreateRoutingSchemeRequest
     */
    scheme?: object;
    /**
     * 
     * @type {object}
     * @memberof EngineCreateRoutingSchemeRequest
     */
    payload?: object;
    /**
     * 
     * @type {boolean}
     * @memberof EngineCreateRoutingSchemeRequest
     */
    debug?: boolean;
}
/**
 * 
 * @export
 * @interface EngineCreateRoutingVariableRequest
 */
export interface EngineCreateRoutingVariableRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateRoutingVariableRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateRoutingVariableRequest
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateRoutingVariableRequest
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface EngineCreateSkillRequest
 */
export interface EngineCreateSkillRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateSkillRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateSkillRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateSkillRequest
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EngineCreateSupervisorInTeamRequest
 */
export interface EngineCreateSupervisorInTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineCreateSupervisorInTeamRequest
     */
    teamId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineCreateSupervisorInTeamRequest
     */
    domainId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineCreateSupervisorInTeamRequest
     */
    agent?: EngineLookup;
}
/**
 * 
 * @export
 * @interface EngineExceptDate
 */
export interface EngineExceptDate {
    /**
     * 
     * @type {string}
     * @memberof EngineExceptDate
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineExceptDate
     */
    calendarId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineExceptDate
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineExceptDate
     */
    date?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineExceptDate
     */
    repeat?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineExceptDate
     */
    disabled?: boolean;
}
/**
 * 
 * @export
 * @interface EngineListAcceptOfDay
 */
export interface EngineListAcceptOfDay {
    /**
     * 
     * @type {Array<EngineAcceptOfDay>}
     * @memberof EngineListAcceptOfDay
     */
    items?: Array<EngineAcceptOfDay>;
}
/**
 * 
 * @export
 * @interface EngineListAgent
 */
export interface EngineListAgent {
    /**
     * 
     * @type {Array<EngineAgent>}
     * @memberof EngineListAgent
     */
    items?: Array<EngineAgent>;
}
/**
 * 
 * @export
 * @interface EngineListAgentSkill
 */
export interface EngineListAgentSkill {
    /**
     * 
     * @type {Array<EngineAgentSkillItem>}
     * @memberof EngineListAgentSkill
     */
    items?: Array<EngineAgentSkillItem>;
}
/**
 * 
 * @export
 * @interface EngineListAgentTeam
 */
export interface EngineListAgentTeam {
    /**
     * 
     * @type {Array<EngineAgentTeam>}
     * @memberof EngineListAgentTeam
     */
    items?: Array<EngineAgentTeam>;
}
/**
 * 
 * @export
 * @interface EngineListCalendar
 */
export interface EngineListCalendar {
    /**
     * 
     * @type {Array<EngineCalendar>}
     * @memberof EngineListCalendar
     */
    items?: Array<EngineCalendar>;
}
/**
 * 
 * @export
 * @interface EngineListExceptDate
 */
export interface EngineListExceptDate {
    /**
     * 
     * @type {Array<EngineExceptDate>}
     * @memberof EngineListExceptDate
     */
    items?: Array<EngineExceptDate>;
}
/**
 * 
 * @export
 * @interface EngineListOutboundResource
 */
export interface EngineListOutboundResource {
    /**
     * 
     * @type {Array<EngineOutboundResource>}
     * @memberof EngineListOutboundResource
     */
    items?: Array<EngineOutboundResource>;
}
/**
 * 
 * @export
 * @interface EngineListQueue
 */
export interface EngineListQueue {
    /**
     * 
     * @type {Array<EngineQueue>}
     * @memberof EngineListQueue
     */
    items?: Array<EngineQueue>;
}
/**
 * 
 * @export
 * @interface EngineListResourceTeam
 */
export interface EngineListResourceTeam {
    /**
     * 
     * @type {Array<EngineResourceTeam>}
     * @memberof EngineListResourceTeam
     */
    items?: Array<EngineResourceTeam>;
}
/**
 * 
 * @export
 * @interface EngineListRoutingInboundCall
 */
export interface EngineListRoutingInboundCall {
    /**
     * 
     * @type {Array<EngineRoutingInboundCall>}
     * @memberof EngineListRoutingInboundCall
     */
    items?: Array<EngineRoutingInboundCall>;
}
/**
 * 
 * @export
 * @interface EngineListRoutingOutboundCall
 */
export interface EngineListRoutingOutboundCall {
    /**
     * 
     * @type {Array<EngineRoutingOutboundCall>}
     * @memberof EngineListRoutingOutboundCall
     */
    items?: Array<EngineRoutingOutboundCall>;
}
/**
 * 
 * @export
 * @interface EngineListRoutingScheme
 */
export interface EngineListRoutingScheme {
    /**
     * 
     * @type {Array<EngineRoutingScheme>}
     * @memberof EngineListRoutingScheme
     */
    items?: Array<EngineRoutingScheme>;
}
/**
 * 
 * @export
 * @interface EngineListRoutingVariable
 */
export interface EngineListRoutingVariable {
    /**
     * 
     * @type {Array<EngineRoutingVariable>}
     * @memberof EngineListRoutingVariable
     */
    items?: Array<EngineRoutingVariable>;
}
/**
 * 
 * @export
 * @interface EngineListSkill
 */
export interface EngineListSkill {
    /**
     * 
     * @type {Array<EngineSkill>}
     * @memberof EngineListSkill
     */
    items?: Array<EngineSkill>;
}
/**
 * 
 * @export
 * @interface EngineListSupervisorInTeam
 */
export interface EngineListSupervisorInTeam {
    /**
     * 
     * @type {Array<EngineSupervisorInTeam>}
     * @memberof EngineListSupervisorInTeam
     */
    items?: Array<EngineSupervisorInTeam>;
}
/**
 * 
 * @export
 * @interface EngineListTimezoneResponse
 */
export interface EngineListTimezoneResponse {
    /**
     * 
     * @type {Array<EngineTimezone>}
     * @memberof EngineListTimezoneResponse
     */
    items?: Array<EngineTimezone>;
}
/**
 * 
 * @export
 * @interface EngineLookup
 */
export interface EngineLookup {
    /**
     * 
     * @type {string}
     * @memberof EngineLookup
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineLookup
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface EngineOutboundResource
 */
export interface EngineOutboundResource {
    /**
     * 
     * @type {string}
     * @memberof EngineOutboundResource
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineOutboundResource
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineOutboundResource
     */
    createdAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineOutboundResource
     */
    createdBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineOutboundResource
     */
    updatedAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineOutboundResource
     */
    updatedBy?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineOutboundResource
     */
    limit?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineOutboundResource
     */
    enabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EngineOutboundResource
     */
    rps?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineOutboundResource
     */
    reserve?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EngineOutboundResource
     */
    variables?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof EngineOutboundResource
     */
    number?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineOutboundResource
     */
    maxSuccessivelyErrors?: number;
    /**
     * 
     * @type {string}
     * @memberof EngineOutboundResource
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineOutboundResource
     */
    dialString?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EngineOutboundResource
     */
    errorIds?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EngineOutboundResource
     */
    lastErrorId?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineOutboundResource
     */
    successivelyErrors?: number;
    /**
     * 
     * @type {string}
     * @memberof EngineOutboundResource
     */
    lastErrorAt?: string;
}
/**
 * 
 * @export
 * @interface EngineQueue
 */
export interface EngineQueue {
    /**
     * 
     * @type {string}
     * @memberof EngineQueue
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineQueue
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineQueue
     */
    createdAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineQueue
     */
    createdBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineQueue
     */
    updatedAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineQueue
     */
    updatedBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineQueue
     */
    strategy?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EngineQueue
     */
    enabled?: boolean;
    /**
     * 
     * @type {object}
     * @memberof EngineQueue
     */
    payload?: object;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineQueue
     */
    calendar?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineQueue
     */
    priority?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineQueue
     */
    maxCalls?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineQueue
     */
    secBetweenRetries?: number;
    /**
     * 
     * @type {string}
     * @memberof EngineQueue
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineQueue
     */
    maxOfRetry?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EngineQueue
     */
    variables?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof EngineQueue
     */
    timeout?: number;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineQueue
     */
    dncList?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineQueue
     */
    secLocateAgent?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineQueue
     */
    type?: number;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineQueue
     */
    team?: EngineLookup;
}
/**
 * 
 * @export
 * @interface EngineQueueRouting
 */
export interface EngineQueueRouting {
    /**
     * 
     * @type {string}
     * @memberof EngineQueueRouting
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineQueueRouting
     */
    queueId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineQueueRouting
     */
    pattern?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineQueueRouting
     */
    priority?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineQueueRouting
     */
    disabled?: boolean;
}
/**
 * 
 * @export
 * @interface EngineResourceTeam
 */
export interface EngineResourceTeam {
    /**
     * 
     * @type {string}
     * @memberof EngineResourceTeam
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineResourceTeam
     */
    teamId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineResourceTeam
     */
    domainId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineResourceTeam
     */
    agent?: EngineLookup;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineResourceTeam
     */
    skill?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineResourceTeam
     */
    lvl?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineResourceTeam
     */
    minCapacity?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineResourceTeam
     */
    maxCapacity?: number;
}
/**
 * 
 * @export
 * @interface EngineResponse
 */
export interface EngineResponse {
    /**
     * 
     * @type {string}
     * @memberof EngineResponse
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface EngineRoutingInboundCall
 */
export interface EngineRoutingInboundCall {
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingInboundCall
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingInboundCall
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingInboundCall
     */
    createdAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineRoutingInboundCall
     */
    createdBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingInboundCall
     */
    updatedAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineRoutingInboundCall
     */
    updatedBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingInboundCall
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingInboundCall
     */
    description?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineRoutingInboundCall
     */
    startScheme?: EngineLookup;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineRoutingInboundCall
     */
    stopScheme?: EngineLookup;
    /**
     * 
     * @type {Array<string>}
     * @memberof EngineRoutingInboundCall
     */
    numbers?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingInboundCall
     */
    host?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineRoutingInboundCall
     */
    timezone?: EngineLookup;
    /**
     * 
     * @type {boolean}
     * @memberof EngineRoutingInboundCall
     */
    debug?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EngineRoutingInboundCall
     */
    disabled?: boolean;
}
/**
 * 
 * @export
 * @interface EngineRoutingOutboundCall
 */
export interface EngineRoutingOutboundCall {
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingOutboundCall
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingOutboundCall
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingOutboundCall
     */
    createdAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineRoutingOutboundCall
     */
    createdBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingOutboundCall
     */
    updatedAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineRoutingOutboundCall
     */
    updatedBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingOutboundCall
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingOutboundCall
     */
    description?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineRoutingOutboundCall
     */
    scheme?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingOutboundCall
     */
    pattern?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineRoutingOutboundCall
     */
    priority?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineRoutingOutboundCall
     */
    disabled?: boolean;
}
/**
 * 
 * @export
 * @interface EngineRoutingScheme
 */
export interface EngineRoutingScheme {
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingScheme
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingScheme
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingScheme
     */
    createdAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineRoutingScheme
     */
    createdBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingScheme
     */
    updatedAt?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineRoutingScheme
     */
    updatedBy?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingScheme
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingScheme
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineRoutingScheme
     */
    type?: number;
    /**
     * 
     * @type {object}
     * @memberof EngineRoutingScheme
     */
    scheme?: object;
    /**
     * 
     * @type {object}
     * @memberof EngineRoutingScheme
     */
    payload?: object;
    /**
     * 
     * @type {boolean}
     * @memberof EngineRoutingScheme
     */
    debug?: boolean;
}
/**
 * 
 * @export
 * @interface EngineRoutingVariable
 */
export interface EngineRoutingVariable {
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingVariable
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingVariable
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingVariable
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineRoutingVariable
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface EngineSkill
 */
export interface EngineSkill {
    /**
     * 
     * @type {string}
     * @memberof EngineSkill
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineSkill
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineSkill
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineSkill
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EngineSupervisorInTeam
 */
export interface EngineSupervisorInTeam {
    /**
     * 
     * @type {string}
     * @memberof EngineSupervisorInTeam
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineSupervisorInTeam
     */
    teamId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineSupervisorInTeam
     */
    domainId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineSupervisorInTeam
     */
    agent?: EngineLookup;
}
/**
 * 
 * @export
 * @interface EngineTimezone
 */
export interface EngineTimezone {
    /**
     * 
     * @type {string}
     * @memberof EngineTimezone
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineTimezone
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineTimezone
     */
    offset?: string;
}
/**
 * 
 * @export
 * @interface EngineUpdateAcceptOfDayRequest
 */
export interface EngineUpdateAcceptOfDayRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAcceptOfDayRequest
     */
    calendarId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAcceptOfDayRequest
     */
    domainId?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateAcceptOfDayRequest
     */
    weekDay?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateAcceptOfDayRequest
     */
    startTimeOfDay?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateAcceptOfDayRequest
     */
    endTimeOfDay?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineUpdateAcceptOfDayRequest
     */
    disabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAcceptOfDayRequest
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface EngineUpdateAgentRequest
 */
export interface EngineUpdateAgentRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentRequest
     */
    domainId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineUpdateAgentRequest
     */
    user?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentRequest
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EngineUpdateAgentSkillRequest
 */
export interface EngineUpdateAgentSkillRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentSkillRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentSkillRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentSkillRequest
     */
    agentId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineUpdateAgentSkillRequest
     */
    skill?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateAgentSkillRequest
     */
    capacity?: number;
}
/**
 * 
 * @export
 * @interface EngineUpdateAgentTeamRequest
 */
export interface EngineUpdateAgentTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentTeamRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentTeamRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentTeamRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentTeamRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateAgentTeamRequest
     */
    strategy?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateAgentTeamRequest
     */
    maxNoAnswer?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateAgentTeamRequest
     */
    wrapUpTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateAgentTeamRequest
     */
    rejectDelayTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateAgentTeamRequest
     */
    busyDelayTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateAgentTeamRequest
     */
    noAnswerDelayTime?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateAgentTeamRequest
     */
    callTimeout?: number;
}
/**
 * 
 * @export
 * @interface EngineUpdateCalendarRequest
 */
export interface EngineUpdateCalendarRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateCalendarRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateCalendarRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateCalendarRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateCalendarRequest
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateCalendarRequest
     */
    finish?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineUpdateCalendarRequest
     */
    timezone?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateCalendarRequest
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EngineUpdateExceptDateRequest
 */
export interface EngineUpdateExceptDateRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateExceptDateRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateExceptDateRequest
     */
    calendarId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateExceptDateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateExceptDateRequest
     */
    date?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateExceptDateRequest
     */
    repeat?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineUpdateExceptDateRequest
     */
    disabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateExceptDateRequest
     */
    domainId?: string;
}
/**
 * 
 * @export
 * @interface EngineUpdateOutboundResourceRequest
 */
export interface EngineUpdateOutboundResourceRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    domainId?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    limit?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    enabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    rps?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    reserve?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    variables?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    number?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    maxSuccessivelyErrors?: number;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    dialString?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EngineUpdateOutboundResourceRequest
     */
    errorIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface EngineUpdateQueueRequest
 */
export interface EngineUpdateQueueRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateQueueRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateQueueRequest
     */
    strategy?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EngineUpdateQueueRequest
     */
    enabled?: boolean;
    /**
     * 
     * @type {object}
     * @memberof EngineUpdateQueueRequest
     */
    payload?: object;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineUpdateQueueRequest
     */
    calendar?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateQueueRequest
     */
    priority?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateQueueRequest
     */
    maxCalls?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateQueueRequest
     */
    secBetweenRetries?: number;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateQueueRequest
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateQueueRequest
     */
    maxOfRetry?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EngineUpdateQueueRequest
     */
    variables?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateQueueRequest
     */
    timeout?: number;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineUpdateQueueRequest
     */
    dncList?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateQueueRequest
     */
    secLocateAgent?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateQueueRequest
     */
    type?: number;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineUpdateQueueRequest
     */
    team?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateQueueRequest
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface EngineUpdateResourceTeamRequest
 */
export interface EngineUpdateResourceTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateResourceTeamRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateResourceTeamRequest
     */
    teamId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateResourceTeamRequest
     */
    domainId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineUpdateResourceTeamRequest
     */
    agent?: EngineLookup;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineUpdateResourceTeamRequest
     */
    skill?: EngineLookup;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateResourceTeamRequest
     */
    lvl?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateResourceTeamRequest
     */
    minCapacity?: number;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateResourceTeamRequest
     */
    maxCapacity?: number;
}
/**
 * 
 * @export
 * @interface EngineUpdateRoutingOutboundCallRequest
 */
export interface EngineUpdateRoutingOutboundCallRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingOutboundCallRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingOutboundCallRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingOutboundCallRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingOutboundCallRequest
     */
    description?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineUpdateRoutingOutboundCallRequest
     */
    scheme?: EngineLookup;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingOutboundCallRequest
     */
    pattern?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateRoutingOutboundCallRequest
     */
    priority?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EngineUpdateRoutingOutboundCallRequest
     */
    disabled?: boolean;
}
/**
 * 
 * @export
 * @interface EngineUpdateRoutingSchemeRequest
 */
export interface EngineUpdateRoutingSchemeRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingSchemeRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingSchemeRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingSchemeRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingSchemeRequest
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof EngineUpdateRoutingSchemeRequest
     */
    type?: number;
    /**
     * 
     * @type {object}
     * @memberof EngineUpdateRoutingSchemeRequest
     */
    scheme?: object;
    /**
     * 
     * @type {object}
     * @memberof EngineUpdateRoutingSchemeRequest
     */
    payload?: object;
    /**
     * 
     * @type {boolean}
     * @memberof EngineUpdateRoutingSchemeRequest
     */
    debug?: boolean;
}
/**
 * 
 * @export
 * @interface EngineUpdateRoutingVariableRequest
 */
export interface EngineUpdateRoutingVariableRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingVariableRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingVariableRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingVariableRequest
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateRoutingVariableRequest
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface EngineUpdateSkillRequest
 */
export interface EngineUpdateSkillRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateSkillRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateSkillRequest
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateSkillRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateSkillRequest
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EngineUpdateSupervisorInTeamRequest
 */
export interface EngineUpdateSupervisorInTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateSupervisorInTeamRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateSupervisorInTeamRequest
     */
    teamId?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineUpdateSupervisorInTeamRequest
     */
    domainId?: string;
    /**
     * 
     * @type {EngineLookup}
     * @memberof EngineUpdateSupervisorInTeamRequest
     */
    agent?: EngineLookup;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the  `Value` type union.     The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */
export enum ProtobufNullValue {
    NULLVALUE = 'NULL_VALUE'
}


/**
 * AgentServiceApi - axios parameter creator
 * @export
 */
export const AgentServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Agent
         * @param {EngineCreateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(body: EngineCreateAgentRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAgent.');
            }
            const localVarPath = `/call_center/agents`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateAgentRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Agent
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteAgent.');
            }
            const localVarPath = `/call_center/agents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Agent item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgent(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readAgent.');
            }
            const localVarPath = `/call_center/agents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of Agent
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgent(domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/call_center/agents`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Agent
         * @param {EngineUpdateAgentRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(body: EngineUpdateAgentRequest, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAgent.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateAgent.');
            }
            const localVarPath = `/call_center/agents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateAgentRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change agent status
         * @param {EngineAgentStatusRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentStatus(body: EngineAgentStatusRequest, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAgentStatus.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateAgentStatus.');
            }
            const localVarPath = `/call_center/agents/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineAgentStatusRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentServiceApi - functional programming interface
 * @export
 */
export const AgentServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Agent
         * @param {EngineCreateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(body: EngineCreateAgentRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).createAgent(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove Agent
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).deleteAgent(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Agent item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgent(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).readAgent(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of Agent
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgent(domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListAgent> {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).searchAgent(domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Agent
         * @param {EngineUpdateAgentRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(body: EngineUpdateAgentRequest, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).updateAgent(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Change agent status
         * @param {EngineAgentStatusRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentStatus(body: EngineAgentStatusRequest, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineResponse> {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).updateAgentStatus(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AgentServiceApi - factory interface
 * @export
 */
export const AgentServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create Agent
         * @param {EngineCreateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(body: EngineCreateAgentRequest, options?: any) {
            return AgentServiceApiFp(configuration).createAgent(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove Agent
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(id: string, domainId?: string, options?: any) {
            return AgentServiceApiFp(configuration).deleteAgent(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Agent item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgent(id: string, domainId?: string, options?: any) {
            return AgentServiceApiFp(configuration).readAgent(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of Agent
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgent(domainId?: string, size?: number, page?: number, options?: any) {
            return AgentServiceApiFp(configuration).searchAgent(domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update Agent
         * @param {EngineUpdateAgentRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(body: EngineUpdateAgentRequest, id: string, options?: any) {
            return AgentServiceApiFp(configuration).updateAgent(body, id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Change agent status
         * @param {EngineAgentStatusRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentStatus(body: EngineAgentStatusRequest, id: string, options?: any) {
            return AgentServiceApiFp(configuration).updateAgentStatus(body, id, options)(axios, basePath);
        },
    };
};

/**
 * AgentServiceApi - object-oriented interface
 * @export
 * @class AgentServiceApi
 * @extends {BaseAPI}
 */
export class AgentServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    public createAgent(body: EngineCreateAgentRequest, options?: any) {
        return AgentServiceApiFp(this.configuration).createAgent(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove Agent
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    public deleteAgent(id: string, domainId?: string, options?: any) {
        return AgentServiceApiFp(this.configuration).deleteAgent(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Agent item
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    public readAgent(id: string, domainId?: string, options?: any) {
        return AgentServiceApiFp(this.configuration).readAgent(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of Agent
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    public searchAgent(domainId?: string, size?: number, page?: number, options?: any) {
        return AgentServiceApiFp(this.configuration).searchAgent(domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update Agent
     * @param {EngineUpdateAgentRequest} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    public updateAgent(body: EngineUpdateAgentRequest, id: string, options?: any) {
        return AgentServiceApiFp(this.configuration).updateAgent(body, id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Change agent status
     * @param {EngineAgentStatusRequest} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    public updateAgentStatus(body: EngineAgentStatusRequest, id: string, options?: any) {
        return AgentServiceApiFp(this.configuration).updateAgentStatus(body, id, options)(this.axios, this.basePath);
    }

}


/**
 * AgentSkillServiceApi - axios parameter creator
 * @export
 */
export const AgentSkillServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create AgentSkill
         * @param {EngineCreateAgentSkillRequest} body 
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentSkill(body: EngineCreateAgentSkillRequest, agentId: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAgentSkill.');
            }
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling createAgentSkill.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/skills`
                .replace(`{${"agent_id"}}`, encodeURIComponent(String(agentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateAgentSkillRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove AgentSkill
         * @param {string} agentId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentSkill(agentId: string, id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling deleteAgentSkill.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteAgentSkill.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
                .replace(`{${"agent_id"}}`, encodeURIComponent(String(agentId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary AgentSkill item
         * @param {string} agentId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentSkill(agentId: string, id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling readAgentSkill.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readAgentSkill.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
                .replace(`{${"agent_id"}}`, encodeURIComponent(String(agentId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of AgentSkill
         * @param {string} agentId 
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentSkill(agentId: string, domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling searchAgentSkill.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/skills`
                .replace(`{${"agent_id"}}`, encodeURIComponent(String(agentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update AgentSkill
         * @param {EngineUpdateAgentSkillRequest} body 
         * @param {string} agentId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentSkill(body: EngineUpdateAgentSkillRequest, agentId: string, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAgentSkill.');
            }
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling updateAgentSkill.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateAgentSkill.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
                .replace(`{${"agent_id"}}`, encodeURIComponent(String(agentId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateAgentSkillRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentSkillServiceApi - functional programming interface
 * @export
 */
export const AgentSkillServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create AgentSkill
         * @param {EngineCreateAgentSkillRequest} body 
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentSkill(body: EngineCreateAgentSkillRequest, agentId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgentSkill> {
            const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).createAgentSkill(body, agentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove AgentSkill
         * @param {string} agentId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentSkill(agentId: string, id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgentSkill> {
            const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).deleteAgentSkill(agentId, id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary AgentSkill item
         * @param {string} agentId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentSkill(agentId: string, id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgentSkill> {
            const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).readAgentSkill(agentId, id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of AgentSkill
         * @param {string} agentId 
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentSkill(agentId: string, domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListAgentSkill> {
            const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).searchAgentSkill(agentId, domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update AgentSkill
         * @param {EngineUpdateAgentSkillRequest} body 
         * @param {string} agentId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentSkill(body: EngineUpdateAgentSkillRequest, agentId: string, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgentSkill> {
            const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).updateAgentSkill(body, agentId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AgentSkillServiceApi - factory interface
 * @export
 */
export const AgentSkillServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create AgentSkill
         * @param {EngineCreateAgentSkillRequest} body 
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentSkill(body: EngineCreateAgentSkillRequest, agentId: string, options?: any) {
            return AgentSkillServiceApiFp(configuration).createAgentSkill(body, agentId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove AgentSkill
         * @param {string} agentId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentSkill(agentId: string, id: string, domainId?: string, options?: any) {
            return AgentSkillServiceApiFp(configuration).deleteAgentSkill(agentId, id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary AgentSkill item
         * @param {string} agentId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentSkill(agentId: string, id: string, domainId?: string, options?: any) {
            return AgentSkillServiceApiFp(configuration).readAgentSkill(agentId, id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of AgentSkill
         * @param {string} agentId 
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentSkill(agentId: string, domainId?: string, size?: number, page?: number, options?: any) {
            return AgentSkillServiceApiFp(configuration).searchAgentSkill(agentId, domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update AgentSkill
         * @param {EngineUpdateAgentSkillRequest} body 
         * @param {string} agentId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentSkill(body: EngineUpdateAgentSkillRequest, agentId: string, id: string, options?: any) {
            return AgentSkillServiceApiFp(configuration).updateAgentSkill(body, agentId, id, options)(axios, basePath);
        },
    };
};

/**
 * AgentSkillServiceApi - object-oriented interface
 * @export
 * @class AgentSkillServiceApi
 * @extends {BaseAPI}
 */
export class AgentSkillServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create AgentSkill
     * @param {EngineCreateAgentSkillRequest} body 
     * @param {string} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentSkillServiceApi
     */
    public createAgentSkill(body: EngineCreateAgentSkillRequest, agentId: string, options?: any) {
        return AgentSkillServiceApiFp(this.configuration).createAgentSkill(body, agentId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove AgentSkill
     * @param {string} agentId 
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentSkillServiceApi
     */
    public deleteAgentSkill(agentId: string, id: string, domainId?: string, options?: any) {
        return AgentSkillServiceApiFp(this.configuration).deleteAgentSkill(agentId, id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary AgentSkill item
     * @param {string} agentId 
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentSkillServiceApi
     */
    public readAgentSkill(agentId: string, id: string, domainId?: string, options?: any) {
        return AgentSkillServiceApiFp(this.configuration).readAgentSkill(agentId, id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of AgentSkill
     * @param {string} agentId 
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentSkillServiceApi
     */
    public searchAgentSkill(agentId: string, domainId?: string, size?: number, page?: number, options?: any) {
        return AgentSkillServiceApiFp(this.configuration).searchAgentSkill(agentId, domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update AgentSkill
     * @param {EngineUpdateAgentSkillRequest} body 
     * @param {string} agentId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentSkillServiceApi
     */
    public updateAgentSkill(body: EngineUpdateAgentSkillRequest, agentId: string, id: string, options?: any) {
        return AgentSkillServiceApiFp(this.configuration).updateAgentSkill(body, agentId, id, options)(this.axios, this.basePath);
    }

}


/**
 * AgentTeamServiceApi - axios parameter creator
 * @export
 */
export const AgentTeamServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create AgentTeam
         * @param {EngineCreateAgentTeamRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentTeam(body: EngineCreateAgentTeamRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAgentTeam.');
            }
            const localVarPath = `/call_center/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateAgentTeamRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove AgentTeam
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentTeam(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteAgentTeam.');
            }
            const localVarPath = `/call_center/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary AgentTeam item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentTeam(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readAgentTeam.');
            }
            const localVarPath = `/call_center/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of AgentTeam
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentTeam(domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/call_center/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update AgentTeam
         * @param {EngineUpdateAgentTeamRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentTeam(body: EngineUpdateAgentTeamRequest, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAgentTeam.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateAgentTeam.');
            }
            const localVarPath = `/call_center/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateAgentTeamRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentTeamServiceApi - functional programming interface
 * @export
 */
export const AgentTeamServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create AgentTeam
         * @param {EngineCreateAgentTeamRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgentTeam> {
            const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).createAgentTeam(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove AgentTeam
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentTeam(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgentTeam> {
            const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).deleteAgentTeam(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary AgentTeam item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentTeam(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgentTeam> {
            const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).readAgentTeam(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of AgentTeam
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentTeam(domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListAgentTeam> {
            const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).searchAgentTeam(domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update AgentTeam
         * @param {EngineUpdateAgentTeamRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentTeam(body: EngineUpdateAgentTeamRequest, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgentTeam> {
            const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).updateAgentTeam(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AgentTeamServiceApi - factory interface
 * @export
 */
export const AgentTeamServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create AgentTeam
         * @param {EngineCreateAgentTeamRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any) {
            return AgentTeamServiceApiFp(configuration).createAgentTeam(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove AgentTeam
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentTeam(id: string, domainId?: string, options?: any) {
            return AgentTeamServiceApiFp(configuration).deleteAgentTeam(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary AgentTeam item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentTeam(id: string, domainId?: string, options?: any) {
            return AgentTeamServiceApiFp(configuration).readAgentTeam(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of AgentTeam
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentTeam(domainId?: string, size?: number, page?: number, options?: any) {
            return AgentTeamServiceApiFp(configuration).searchAgentTeam(domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update AgentTeam
         * @param {EngineUpdateAgentTeamRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentTeam(body: EngineUpdateAgentTeamRequest, id: string, options?: any) {
            return AgentTeamServiceApiFp(configuration).updateAgentTeam(body, id, options)(axios, basePath);
        },
    };
};

/**
 * AgentTeamServiceApi - object-oriented interface
 * @export
 * @class AgentTeamServiceApi
 * @extends {BaseAPI}
 */
export class AgentTeamServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentTeamServiceApi
     */
    public createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any) {
        return AgentTeamServiceApiFp(this.configuration).createAgentTeam(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove AgentTeam
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentTeamServiceApi
     */
    public deleteAgentTeam(id: string, domainId?: string, options?: any) {
        return AgentTeamServiceApiFp(this.configuration).deleteAgentTeam(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary AgentTeam item
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentTeamServiceApi
     */
    public readAgentTeam(id: string, domainId?: string, options?: any) {
        return AgentTeamServiceApiFp(this.configuration).readAgentTeam(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of AgentTeam
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentTeamServiceApi
     */
    public searchAgentTeam(domainId?: string, size?: number, page?: number, options?: any) {
        return AgentTeamServiceApiFp(this.configuration).searchAgentTeam(domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update AgentTeam
     * @param {EngineUpdateAgentTeamRequest} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentTeamServiceApi
     */
    public updateAgentTeam(body: EngineUpdateAgentTeamRequest, id: string, options?: any) {
        return AgentTeamServiceApiFp(this.configuration).updateAgentTeam(body, id, options)(this.axios, this.basePath);
    }

}


/**
 * CalendarServiceApi - axios parameter creator
 * @export
 */
export const CalendarServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create AcceptOfDay
         * @param {EngineCreateAcceptOfDayRequest} body 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAcceptOfDay(body: EngineCreateAcceptOfDayRequest, calendarId: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAcceptOfDay.');
            }
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling createAcceptOfDay.');
            }
            const localVarPath = `/calendars/{calendar_id}/accepts`
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateAcceptOfDayRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create calendar
         * @param {EngineCreateCalendarRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar(body: EngineCreateCalendarRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCalendar.');
            }
            const localVarPath = `/calendars`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateCalendarRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create ExceptDate
         * @param {EngineCreateExceptDateRequest} body 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExceptDate(body: EngineCreateExceptDateRequest, calendarId: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createExceptDate.');
            }
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling createExceptDate.');
            }
            const localVarPath = `/calendars/{calendar_id}/excepts`
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateExceptDateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete AcceptOfDay
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAcceptOfDay(calendarId: string, id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling deleteAcceptOfDay.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteAcceptOfDay.');
            }
            const localVarPath = `/calendars/{calendar_id}/accepts/{id}`
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove calendar
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCalendar(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCalendar.');
            }
            const localVarPath = `/calendars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete ExceptDate
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExceptDate(calendarId: string, id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling deleteExceptDate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteExceptDate.');
            }
            const localVarPath = `/calendars/{calendar_id}/excepts/{id}`
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read AcceptOfDay
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAcceptOfDay(calendarId: string, id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling readAcceptOfDay.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readAcceptOfDay.');
            }
            const localVarPath = `/calendars/{calendar_id}/accepts/{id}`
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Calendar item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCalendar(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readCalendar.');
            }
            const localVarPath = `/calendars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read ExceptDate
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readExceptDate(calendarId: string, id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling readExceptDate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readExceptDate.');
            }
            const localVarPath = `/calendars/{calendar_id}/excepts/{id}`
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List AcceptOfDay
         * @param {string} calendarId 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAcceptOfDay(calendarId: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling searchAcceptOfDay.');
            }
            const localVarPath = `/calendars/{calendar_id}/accepts`
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of calendar
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCalendar(domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/calendars`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List ExceptDate
         * @param {string} calendarId 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchExceptDate(calendarId: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling searchExceptDate.');
            }
            const localVarPath = `/calendars/{calendar_id}/excepts`
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List timezones
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTimezones(size?: number, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/calendars/timezones`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update AcceptOfDay
         * @param {EngineUpdateAcceptOfDayRequest} body 
         * @param {string} calendarId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAcceptOfDay(body: EngineUpdateAcceptOfDayRequest, calendarId: string, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAcceptOfDay.');
            }
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling updateAcceptOfDay.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateAcceptOfDay.');
            }
            const localVarPath = `/calendars/{calendar_id}/accepts/{id}`
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateAcceptOfDayRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update calendar
         * @param {EngineUpdateCalendarRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCalendar(body: EngineUpdateCalendarRequest, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCalendar.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCalendar.');
            }
            const localVarPath = `/calendars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateCalendarRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update ExceptDate
         * @param {EngineUpdateExceptDateRequest} body 
         * @param {string} calendarId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExceptDate(body: EngineUpdateExceptDateRequest, calendarId: string, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateExceptDate.');
            }
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling updateExceptDate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateExceptDate.');
            }
            const localVarPath = `/calendars/{calendar_id}/excepts/{id}`
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateExceptDateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalendarServiceApi - functional programming interface
 * @export
 */
export const CalendarServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create AcceptOfDay
         * @param {EngineCreateAcceptOfDayRequest} body 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAcceptOfDay(body: EngineCreateAcceptOfDayRequest, calendarId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAcceptOfDay> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).createAcceptOfDay(body, calendarId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create calendar
         * @param {EngineCreateCalendarRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar(body: EngineCreateCalendarRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineCalendar> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).createCalendar(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create ExceptDate
         * @param {EngineCreateExceptDateRequest} body 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExceptDate(body: EngineCreateExceptDateRequest, calendarId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineExceptDate> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).createExceptDate(body, calendarId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete AcceptOfDay
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAcceptOfDay(calendarId: string, id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAcceptOfDay> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).deleteAcceptOfDay(calendarId, id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove calendar
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCalendar(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineCalendar> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).deleteCalendar(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete ExceptDate
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExceptDate(calendarId: string, id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineExceptDate> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).deleteExceptDate(calendarId, id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read AcceptOfDay
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAcceptOfDay(calendarId: string, id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAcceptOfDay> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).readAcceptOfDay(calendarId, id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Calendar item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCalendar(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineCalendar> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).readCalendar(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read ExceptDate
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readExceptDate(calendarId: string, id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineExceptDate> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).readExceptDate(calendarId, id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List AcceptOfDay
         * @param {string} calendarId 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAcceptOfDay(calendarId: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListAcceptOfDay> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).searchAcceptOfDay(calendarId, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of calendar
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCalendar(domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListCalendar> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).searchCalendar(domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List ExceptDate
         * @param {string} calendarId 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchExceptDate(calendarId: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListExceptDate> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).searchExceptDate(calendarId, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List timezones
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTimezones(size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListTimezoneResponse> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).searchTimezones(size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update AcceptOfDay
         * @param {EngineUpdateAcceptOfDayRequest} body 
         * @param {string} calendarId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAcceptOfDay(body: EngineUpdateAcceptOfDayRequest, calendarId: string, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAcceptOfDay> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).updateAcceptOfDay(body, calendarId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update calendar
         * @param {EngineUpdateCalendarRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCalendar(body: EngineUpdateCalendarRequest, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineCalendar> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).updateCalendar(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update ExceptDate
         * @param {EngineUpdateExceptDateRequest} body 
         * @param {string} calendarId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExceptDate(body: EngineUpdateExceptDateRequest, calendarId: string, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineExceptDate> {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).updateExceptDate(body, calendarId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CalendarServiceApi - factory interface
 * @export
 */
export const CalendarServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create AcceptOfDay
         * @param {EngineCreateAcceptOfDayRequest} body 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAcceptOfDay(body: EngineCreateAcceptOfDayRequest, calendarId: string, options?: any) {
            return CalendarServiceApiFp(configuration).createAcceptOfDay(body, calendarId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Create calendar
         * @param {EngineCreateCalendarRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar(body: EngineCreateCalendarRequest, options?: any) {
            return CalendarServiceApiFp(configuration).createCalendar(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Create ExceptDate
         * @param {EngineCreateExceptDateRequest} body 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExceptDate(body: EngineCreateExceptDateRequest, calendarId: string, options?: any) {
            return CalendarServiceApiFp(configuration).createExceptDate(body, calendarId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Delete AcceptOfDay
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAcceptOfDay(calendarId: string, id: string, domainId?: string, options?: any) {
            return CalendarServiceApiFp(configuration).deleteAcceptOfDay(calendarId, id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove calendar
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCalendar(id: string, domainId?: string, options?: any) {
            return CalendarServiceApiFp(configuration).deleteCalendar(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Delete ExceptDate
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExceptDate(calendarId: string, id: string, domainId?: string, options?: any) {
            return CalendarServiceApiFp(configuration).deleteExceptDate(calendarId, id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Read AcceptOfDay
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAcceptOfDay(calendarId: string, id: string, domainId?: string, options?: any) {
            return CalendarServiceApiFp(configuration).readAcceptOfDay(calendarId, id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Calendar item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCalendar(id: string, domainId?: string, options?: any) {
            return CalendarServiceApiFp(configuration).readCalendar(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Read ExceptDate
         * @param {string} calendarId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readExceptDate(calendarId: string, id: string, domainId?: string, options?: any) {
            return CalendarServiceApiFp(configuration).readExceptDate(calendarId, id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List AcceptOfDay
         * @param {string} calendarId 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAcceptOfDay(calendarId: string, domainId?: string, options?: any) {
            return CalendarServiceApiFp(configuration).searchAcceptOfDay(calendarId, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of calendar
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCalendar(domainId?: string, size?: number, page?: number, options?: any) {
            return CalendarServiceApiFp(configuration).searchCalendar(domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary List ExceptDate
         * @param {string} calendarId 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchExceptDate(calendarId: string, domainId?: string, options?: any) {
            return CalendarServiceApiFp(configuration).searchExceptDate(calendarId, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List timezones
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTimezones(size?: number, page?: number, options?: any) {
            return CalendarServiceApiFp(configuration).searchTimezones(size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update AcceptOfDay
         * @param {EngineUpdateAcceptOfDayRequest} body 
         * @param {string} calendarId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAcceptOfDay(body: EngineUpdateAcceptOfDayRequest, calendarId: string, id: string, options?: any) {
            return CalendarServiceApiFp(configuration).updateAcceptOfDay(body, calendarId, id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update calendar
         * @param {EngineUpdateCalendarRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCalendar(body: EngineUpdateCalendarRequest, id: string, options?: any) {
            return CalendarServiceApiFp(configuration).updateCalendar(body, id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update ExceptDate
         * @param {EngineUpdateExceptDateRequest} body 
         * @param {string} calendarId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExceptDate(body: EngineUpdateExceptDateRequest, calendarId: string, id: string, options?: any) {
            return CalendarServiceApiFp(configuration).updateExceptDate(body, calendarId, id, options)(axios, basePath);
        },
    };
};

/**
 * CalendarServiceApi - object-oriented interface
 * @export
 * @class CalendarServiceApi
 * @extends {BaseAPI}
 */
export class CalendarServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create AcceptOfDay
     * @param {EngineCreateAcceptOfDayRequest} body 
     * @param {string} calendarId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public createAcceptOfDay(body: EngineCreateAcceptOfDayRequest, calendarId: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).createAcceptOfDay(body, calendarId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public createCalendar(body: EngineCreateCalendarRequest, options?: any) {
        return CalendarServiceApiFp(this.configuration).createCalendar(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Create ExceptDate
     * @param {EngineCreateExceptDateRequest} body 
     * @param {string} calendarId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public createExceptDate(body: EngineCreateExceptDateRequest, calendarId: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).createExceptDate(body, calendarId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Delete AcceptOfDay
     * @param {string} calendarId 
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public deleteAcceptOfDay(calendarId: string, id: string, domainId?: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).deleteAcceptOfDay(calendarId, id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove calendar
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public deleteCalendar(id: string, domainId?: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).deleteCalendar(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Delete ExceptDate
     * @param {string} calendarId 
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public deleteExceptDate(calendarId: string, id: string, domainId?: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).deleteExceptDate(calendarId, id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Read AcceptOfDay
     * @param {string} calendarId 
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public readAcceptOfDay(calendarId: string, id: string, domainId?: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).readAcceptOfDay(calendarId, id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Calendar item
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public readCalendar(id: string, domainId?: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).readCalendar(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Read ExceptDate
     * @param {string} calendarId 
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public readExceptDate(calendarId: string, id: string, domainId?: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).readExceptDate(calendarId, id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List AcceptOfDay
     * @param {string} calendarId 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public searchAcceptOfDay(calendarId: string, domainId?: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).searchAcceptOfDay(calendarId, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of calendar
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public searchCalendar(domainId?: string, size?: number, page?: number, options?: any) {
        return CalendarServiceApiFp(this.configuration).searchCalendar(domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List ExceptDate
     * @param {string} calendarId 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public searchExceptDate(calendarId: string, domainId?: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).searchExceptDate(calendarId, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List timezones
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public searchTimezones(size?: number, page?: number, options?: any) {
        return CalendarServiceApiFp(this.configuration).searchTimezones(size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update AcceptOfDay
     * @param {EngineUpdateAcceptOfDayRequest} body 
     * @param {string} calendarId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public updateAcceptOfDay(body: EngineUpdateAcceptOfDayRequest, calendarId: string, id: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).updateAcceptOfDay(body, calendarId, id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update calendar
     * @param {EngineUpdateCalendarRequest} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public updateCalendar(body: EngineUpdateCalendarRequest, id: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).updateCalendar(body, id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update ExceptDate
     * @param {EngineUpdateExceptDateRequest} body 
     * @param {string} calendarId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    public updateExceptDate(body: EngineUpdateExceptDateRequest, calendarId: string, id: string, options?: any) {
        return CalendarServiceApiFp(this.configuration).updateExceptDate(body, calendarId, id, options)(this.axios, this.basePath);
    }

}


/**
 * OutboundResourceServiceApi - axios parameter creator
 * @export
 */
export const OutboundResourceServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create OutboundResource
         * @param {EngineCreateOutboundResourceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResource(body: EngineCreateOutboundResourceRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOutboundResource.');
            }
            const localVarPath = `/call_center/resources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateOutboundResourceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove OutboundResource
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResource(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteOutboundResource.');
            }
            const localVarPath = `/call_center/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary OutboundResource item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResource(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readOutboundResource.');
            }
            const localVarPath = `/call_center/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of OutboundResource
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResource(domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/call_center/resources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update OutboundResource
         * @param {EngineUpdateOutboundResourceRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResource(body: EngineUpdateOutboundResourceRequest, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOutboundResource.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateOutboundResource.');
            }
            const localVarPath = `/call_center/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateOutboundResourceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OutboundResourceServiceApi - functional programming interface
 * @export
 */
export const OutboundResourceServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create OutboundResource
         * @param {EngineCreateOutboundResourceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResource(body: EngineCreateOutboundResourceRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineOutboundResource> {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).createOutboundResource(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove OutboundResource
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResource(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineOutboundResource> {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).deleteOutboundResource(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary OutboundResource item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResource(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineOutboundResource> {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).readOutboundResource(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of OutboundResource
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResource(domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListOutboundResource> {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).searchOutboundResource(domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update OutboundResource
         * @param {EngineUpdateOutboundResourceRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResource(body: EngineUpdateOutboundResourceRequest, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineOutboundResource> {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).updateOutboundResource(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OutboundResourceServiceApi - factory interface
 * @export
 */
export const OutboundResourceServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create OutboundResource
         * @param {EngineCreateOutboundResourceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResource(body: EngineCreateOutboundResourceRequest, options?: any) {
            return OutboundResourceServiceApiFp(configuration).createOutboundResource(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove OutboundResource
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResource(id: string, domainId?: string, options?: any) {
            return OutboundResourceServiceApiFp(configuration).deleteOutboundResource(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary OutboundResource item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResource(id: string, domainId?: string, options?: any) {
            return OutboundResourceServiceApiFp(configuration).readOutboundResource(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of OutboundResource
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResource(domainId?: string, size?: number, page?: number, options?: any) {
            return OutboundResourceServiceApiFp(configuration).searchOutboundResource(domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update OutboundResource
         * @param {EngineUpdateOutboundResourceRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResource(body: EngineUpdateOutboundResourceRequest, id: string, options?: any) {
            return OutboundResourceServiceApiFp(configuration).updateOutboundResource(body, id, options)(axios, basePath);
        },
    };
};

/**
 * OutboundResourceServiceApi - object-oriented interface
 * @export
 * @class OutboundResourceServiceApi
 * @extends {BaseAPI}
 */
export class OutboundResourceServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    public createOutboundResource(body: EngineCreateOutboundResourceRequest, options?: any) {
        return OutboundResourceServiceApiFp(this.configuration).createOutboundResource(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove OutboundResource
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    public deleteOutboundResource(id: string, domainId?: string, options?: any) {
        return OutboundResourceServiceApiFp(this.configuration).deleteOutboundResource(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary OutboundResource item
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    public readOutboundResource(id: string, domainId?: string, options?: any) {
        return OutboundResourceServiceApiFp(this.configuration).readOutboundResource(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of OutboundResource
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    public searchOutboundResource(domainId?: string, size?: number, page?: number, options?: any) {
        return OutboundResourceServiceApiFp(this.configuration).searchOutboundResource(domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update OutboundResource
     * @param {EngineUpdateOutboundResourceRequest} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    public updateOutboundResource(body: EngineUpdateOutboundResourceRequest, id: string, options?: any) {
        return OutboundResourceServiceApiFp(this.configuration).updateOutboundResource(body, id, options)(this.axios, this.basePath);
    }

}


/**
 * QueueRoutingServiceApi - axios parameter creator
 * @export
 */
export const QueueRoutingServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EngineCreateQueueRoutingRequest} body 
         * @param {string} queueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueRouting(body: EngineCreateQueueRoutingRequest, queueId: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createQueueRouting.');
            }
            // verify required parameter 'queueId' is not null or undefined
            if (queueId === null || queueId === undefined) {
                throw new RequiredError('queueId','Required parameter queueId was null or undefined when calling createQueueRouting.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/routings`
                .replace(`{${"queue_id"}}`, encodeURIComponent(String(queueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateQueueRoutingRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueueRoutingServiceApi - functional programming interface
 * @export
 */
export const QueueRoutingServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EngineCreateQueueRoutingRequest} body 
         * @param {string} queueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueRouting(body: EngineCreateQueueRoutingRequest, queueId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueueRouting> {
            const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).createQueueRouting(body, queueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * QueueRoutingServiceApi - factory interface
 * @export
 */
export const QueueRoutingServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {EngineCreateQueueRoutingRequest} body 
         * @param {string} queueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueRouting(body: EngineCreateQueueRoutingRequest, queueId: string, options?: any) {
            return QueueRoutingServiceApiFp(configuration).createQueueRouting(body, queueId, options)(axios, basePath);
        },
    };
};

/**
 * QueueRoutingServiceApi - object-oriented interface
 * @export
 * @class QueueRoutingServiceApi
 * @extends {BaseAPI}
 */
export class QueueRoutingServiceApi extends BaseAPI {
    /**
     * 
     * @param {EngineCreateQueueRoutingRequest} body 
     * @param {string} queueId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueRoutingServiceApi
     */
    public createQueueRouting(body: EngineCreateQueueRoutingRequest, queueId: string, options?: any) {
        return QueueRoutingServiceApiFp(this.configuration).createQueueRouting(body, queueId, options)(this.axios, this.basePath);
    }

}


/**
 * QueueServiceApi - axios parameter creator
 * @export
 */
export const QueueServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Queue
         * @param {EngineCreateQueueRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueue(body: EngineCreateQueueRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createQueue.');
            }
            const localVarPath = `/call_center/queues`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateQueueRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Queue
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueue(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteQueue.');
            }
            const localVarPath = `/call_center/queues/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Queue item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueue(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readQueue.');
            }
            const localVarPath = `/call_center/queues/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of Queue
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueue(domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/call_center/queues`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Queue
         * @param {EngineUpdateQueueRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueue(body: EngineUpdateQueueRequest, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateQueue.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateQueue.');
            }
            const localVarPath = `/call_center/queues/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateQueueRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueueServiceApi - functional programming interface
 * @export
 */
export const QueueServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Queue
         * @param {EngineCreateQueueRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueue(body: EngineCreateQueueRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).createQueue(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove Queue
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueue(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).deleteQueue(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Queue item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueue(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).readQueue(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of Queue
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueue(domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListQueue> {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).searchQueue(domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Queue
         * @param {EngineUpdateQueueRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueue(body: EngineUpdateQueueRequest, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).updateQueue(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * QueueServiceApi - factory interface
 * @export
 */
export const QueueServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create Queue
         * @param {EngineCreateQueueRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueue(body: EngineCreateQueueRequest, options?: any) {
            return QueueServiceApiFp(configuration).createQueue(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove Queue
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueue(id: string, domainId?: string, options?: any) {
            return QueueServiceApiFp(configuration).deleteQueue(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Queue item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueue(id: string, domainId?: string, options?: any) {
            return QueueServiceApiFp(configuration).readQueue(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of Queue
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueue(domainId?: string, size?: number, page?: number, options?: any) {
            return QueueServiceApiFp(configuration).searchQueue(domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update Queue
         * @param {EngineUpdateQueueRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueue(body: EngineUpdateQueueRequest, id: string, options?: any) {
            return QueueServiceApiFp(configuration).updateQueue(body, id, options)(axios, basePath);
        },
    };
};

/**
 * QueueServiceApi - object-oriented interface
 * @export
 * @class QueueServiceApi
 * @extends {BaseAPI}
 */
export class QueueServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    public createQueue(body: EngineCreateQueueRequest, options?: any) {
        return QueueServiceApiFp(this.configuration).createQueue(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove Queue
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    public deleteQueue(id: string, domainId?: string, options?: any) {
        return QueueServiceApiFp(this.configuration).deleteQueue(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Queue item
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    public readQueue(id: string, domainId?: string, options?: any) {
        return QueueServiceApiFp(this.configuration).readQueue(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of Queue
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    public searchQueue(domainId?: string, size?: number, page?: number, options?: any) {
        return QueueServiceApiFp(this.configuration).searchQueue(domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update Queue
     * @param {EngineUpdateQueueRequest} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    public updateQueue(body: EngineUpdateQueueRequest, id: string, options?: any) {
        return QueueServiceApiFp(this.configuration).updateQueue(body, id, options)(this.axios, this.basePath);
    }

}


/**
 * ResourceTeamServiceApi - axios parameter creator
 * @export
 */
export const ResourceTeamServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create ResourceTeam
         * @param {EngineCreateResourceTeamRequest} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceTeam(body: EngineCreateResourceTeamRequest, teamId: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createResourceTeam.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling createResourceTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/resources`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateResourceTeamRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove ResourceTeam
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceTeam(teamId: string, id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling deleteResourceTeam.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteResourceTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/resources/{id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ResourceTeam item
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readResourceTeam(teamId: string, id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling readResourceTeam.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readResourceTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/resources/{id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of ResourceTeam
         * @param {string} teamId 
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchResourceTeam(teamId: string, domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling searchResourceTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/resources`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update ResourceTeam
         * @param {EngineUpdateResourceTeamRequest} body 
         * @param {string} teamId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceTeam(body: EngineUpdateResourceTeamRequest, teamId: string, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateResourceTeam.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling updateResourceTeam.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateResourceTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/resources/{id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateResourceTeamRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceTeamServiceApi - functional programming interface
 * @export
 */
export const ResourceTeamServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create ResourceTeam
         * @param {EngineCreateResourceTeamRequest} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceTeam(body: EngineCreateResourceTeamRequest, teamId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineResourceTeam> {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).createResourceTeam(body, teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove ResourceTeam
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceTeam(teamId: string, id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineResourceTeam> {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).deleteResourceTeam(teamId, id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ResourceTeam item
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readResourceTeam(teamId: string, id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineResourceTeam> {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).readResourceTeam(teamId, id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of ResourceTeam
         * @param {string} teamId 
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchResourceTeam(teamId: string, domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListResourceTeam> {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).searchResourceTeam(teamId, domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update ResourceTeam
         * @param {EngineUpdateResourceTeamRequest} body 
         * @param {string} teamId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceTeam(body: EngineUpdateResourceTeamRequest, teamId: string, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineResourceTeam> {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).updateResourceTeam(body, teamId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourceTeamServiceApi - factory interface
 * @export
 */
export const ResourceTeamServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create ResourceTeam
         * @param {EngineCreateResourceTeamRequest} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceTeam(body: EngineCreateResourceTeamRequest, teamId: string, options?: any) {
            return ResourceTeamServiceApiFp(configuration).createResourceTeam(body, teamId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove ResourceTeam
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceTeam(teamId: string, id: string, domainId?: string, options?: any) {
            return ResourceTeamServiceApiFp(configuration).deleteResourceTeam(teamId, id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary ResourceTeam item
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readResourceTeam(teamId: string, id: string, domainId?: string, options?: any) {
            return ResourceTeamServiceApiFp(configuration).readResourceTeam(teamId, id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of ResourceTeam
         * @param {string} teamId 
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchResourceTeam(teamId: string, domainId?: string, size?: number, page?: number, options?: any) {
            return ResourceTeamServiceApiFp(configuration).searchResourceTeam(teamId, domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update ResourceTeam
         * @param {EngineUpdateResourceTeamRequest} body 
         * @param {string} teamId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceTeam(body: EngineUpdateResourceTeamRequest, teamId: string, id: string, options?: any) {
            return ResourceTeamServiceApiFp(configuration).updateResourceTeam(body, teamId, id, options)(axios, basePath);
        },
    };
};

/**
 * ResourceTeamServiceApi - object-oriented interface
 * @export
 * @class ResourceTeamServiceApi
 * @extends {BaseAPI}
 */
export class ResourceTeamServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create ResourceTeam
     * @param {EngineCreateResourceTeamRequest} body 
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    public createResourceTeam(body: EngineCreateResourceTeamRequest, teamId: string, options?: any) {
        return ResourceTeamServiceApiFp(this.configuration).createResourceTeam(body, teamId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove ResourceTeam
     * @param {string} teamId 
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    public deleteResourceTeam(teamId: string, id: string, domainId?: string, options?: any) {
        return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeam(teamId, id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary ResourceTeam item
     * @param {string} teamId 
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    public readResourceTeam(teamId: string, id: string, domainId?: string, options?: any) {
        return ResourceTeamServiceApiFp(this.configuration).readResourceTeam(teamId, id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of ResourceTeam
     * @param {string} teamId 
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    public searchResourceTeam(teamId: string, domainId?: string, size?: number, page?: number, options?: any) {
        return ResourceTeamServiceApiFp(this.configuration).searchResourceTeam(teamId, domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update ResourceTeam
     * @param {EngineUpdateResourceTeamRequest} body 
     * @param {string} teamId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    public updateResourceTeam(body: EngineUpdateResourceTeamRequest, teamId: string, id: string, options?: any) {
        return ResourceTeamServiceApiFp(this.configuration).updateResourceTeam(body, teamId, id, options)(this.axios, this.basePath);
    }

}


/**
 * RoutingOutboundCallServiceApi - axios parameter creator
 * @export
 */
export const RoutingOutboundCallServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create RoutingOutboundCall
         * @param {EngineCreateRoutingOutboundCallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingOutboundCall(body: EngineCreateRoutingOutboundCallRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createRoutingOutboundCall.');
            }
            const localVarPath = `/routing/outbound/calls`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateRoutingOutboundCallRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove RoutingOutboundCall
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingOutboundCall(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRoutingOutboundCall.');
            }
            const localVarPath = `/routing/outbound/calls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary RoutingOutboundCall item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingOutboundCall(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readRoutingOutboundCall.');
            }
            const localVarPath = `/routing/outbound/calls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of RoutingOutboundCall
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingOutboundCall(domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/routing/outbound/calls`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update RoutingOutboundCall
         * @param {EngineUpdateRoutingOutboundCallRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingOutboundCall(body: EngineUpdateRoutingOutboundCallRequest, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateRoutingOutboundCall.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateRoutingOutboundCall.');
            }
            const localVarPath = `/routing/outbound/calls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateRoutingOutboundCallRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoutingOutboundCallServiceApi - functional programming interface
 * @export
 */
export const RoutingOutboundCallServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create RoutingOutboundCall
         * @param {EngineCreateRoutingOutboundCallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingOutboundCall(body: EngineCreateRoutingOutboundCallRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingOutboundCall> {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).createRoutingOutboundCall(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove RoutingOutboundCall
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingOutboundCall(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingOutboundCall> {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).deleteRoutingOutboundCall(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary RoutingOutboundCall item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingOutboundCall(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingOutboundCall> {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).readRoutingOutboundCall(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of RoutingOutboundCall
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingOutboundCall(domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListRoutingOutboundCall> {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).searchRoutingOutboundCall(domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update RoutingOutboundCall
         * @param {EngineUpdateRoutingOutboundCallRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingOutboundCall(body: EngineUpdateRoutingOutboundCallRequest, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingOutboundCall> {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).updateRoutingOutboundCall(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RoutingOutboundCallServiceApi - factory interface
 * @export
 */
export const RoutingOutboundCallServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create RoutingOutboundCall
         * @param {EngineCreateRoutingOutboundCallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingOutboundCall(body: EngineCreateRoutingOutboundCallRequest, options?: any) {
            return RoutingOutboundCallServiceApiFp(configuration).createRoutingOutboundCall(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove RoutingOutboundCall
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingOutboundCall(id: string, domainId?: string, options?: any) {
            return RoutingOutboundCallServiceApiFp(configuration).deleteRoutingOutboundCall(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary RoutingOutboundCall item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingOutboundCall(id: string, domainId?: string, options?: any) {
            return RoutingOutboundCallServiceApiFp(configuration).readRoutingOutboundCall(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of RoutingOutboundCall
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingOutboundCall(domainId?: string, size?: number, page?: number, options?: any) {
            return RoutingOutboundCallServiceApiFp(configuration).searchRoutingOutboundCall(domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update RoutingOutboundCall
         * @param {EngineUpdateRoutingOutboundCallRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingOutboundCall(body: EngineUpdateRoutingOutboundCallRequest, id: string, options?: any) {
            return RoutingOutboundCallServiceApiFp(configuration).updateRoutingOutboundCall(body, id, options)(axios, basePath);
        },
    };
};

/**
 * RoutingOutboundCallServiceApi - object-oriented interface
 * @export
 * @class RoutingOutboundCallServiceApi
 * @extends {BaseAPI}
 */
export class RoutingOutboundCallServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    public createRoutingOutboundCall(body: EngineCreateRoutingOutboundCallRequest, options?: any) {
        return RoutingOutboundCallServiceApiFp(this.configuration).createRoutingOutboundCall(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove RoutingOutboundCall
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    public deleteRoutingOutboundCall(id: string, domainId?: string, options?: any) {
        return RoutingOutboundCallServiceApiFp(this.configuration).deleteRoutingOutboundCall(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary RoutingOutboundCall item
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    public readRoutingOutboundCall(id: string, domainId?: string, options?: any) {
        return RoutingOutboundCallServiceApiFp(this.configuration).readRoutingOutboundCall(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of RoutingOutboundCall
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    public searchRoutingOutboundCall(domainId?: string, size?: number, page?: number, options?: any) {
        return RoutingOutboundCallServiceApiFp(this.configuration).searchRoutingOutboundCall(domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update RoutingOutboundCall
     * @param {EngineUpdateRoutingOutboundCallRequest} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    public updateRoutingOutboundCall(body: EngineUpdateRoutingOutboundCallRequest, id: string, options?: any) {
        return RoutingOutboundCallServiceApiFp(this.configuration).updateRoutingOutboundCall(body, id, options)(this.axios, this.basePath);
    }

}


/**
 * RoutingSchemeServiceApi - axios parameter creator
 * @export
 */
export const RoutingSchemeServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create RoutingScheme
         * @param {EngineCreateRoutingSchemeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingScheme(body: EngineCreateRoutingSchemeRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createRoutingScheme.');
            }
            const localVarPath = `/routing/schemes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateRoutingSchemeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove RoutingScheme
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingScheme(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRoutingScheme.');
            }
            const localVarPath = `/routing/schemes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary RoutingScheme item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingScheme(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readRoutingScheme.');
            }
            const localVarPath = `/routing/schemes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List RoutingScheme
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingScheme(domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/routing/schemes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update RoutingScheme
         * @param {EngineUpdateRoutingSchemeRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingScheme(body: EngineUpdateRoutingSchemeRequest, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateRoutingScheme.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateRoutingScheme.');
            }
            const localVarPath = `/routing/schemes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateRoutingSchemeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoutingSchemeServiceApi - functional programming interface
 * @export
 */
export const RoutingSchemeServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create RoutingScheme
         * @param {EngineCreateRoutingSchemeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingScheme(body: EngineCreateRoutingSchemeRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingScheme> {
            const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(configuration).createRoutingScheme(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove RoutingScheme
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingScheme(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingScheme> {
            const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(configuration).deleteRoutingScheme(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary RoutingScheme item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingScheme(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingScheme> {
            const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(configuration).readRoutingScheme(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List RoutingScheme
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingScheme(domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListRoutingScheme> {
            const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(configuration).searchRoutingScheme(domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update RoutingScheme
         * @param {EngineUpdateRoutingSchemeRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingScheme(body: EngineUpdateRoutingSchemeRequest, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingScheme> {
            const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(configuration).updateRoutingScheme(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RoutingSchemeServiceApi - factory interface
 * @export
 */
export const RoutingSchemeServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create RoutingScheme
         * @param {EngineCreateRoutingSchemeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingScheme(body: EngineCreateRoutingSchemeRequest, options?: any) {
            return RoutingSchemeServiceApiFp(configuration).createRoutingScheme(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove RoutingScheme
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingScheme(id: string, domainId?: string, options?: any) {
            return RoutingSchemeServiceApiFp(configuration).deleteRoutingScheme(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary RoutingScheme item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingScheme(id: string, domainId?: string, options?: any) {
            return RoutingSchemeServiceApiFp(configuration).readRoutingScheme(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List RoutingScheme
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingScheme(domainId?: string, size?: number, page?: number, options?: any) {
            return RoutingSchemeServiceApiFp(configuration).searchRoutingScheme(domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update RoutingScheme
         * @param {EngineUpdateRoutingSchemeRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingScheme(body: EngineUpdateRoutingSchemeRequest, id: string, options?: any) {
            return RoutingSchemeServiceApiFp(configuration).updateRoutingScheme(body, id, options)(axios, basePath);
        },
    };
};

/**
 * RoutingSchemeServiceApi - object-oriented interface
 * @export
 * @class RoutingSchemeServiceApi
 * @extends {BaseAPI}
 */
export class RoutingSchemeServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create RoutingScheme
     * @param {EngineCreateRoutingSchemeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemeServiceApi
     */
    public createRoutingScheme(body: EngineCreateRoutingSchemeRequest, options?: any) {
        return RoutingSchemeServiceApiFp(this.configuration).createRoutingScheme(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove RoutingScheme
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemeServiceApi
     */
    public deleteRoutingScheme(id: string, domainId?: string, options?: any) {
        return RoutingSchemeServiceApiFp(this.configuration).deleteRoutingScheme(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary RoutingScheme item
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemeServiceApi
     */
    public readRoutingScheme(id: string, domainId?: string, options?: any) {
        return RoutingSchemeServiceApiFp(this.configuration).readRoutingScheme(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List RoutingScheme
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemeServiceApi
     */
    public searchRoutingScheme(domainId?: string, size?: number, page?: number, options?: any) {
        return RoutingSchemeServiceApiFp(this.configuration).searchRoutingScheme(domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update RoutingScheme
     * @param {EngineUpdateRoutingSchemeRequest} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemeServiceApi
     */
    public updateRoutingScheme(body: EngineUpdateRoutingSchemeRequest, id: string, options?: any) {
        return RoutingSchemeServiceApiFp(this.configuration).updateRoutingScheme(body, id, options)(this.axios, this.basePath);
    }

}


/**
 * RoutingVariableServiceApi - axios parameter creator
 * @export
 */
export const RoutingVariableServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create RoutingVariable
         * @param {EngineCreateRoutingVariableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingVariable(body: EngineCreateRoutingVariableRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createRoutingVariable.');
            }
            const localVarPath = `/routing/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateRoutingVariableRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove RoutingVariable
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingVariable(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRoutingVariable.');
            }
            const localVarPath = `/routing/variables/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary RoutingVariable item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingVariable(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readRoutingVariable.');
            }
            const localVarPath = `/routing/variables/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of RoutingVariable
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingVariable(domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/routing/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update RoutingVariable
         * @param {EngineUpdateRoutingVariableRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingVariable(body: EngineUpdateRoutingVariableRequest, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateRoutingVariable.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateRoutingVariable.');
            }
            const localVarPath = `/routing/variables/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateRoutingVariableRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoutingVariableServiceApi - functional programming interface
 * @export
 */
export const RoutingVariableServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create RoutingVariable
         * @param {EngineCreateRoutingVariableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingVariable(body: EngineCreateRoutingVariableRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingVariable> {
            const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).createRoutingVariable(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove RoutingVariable
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingVariable(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingVariable> {
            const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).deleteRoutingVariable(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary RoutingVariable item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingVariable(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingVariable> {
            const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).readRoutingVariable(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of RoutingVariable
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingVariable(domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListRoutingVariable> {
            const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).searchRoutingVariable(domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update RoutingVariable
         * @param {EngineUpdateRoutingVariableRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingVariable(body: EngineUpdateRoutingVariableRequest, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineRoutingVariable> {
            const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).updateRoutingVariable(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RoutingVariableServiceApi - factory interface
 * @export
 */
export const RoutingVariableServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create RoutingVariable
         * @param {EngineCreateRoutingVariableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingVariable(body: EngineCreateRoutingVariableRequest, options?: any) {
            return RoutingVariableServiceApiFp(configuration).createRoutingVariable(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove RoutingVariable
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingVariable(id: string, domainId?: string, options?: any) {
            return RoutingVariableServiceApiFp(configuration).deleteRoutingVariable(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary RoutingVariable item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingVariable(id: string, domainId?: string, options?: any) {
            return RoutingVariableServiceApiFp(configuration).readRoutingVariable(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of RoutingVariable
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingVariable(domainId?: string, size?: number, page?: number, options?: any) {
            return RoutingVariableServiceApiFp(configuration).searchRoutingVariable(domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update RoutingVariable
         * @param {EngineUpdateRoutingVariableRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingVariable(body: EngineUpdateRoutingVariableRequest, id: string, options?: any) {
            return RoutingVariableServiceApiFp(configuration).updateRoutingVariable(body, id, options)(axios, basePath);
        },
    };
};

/**
 * RoutingVariableServiceApi - object-oriented interface
 * @export
 * @class RoutingVariableServiceApi
 * @extends {BaseAPI}
 */
export class RoutingVariableServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingVariableServiceApi
     */
    public createRoutingVariable(body: EngineCreateRoutingVariableRequest, options?: any) {
        return RoutingVariableServiceApiFp(this.configuration).createRoutingVariable(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove RoutingVariable
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingVariableServiceApi
     */
    public deleteRoutingVariable(id: string, domainId?: string, options?: any) {
        return RoutingVariableServiceApiFp(this.configuration).deleteRoutingVariable(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary RoutingVariable item
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingVariableServiceApi
     */
    public readRoutingVariable(id: string, domainId?: string, options?: any) {
        return RoutingVariableServiceApiFp(this.configuration).readRoutingVariable(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of RoutingVariable
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingVariableServiceApi
     */
    public searchRoutingVariable(domainId?: string, size?: number, page?: number, options?: any) {
        return RoutingVariableServiceApiFp(this.configuration).searchRoutingVariable(domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update RoutingVariable
     * @param {EngineUpdateRoutingVariableRequest} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingVariableServiceApi
     */
    public updateRoutingVariable(body: EngineUpdateRoutingVariableRequest, id: string, options?: any) {
        return RoutingVariableServiceApiFp(this.configuration).updateRoutingVariable(body, id, options)(this.axios, this.basePath);
    }

}


/**
 * SkillServiceApi - axios parameter creator
 * @export
 */
export const SkillServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Skill
         * @param {EngineCreateSkillRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSkill(body: EngineCreateSkillRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSkill.');
            }
            const localVarPath = `/call_center/skills`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateSkillRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Skill
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSkill(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSkill.');
            }
            const localVarPath = `/call_center/skills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Skill item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSkill(id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readSkill.');
            }
            const localVarPath = `/call_center/skills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of Skill
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSkill(domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/call_center/skills`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Skill
         * @param {EngineUpdateSkillRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSkill(body: EngineUpdateSkillRequest, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSkill.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSkill.');
            }
            const localVarPath = `/call_center/skills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateSkillRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SkillServiceApi - functional programming interface
 * @export
 */
export const SkillServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Skill
         * @param {EngineCreateSkillRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSkill(body: EngineCreateSkillRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
            const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).createSkill(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove Skill
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSkill(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
            const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).deleteSkill(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Skill item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSkill(id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
            const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).readSkill(id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of Skill
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSkill(domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListSkill> {
            const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).searchSkill(domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Skill
         * @param {EngineUpdateSkillRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSkill(body: EngineUpdateSkillRequest, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
            const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).updateSkill(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SkillServiceApi - factory interface
 * @export
 */
export const SkillServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create Skill
         * @param {EngineCreateSkillRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSkill(body: EngineCreateSkillRequest, options?: any) {
            return SkillServiceApiFp(configuration).createSkill(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove Skill
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSkill(id: string, domainId?: string, options?: any) {
            return SkillServiceApiFp(configuration).deleteSkill(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Skill item
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSkill(id: string, domainId?: string, options?: any) {
            return SkillServiceApiFp(configuration).readSkill(id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of Skill
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSkill(domainId?: string, size?: number, page?: number, options?: any) {
            return SkillServiceApiFp(configuration).searchSkill(domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update Skill
         * @param {EngineUpdateSkillRequest} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSkill(body: EngineUpdateSkillRequest, id: string, options?: any) {
            return SkillServiceApiFp(configuration).updateSkill(body, id, options)(axios, basePath);
        },
    };
};

/**
 * SkillServiceApi - object-oriented interface
 * @export
 * @class SkillServiceApi
 * @extends {BaseAPI}
 */
export class SkillServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillServiceApi
     */
    public createSkill(body: EngineCreateSkillRequest, options?: any) {
        return SkillServiceApiFp(this.configuration).createSkill(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove Skill
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillServiceApi
     */
    public deleteSkill(id: string, domainId?: string, options?: any) {
        return SkillServiceApiFp(this.configuration).deleteSkill(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Skill item
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillServiceApi
     */
    public readSkill(id: string, domainId?: string, options?: any) {
        return SkillServiceApiFp(this.configuration).readSkill(id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of Skill
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillServiceApi
     */
    public searchSkill(domainId?: string, size?: number, page?: number, options?: any) {
        return SkillServiceApiFp(this.configuration).searchSkill(domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update Skill
     * @param {EngineUpdateSkillRequest} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillServiceApi
     */
    public updateSkill(body: EngineUpdateSkillRequest, id: string, options?: any) {
        return SkillServiceApiFp(this.configuration).updateSkill(body, id, options)(this.axios, this.basePath);
    }

}


/**
 * SupervisorInTeamServiceApi - axios parameter creator
 * @export
 */
export const SupervisorInTeamServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create SupervisorInTeam
         * @param {EngineCreateSupervisorInTeamRequest} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupervisorInTeam(body: EngineCreateSupervisorInTeamRequest, teamId: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSupervisorInTeam.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling createSupervisorInTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/supervisors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineCreateSupervisorInTeamRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove SupervisorInTeam
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSupervisorInTeam(teamId: string, id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling deleteSupervisorInTeam.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSupervisorInTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SupervisorInTeam item
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSupervisorInTeam(teamId: string, id: string, domainId?: string, options: any = {}): RequestArgs {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling readSupervisorInTeam.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readSupervisorInTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of SupervisorInTeam
         * @param {string} teamId 
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSupervisorInTeam(teamId: string, domainId?: string, size?: number, page?: number, options: any = {}): RequestArgs {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling searchSupervisorInTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/supervisors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update SupervisorInTeam
         * @param {EngineUpdateSupervisorInTeamRequest} body 
         * @param {string} teamId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupervisorInTeam(body: EngineUpdateSupervisorInTeamRequest, teamId: string, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSupervisorInTeam.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling updateSupervisorInTeam.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSupervisorInTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Webitel-Access")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"EngineUpdateSupervisorInTeamRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SupervisorInTeamServiceApi - functional programming interface
 * @export
 */
export const SupervisorInTeamServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create SupervisorInTeam
         * @param {EngineCreateSupervisorInTeamRequest} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupervisorInTeam(body: EngineCreateSupervisorInTeamRequest, teamId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSupervisorInTeam> {
            const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).createSupervisorInTeam(body, teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove SupervisorInTeam
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSupervisorInTeam(teamId: string, id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSupervisorInTeam> {
            const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).deleteSupervisorInTeam(teamId, id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary SupervisorInTeam item
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSupervisorInTeam(teamId: string, id: string, domainId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSupervisorInTeam> {
            const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).readSupervisorInTeam(teamId, id, domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of SupervisorInTeam
         * @param {string} teamId 
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSupervisorInTeam(teamId: string, domainId?: string, size?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineListSupervisorInTeam> {
            const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).searchSupervisorInTeam(teamId, domainId, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update SupervisorInTeam
         * @param {EngineUpdateSupervisorInTeamRequest} body 
         * @param {string} teamId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupervisorInTeam(body: EngineUpdateSupervisorInTeamRequest, teamId: string, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSupervisorInTeam> {
            const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).updateSupervisorInTeam(body, teamId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SupervisorInTeamServiceApi - factory interface
 * @export
 */
export const SupervisorInTeamServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create SupervisorInTeam
         * @param {EngineCreateSupervisorInTeamRequest} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupervisorInTeam(body: EngineCreateSupervisorInTeamRequest, teamId: string, options?: any) {
            return SupervisorInTeamServiceApiFp(configuration).createSupervisorInTeam(body, teamId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove SupervisorInTeam
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSupervisorInTeam(teamId: string, id: string, domainId?: string, options?: any) {
            return SupervisorInTeamServiceApiFp(configuration).deleteSupervisorInTeam(teamId, id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary SupervisorInTeam item
         * @param {string} teamId 
         * @param {string} id 
         * @param {string} [domainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSupervisorInTeam(teamId: string, id: string, domainId?: string, options?: any) {
            return SupervisorInTeamServiceApiFp(configuration).readSupervisorInTeam(teamId, id, domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary List of SupervisorInTeam
         * @param {string} teamId 
         * @param {string} [domainId] 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSupervisorInTeam(teamId: string, domainId?: string, size?: number, page?: number, options?: any) {
            return SupervisorInTeamServiceApiFp(configuration).searchSupervisorInTeam(teamId, domainId, size, page, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update SupervisorInTeam
         * @param {EngineUpdateSupervisorInTeamRequest} body 
         * @param {string} teamId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupervisorInTeam(body: EngineUpdateSupervisorInTeamRequest, teamId: string, id: string, options?: any) {
            return SupervisorInTeamServiceApiFp(configuration).updateSupervisorInTeam(body, teamId, id, options)(axios, basePath);
        },
    };
};

/**
 * SupervisorInTeamServiceApi - object-oriented interface
 * @export
 * @class SupervisorInTeamServiceApi
 * @extends {BaseAPI}
 */
export class SupervisorInTeamServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create SupervisorInTeam
     * @param {EngineCreateSupervisorInTeamRequest} body 
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorInTeamServiceApi
     */
    public createSupervisorInTeam(body: EngineCreateSupervisorInTeamRequest, teamId: string, options?: any) {
        return SupervisorInTeamServiceApiFp(this.configuration).createSupervisorInTeam(body, teamId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove SupervisorInTeam
     * @param {string} teamId 
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorInTeamServiceApi
     */
    public deleteSupervisorInTeam(teamId: string, id: string, domainId?: string, options?: any) {
        return SupervisorInTeamServiceApiFp(this.configuration).deleteSupervisorInTeam(teamId, id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary SupervisorInTeam item
     * @param {string} teamId 
     * @param {string} id 
     * @param {string} [domainId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorInTeamServiceApi
     */
    public readSupervisorInTeam(teamId: string, id: string, domainId?: string, options?: any) {
        return SupervisorInTeamServiceApiFp(this.configuration).readSupervisorInTeam(teamId, id, domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List of SupervisorInTeam
     * @param {string} teamId 
     * @param {string} [domainId] 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorInTeamServiceApi
     */
    public searchSupervisorInTeam(teamId: string, domainId?: string, size?: number, page?: number, options?: any) {
        return SupervisorInTeamServiceApiFp(this.configuration).searchSupervisorInTeam(teamId, domainId, size, page, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update SupervisorInTeam
     * @param {EngineUpdateSupervisorInTeamRequest} body 
     * @param {string} teamId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorInTeamServiceApi
     */
    public updateSupervisorInTeam(body: EngineUpdateSupervisorInTeamRequest, teamId: string, id: string, options?: any) {
        return SupervisorInTeamServiceApiFp(this.configuration).updateSupervisorInTeam(body, teamId, id, options)(this.axios, this.basePath);
    }

}


