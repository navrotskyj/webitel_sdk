// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019.0.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface AgentInQueueStatisticsAgentInQueueStatisticsItem
 */
export interface AgentInQueueStatisticsAgentInQueueStatisticsItem {
  /**
   *
   * @type {EngineLookup}
   * @memberof AgentInQueueStatisticsAgentInQueueStatisticsItem
   */
  bucket?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof AgentInQueueStatisticsAgentInQueueStatisticsItem
   */
  member_waiting?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof AgentInQueueStatisticsAgentInQueueStatisticsItem
   */
  skill?: EngineLookup
}
/**
 *
 * @export
 * @interface CreateCallRequestCallSettings
 */
export interface CreateCallRequestCallSettings {
  /**
   *
   * @type {boolean}
   * @memberof CreateCallRequestCallSettings
   */
  audio?: boolean
  /**
   *
   * @type {boolean}
   * @memberof CreateCallRequestCallSettings
   */
  record?: boolean
  /**
   *
   * @type {boolean}
   * @memberof CreateCallRequestCallSettings
   */
  screen?: boolean
  /**
   *
   * @type {number}
   * @memberof CreateCallRequestCallSettings
   */
  timeout?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof CreateCallRequestCallSettings
   */
  variables?: { [key: string]: string }
  /**
   *
   * @type {boolean}
   * @memberof CreateCallRequestCallSettings
   */
  video?: boolean
}
/**
 *
 * @export
 * @interface CreateCallRequestEndpointRequest
 */
export interface CreateCallRequestEndpointRequest {
  /**
   *
   * @type {string}
   * @memberof CreateCallRequestEndpointRequest
   */
  app_id?: string
  /**
   *
   * @type {string}
   * @memberof CreateCallRequestEndpointRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof CreateCallRequestEndpointRequest
   */
  type?: string
}
/**
 *
 * @export
 * @interface EngineAcceptOfDay
 */
export interface EngineAcceptOfDay {
  /**
   *
   * @type {number}
   * @memberof EngineAcceptOfDay
   */
  day?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineAcceptOfDay
   */
  disabled?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineAcceptOfDay
   */
  end_time_of_day?: number
  /**
   *
   * @type {number}
   * @memberof EngineAcceptOfDay
   */
  start_time_of_day?: number
}
/**
 *
 * @export
 * @interface EngineActiveCall
 */
export interface EngineActiveCall {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineActiveCall
   */
  agent?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  answered_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  app_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineActiveCall
   */
  bill_sec?: number
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  bridged_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  created_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  destination?: string
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  direction?: string
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  display?: string
  /**
   *
   * @type {number}
   * @memberof EngineActiveCall
   */
  duration?: number
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  extension?: string
  /**
   *
   * @type {EngineEndpoint}
   * @memberof EngineActiveCall
   */
  from?: EngineEndpoint
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineActiveCall
   */
  gateway?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineActiveCall
   */
  hold_sec?: number
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  joined_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  leaving_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineActiveCall
   */
  member?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  parent_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineActiveCall
   */
  queue?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  queue_bridged_at?: string
  /**
   *
   * @type {number}
   * @memberof EngineActiveCall
   */
  queue_duration_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineActiveCall
   */
  queue_wait_sec?: number
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  reporting_at?: string
  /**
   *
   * @type {number}
   * @memberof EngineActiveCall
   */
  reporting_sec?: number
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  state?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineActiveCall
   */
  team?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  timestamp?: string
  /**
   *
   * @type {EngineEndpoint}
   * @memberof EngineActiveCall
   */
  to?: EngineEndpoint
  /**
   *
   * @type {string}
   * @memberof EngineActiveCall
   */
  type?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineActiveCall
   */
  user?: EngineLookup
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineActiveCall
   */
  variables?: { [key: string]: string }
  /**
   *
   * @type {number}
   * @memberof EngineActiveCall
   */
  wait_sec?: number
}
/**
 *
 * @export
 * @interface EngineAgent
 */
export interface EngineAgent {
  /**
   *
   * @type {Array<EngineAgentChannel>}
   * @memberof EngineAgent
   */
  channels?: Array<EngineAgentChannel>
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  last_status_change?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineAgent
   */
  progressive_count?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  status_duration?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgent
   */
  user?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineAgentCallStatistics
 */
export interface EngineAgentCallStatistics {
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  abandoned?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  avg_hold_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  avg_talk_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  count?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  handles?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  max_hold_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  max_talk_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  min_hold_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  min_talk_sec?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgentCallStatistics
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  sum_hold_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentCallStatistics
   */
  sum_talk_sec?: number
}
/**
 *
 * @export
 * @interface EngineAgentCallStatisticsList
 */
export interface EngineAgentCallStatisticsList {
  /**
   *
   * @type {Array<EngineAgentCallStatistics>}
   * @memberof EngineAgentCallStatisticsList
   */
  items?: Array<EngineAgentCallStatistics>
  /**
   *
   * @type {boolean}
   * @memberof EngineAgentCallStatisticsList
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineAgentChannel
 */
export interface EngineAgentChannel {
  /**
   *
   * @type {string}
   * @memberof EngineAgentChannel
   */
  channel?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentChannel
   */
  joined_at?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineAgentChannel
   */
  online?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineAgentChannel
   */
  state?: string
}
/**
 *
 * @export
 * @interface EngineAgentInQueue
 */
export interface EngineAgentInQueue {
  /**
   *
   * @type {number}
   * @memberof EngineAgentInQueue
   */
  active_member?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentInQueue
   */
  count_member?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineAgentInQueue
   */
  enabled?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineAgentInQueue
   */
  priority?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentInQueue
   */
  queue?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAgentInQueue
   */
  strategy?: string
  /**
   *
   * @type {number}
   * @memberof EngineAgentInQueue
   */
  type?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentInQueue
   */
  waiting_member?: number
}
/**
 *
 * @export
 * @interface EngineAgentInQueueStatistics
 */
export interface EngineAgentInQueueStatistics {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentInQueueStatistics
   */
  queue?: EngineLookup
  /**
   *
   * @type {Array<AgentInQueueStatisticsAgentInQueueStatisticsItem>}
   * @memberof EngineAgentInQueueStatistics
   */
  statistics?: Array<AgentInQueueStatisticsAgentInQueueStatisticsItem>
}
/**
 *
 * @export
 * @interface EngineAgentInQueueStatisticsList
 */
export interface EngineAgentInQueueStatisticsList {
  /**
   *
   * @type {Array<EngineAgentInQueueStatistics>}
   * @memberof EngineAgentInQueueStatisticsList
   */
  items?: Array<EngineAgentInQueueStatistics>
}
/**
 *
 * @export
 * @interface EngineAgentInTeam
 */
export interface EngineAgentInTeam {
  /**
   *
   * @type {string}
   * @memberof EngineAgentInTeam
   */
  strategy?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentInTeam
   */
  team?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineAgentSkill
 */
export interface EngineAgentSkill {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentSkill
   */
  agent?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineAgentSkill
   */
  capacity?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgentSkill
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentSkill
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAgentSkill
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentSkill
   */
  id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentSkill
   */
  skill?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAgentSkill
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentSkill
   */
  updated_by?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineAgentSkillItem
 */
export interface EngineAgentSkillItem {
  /**
   *
   * @type {number}
   * @memberof EngineAgentSkillItem
   */
  capacity?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgentSkillItem
   */
  id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentSkillItem
   */
  skill?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineAgentState
 */
export interface EngineAgentState {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentState
   */
  agent?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAgentState
   */
  channel?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentState
   */
  duration?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentState
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentState
   */
  joined_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentState
   */
  payload?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentState
   */
  queue?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAgentState
   */
  state?: string
}
/**
 *
 * @export
 * @interface EngineAgentStatsStatistic
 */
export interface EngineAgentStatsStatistic {
  /**
   *
   * @type {number}
   * @memberof EngineAgentStatsStatistic
   */
  agent_id?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatsStatistic
   */
  call_time?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatsStatistic
   */
  extension?: string
  /**
   *
   * @type {number}
   * @memberof EngineAgentStatsStatistic
   */
  handles?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatsStatistic
   */
  max_bridged_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatsStatistic
   */
  max_offering_at?: string
  /**
   *
   * @type {number}
   * @memberof EngineAgentStatsStatistic
   */
  missed?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatsStatistic
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatsStatistic
   */
  offline?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatsStatistic
   */
  online?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatsStatistic
   */
  pause?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatsStatistic
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatsStatistic
   */
  status_duration?: string
  /**
   *
   * @type {Array<EngineLookup>}
   * @memberof EngineAgentStatsStatistic
   */
  teams?: Array<EngineLookup>
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentStatsStatistic
   */
  user?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineAgentStatsStatistic
   */
  utilization?: number
}
/**
 *
 * @export
 * @interface EngineAgentStatusRequest
 */
export interface EngineAgentStatusRequest {
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatusRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatusRequest
   */
  id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineAgentStatusRequest
   */
  on_demand?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatusRequest
   */
  status?: string
}
/**
 *
 * @export
 * @interface EngineAgentTeam
 */
export interface EngineAgentTeam {
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  busy_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  call_timeout?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  max_no_answer?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  no_answer_delay_time?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineAgentTeam
   */
  post_processing?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  post_processing_timeout?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  reject_delay_time?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  strategy?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  updated_at?: string
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  wrap_up_time?: number
}
/**
 *
 * @export
 * @interface EngineAgentUser
 */
export interface EngineAgentUser {
  /**
   *
   * @type {string}
   * @memberof EngineAgentUser
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentUser
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineAttempt
 */
export interface EngineAttempt {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttempt
   */
  agent?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  agent_call_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  bridged_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttempt
   */
  bucket?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  channel?: string
  /**
   *
   * @type {EngineMemberCommunication}
   * @memberof EngineAttempt
   */
  destination?: EngineMemberCommunication
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  display?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  joined_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  last_state_change?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  leaving_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttempt
   */
  list?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttempt
   */
  member?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  member_call_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  offering_at?: string
  /**
   *
   * @type {number}
   * @memberof EngineAttempt
   */
  position?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttempt
   */
  queue?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  reporting_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttempt
   */
  resource?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  result?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  state?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttempt
   */
  timeout?: string
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineAttempt
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineAttemptHistory
 */
export interface EngineAttemptHistory {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttemptHistory
   */
  agent?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  agent_call_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  bridged_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttemptHistory
   */
  bucket?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  channel?: string
  /**
   *
   * @type {EngineMemberCommunication}
   * @memberof EngineAttemptHistory
   */
  destination?: EngineMemberCommunication
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  display?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  joined_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  leaving_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttemptHistory
   */
  list?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttemptHistory
   */
  member?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  member_call_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  offering_at?: string
  /**
   *
   * @type {number}
   * @memberof EngineAttemptHistory
   */
  position?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttemptHistory
   */
  queue?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  reporting_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAttemptHistory
   */
  resource?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAttemptHistory
   */
  result?: string
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineAttemptHistory
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineAttemptResultRequest
 */
export interface EngineAttemptResultRequest {
  /**
   *
   * @type {number}
   * @memberof EngineAttemptResultRequest
   */
  attempt_id?: number
  /**
   *
   * @type {string}
   * @memberof EngineAttemptResultRequest
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineAttemptResultRequest
   */
  display?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineAttemptResultRequest
   */
  expire_at?: string
  /**
   *
   * @type {number}
   * @memberof EngineAttemptResultRequest
   */
  member_id?: number
  /**
   *
   * @type {string}
   * @memberof EngineAttemptResultRequest
   */
  min_offering_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttemptResultRequest
   */
  next_member_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineAttemptResultRequest
   */
  queue_id?: number
  /**
   *
   * @type {string}
   * @memberof EngineAttemptResultRequest
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof EngineAttemptResultRequest
   */
  transfer_queue_id?: string
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineAttemptResultRequest
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineAttemptResultResponse
 */
export interface EngineAttemptResultResponse {
  /**
   *
   * @type {string}
   * @memberof EngineAttemptResultResponse
   */
  status?: string
}
/**
 *
 * @export
 * @interface EngineBlindTransferCallRequest
 */
export interface EngineBlindTransferCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineBlindTransferCallRequest
   */
  app_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineBlindTransferCallRequest
   */
  destination?: string
  /**
   *
   * @type {string}
   * @memberof EngineBlindTransferCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineBlindTransferCallRequest
   */
  id?: string
}
/**
 *
 * @export
 * @interface EngineBucket
 */
export interface EngineBucket {
  /**
   *
   * @type {string}
   * @memberof EngineBucket
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineBucket
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineBucket
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineCalendar
 */
export interface EngineCalendar {
  /**
   *
   * @type {Array<EngineAcceptOfDay>}
   * @memberof EngineCalendar
   */
  accepts?: Array<EngineAcceptOfDay>
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCalendar
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  end_at?: string
  /**
   *
   * @type {Array<EngineExceptDate>}
   * @memberof EngineCalendar
   */
  excepts?: Array<EngineExceptDate>
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  start_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCalendar
   */
  timezone?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCalendar
   */
  updated_by?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineCallFile
 */
export interface EngineCallFile {
  /**
   *
   * @type {string}
   * @memberof EngineCallFile
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCallFile
   */
  mime_type?: string
  /**
   *
   * @type {string}
   * @memberof EngineCallFile
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCallFile
   */
  size?: string
}
/**
 *
 * @export
 * @interface EngineCommunicationType
 */
export interface EngineCommunicationType {
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationType
   */
  code?: string
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationType
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationType
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationType
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationType
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationType
   */
  type?: string
}
/**
 *
 * @export
 * @interface EngineCommunicationTypeRequest
 */
export interface EngineCommunicationTypeRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationTypeRequest
   */
  code?: string
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationTypeRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationTypeRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationTypeRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCommunicationTypeRequest
   */
  type?: string
}
/**
 *
 * @export
 * @interface EngineCreateAgentRequest
 */
export interface EngineCreateAgentRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentRequest
   */
  progressive_count?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateAgentRequest
   */
  user?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineCreateAgentSkillRequest
 */
export interface EngineCreateAgentSkillRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentSkillRequest
   */
  agent_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentSkillRequest
   */
  capacity?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateAgentSkillRequest
   */
  skill?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineCreateAgentTeamRequest
 */
export interface EngineCreateAgentTeamRequest {
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  busy_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  call_timeout?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentTeamRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentTeamRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  max_no_answer?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentTeamRequest
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  no_answer_delay_time?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateAgentTeamRequest
   */
  post_processing?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  post_processing_timeout?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  reject_delay_time?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentTeamRequest
   */
  strategy?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  wrap_up_time?: number
}
/**
 *
 * @export
 * @interface EngineCreateAttemptRequest
 */
export interface EngineCreateAttemptRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateAttemptRequest
   */
  agent_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateAttemptRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateAttemptRequest
   */
  member_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateAttemptRequest
   */
  queue_id?: string
}
/**
 *
 * @export
 * @interface EngineCreateAttemptResponse
 */
export interface EngineCreateAttemptResponse {
  /**
   *
   * @type {string}
   * @memberof EngineCreateAttemptResponse
   */
  attempt_id?: string
}
/**
 *
 * @export
 * @interface EngineCreateBucketRequest
 */
export interface EngineCreateBucketRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateBucketRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateBucketRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateBucketRequest
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineCreateCalendarRequest
 */
export interface EngineCreateCalendarRequest {
  /**
   *
   * @type {Array<EngineAcceptOfDay>}
   * @memberof EngineCreateCalendarRequest
   */
  accepts?: Array<EngineAcceptOfDay>
  /**
   *
   * @type {string}
   * @memberof EngineCreateCalendarRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateCalendarRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateCalendarRequest
   */
  end_at?: string
  /**
   *
   * @type {Array<EngineExceptDate>}
   * @memberof EngineCreateCalendarRequest
   */
  excepts?: Array<EngineExceptDate>
  /**
   *
   * @type {string}
   * @memberof EngineCreateCalendarRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateCalendarRequest
   */
  start_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateCalendarRequest
   */
  timezone?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineCreateCallRequest
 */
export interface EngineCreateCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateCallRequest
   */
  destination?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {CreateCallRequestEndpointRequest}
   * @memberof EngineCreateCallRequest
   */
  from?: CreateCallRequestEndpointRequest
  /**
   *
   * @type {CreateCallRequestCallSettings}
   * @memberof EngineCreateCallRequest
   */
  params?: CreateCallRequestCallSettings
  /**
   *
   * @type {CreateCallRequestEndpointRequest}
   * @memberof EngineCreateCallRequest
   */
  to?: CreateCallRequestEndpointRequest
}
/**
 *
 * @export
 * @interface EngineCreateCallResponse
 */
export interface EngineCreateCallResponse {
  /**
   *
   * @type {string}
   * @memberof EngineCreateCallResponse
   */
  id?: string
}
/**
 *
 * @export
 * @interface EngineCreateEmailProfileRequest
 */
export interface EngineCreateEmailProfileRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateEmailProfileRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateEmailProfileRequest
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateEmailProfileRequest
   */
  enabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineCreateEmailProfileRequest
   */
  host?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateEmailProfileRequest
   */
  imap_port?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateEmailProfileRequest
   */
  login?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateEmailProfileRequest
   */
  mailbox?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateEmailProfileRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateEmailProfileRequest
   */
  password?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateEmailProfileRequest
   */
  schema?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineCreateEmailProfileRequest
   */
  smtp_port?: number
}
/**
 *
 * @export
 * @interface EngineCreateListCommunicationRequest
 */
export interface EngineCreateListCommunicationRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateListCommunicationRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateListCommunicationRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateListCommunicationRequest
   */
  list_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateListCommunicationRequest
   */
  number?: string
}
/**
 *
 * @export
 * @interface EngineCreateListRequest
 */
export interface EngineCreateListRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateListRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateListRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateListRequest
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineCreateMemberBulkItem
 */
export interface EngineCreateMemberBulkItem {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateMemberBulkItem
   */
  bucket?: EngineLookup
  /**
   *
   * @type {Array<EngineMemberCommunicationCreateRequest>}
   * @memberof EngineCreateMemberBulkItem
   */
  communications?: Array<EngineMemberCommunicationCreateRequest>
  /**
   *
   * @type {string}
   * @memberof EngineCreateMemberBulkItem
   */
  expire_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateMemberBulkItem
   */
  min_offering_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateMemberBulkItem
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateMemberBulkItem
   */
  priority?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateMemberBulkItem
   */
  skill?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateMemberBulkItem
   */
  timezone?: EngineLookup
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineCreateMemberBulkItem
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineCreateMemberBulkRequest
 */
export interface EngineCreateMemberBulkRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateMemberBulkRequest
   */
  domain_id?: string
  /**
   *
   * @type {Array<EngineCreateMemberBulkItem>}
   * @memberof EngineCreateMemberBulkRequest
   */
  items?: Array<EngineCreateMemberBulkItem>
  /**
   *
   * @type {string}
   * @memberof EngineCreateMemberBulkRequest
   */
  queue_id?: string
}
/**
 *
 * @export
 * @interface EngineCreateMemberRequest
 */
export interface EngineCreateMemberRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateMemberRequest
   */
  bucket?: EngineLookup
  /**
   *
   * @type {Array<EngineMemberCommunicationCreateRequest>}
   * @memberof EngineCreateMemberRequest
   */
  communications?: Array<EngineMemberCommunicationCreateRequest>
  /**
   *
   * @type {string}
   * @memberof EngineCreateMemberRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateMemberRequest
   */
  expire_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateMemberRequest
   */
  min_offering_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateMemberRequest
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateMemberRequest
   */
  priority?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateMemberRequest
   */
  queue_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateMemberRequest
   */
  skill?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateMemberRequest
   */
  timezone?: EngineLookup
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineCreateMemberRequest
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineCreateOutboundResourceDisplayRequest
 */
export interface EngineCreateOutboundResourceDisplayRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceDisplayRequest
   */
  display?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceDisplayRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceDisplayRequest
   */
  resource_id?: string
}
/**
 *
 * @export
 * @interface EngineCreateOutboundResourceGroupRequest
 */
export interface EngineCreateOutboundResourceGroupRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateOutboundResourceGroupRequest
   */
  communication?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceGroupRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceGroupRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceGroupRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceGroupRequest
   */
  strategy?: string
  /**
   *
   * @type {Array<EngineOutboundResourceTimeRange>}
   * @memberof EngineCreateOutboundResourceGroupRequest
   */
  time?: Array<EngineOutboundResourceTimeRange>
}
/**
 *
 * @export
 * @interface EngineCreateOutboundResourceInGroupRequest
 */
export interface EngineCreateOutboundResourceInGroupRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceInGroupRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceInGroupRequest
   */
  group_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateOutboundResourceInGroupRequest
   */
  resource?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineCreateOutboundResourceRequest
 */
export interface EngineCreateOutboundResourceRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceRequest
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateOutboundResourceRequest
   */
  enabled?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof EngineCreateOutboundResourceRequest
   */
  error_ids?: Array<string>
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateOutboundResourceRequest
   */
  gateway?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineCreateOutboundResourceRequest
   */
  limit?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateOutboundResourceRequest
   */
  max_successively_errors?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceRequest
   */
  number?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateOutboundResourceRequest
   */
  reserve?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineCreateOutboundResourceRequest
   */
  rps?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineCreateOutboundResourceRequest
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineCreateQueueBucketRequest
 */
export interface EngineCreateQueueBucketRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateQueueBucketRequest
   */
  bucket?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueBucketRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueBucketRequest
   */
  queue_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueBucketRequest
   */
  ratio?: number
}
/**
 *
 * @export
 * @interface EngineCreateQueueRequest
 */
export interface EngineCreateQueueRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateQueueRequest
   */
  calendar?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRequest
   */
  description?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateQueueRequest
   */
  dnc_list?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRequest
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateQueueRequest
   */
  enabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRequest
   */
  name?: string
  /**
   *
   * @type {object}
   * @memberof EngineCreateQueueRequest
   */
  payload?: object
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  priority?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateQueueRequest
   */
  ringtone?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateQueueRequest
   */
  schema?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  sec_locate_agent?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRequest
   */
  strategy?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateQueueRequest
   */
  team?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  timeout?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  type?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineCreateQueueRequest
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineCreateQueueResourceGroupRequest
 */
export interface EngineCreateQueueResourceGroupRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueResourceGroupRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueResourceGroupRequest
   */
  queue_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateQueueResourceGroupRequest
   */
  resource_group?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineCreateQueueRoutingRequest
 */
export interface EngineCreateQueueRoutingRequest {
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateQueueRoutingRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRoutingRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRoutingRequest
   */
  pattern?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRoutingRequest
   */
  priority?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRoutingRequest
   */
  queue_id?: string
}
/**
 *
 * @export
 * @interface EngineCreateResourceTeamAgentRequest
 */
export interface EngineCreateResourceTeamAgentRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateResourceTeamAgentRequest
   */
  agent?: EngineLookup
  /**
   *
   * @type {Array<EngineLookup>}
   * @memberof EngineCreateResourceTeamAgentRequest
   */
  buckets?: Array<EngineLookup>
  /**
   *
   * @type {string}
   * @memberof EngineCreateResourceTeamAgentRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateResourceTeamAgentRequest
   */
  lvl?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateResourceTeamAgentRequest
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EngineCreateResourceTeamSkillRequest
 */
export interface EngineCreateResourceTeamSkillRequest {
  /**
   *
   * @type {Array<EngineLookup>}
   * @memberof EngineCreateResourceTeamSkillRequest
   */
  buckets?: Array<EngineLookup>
  /**
   *
   * @type {string}
   * @memberof EngineCreateResourceTeamSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateResourceTeamSkillRequest
   */
  lvl?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateResourceTeamSkillRequest
   */
  max_capacity?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateResourceTeamSkillRequest
   */
  min_capacity?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateResourceTeamSkillRequest
   */
  skill?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCreateResourceTeamSkillRequest
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EngineCreateRoutingOutboundCallRequest
 */
export interface EngineCreateRoutingOutboundCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  pattern?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  schema?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineCreateRoutingSchemaRequest
 */
export interface EngineCreateRoutingSchemaRequest {
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateRoutingSchemaRequest
   */
  debug?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingSchemaRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingSchemaRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingSchemaRequest
   */
  name?: string
  /**
   *
   * @type {object}
   * @memberof EngineCreateRoutingSchemaRequest
   */
  payload?: object
  /**
   *
   * @type {object}
   * @memberof EngineCreateRoutingSchemaRequest
   */
  schema?: object
  /**
   *
   * @type {number}
   * @memberof EngineCreateRoutingSchemaRequest
   */
  type?: number
}
/**
 *
 * @export
 * @interface EngineCreateRoutingVariableRequest
 */
export interface EngineCreateRoutingVariableRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingVariableRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingVariableRequest
   */
  key?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingVariableRequest
   */
  value?: string
}
/**
 *
 * @export
 * @interface EngineCreateSkillRequest
 */
export interface EngineCreateSkillRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateSkillRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateSkillRequest
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineCreateSupervisorInTeamRequest
 */
export interface EngineCreateSupervisorInTeamRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateSupervisorInTeamRequest
   */
  agent?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCreateSupervisorInTeamRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateSupervisorInTeamRequest
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EngineDeleteMembersRequest
 */
export interface EngineDeleteMembersRequest {
  /**
   *
   * @type {string}
   * @memberof EngineDeleteMembersRequest
   */
  domain_id?: string
  /**
   *
   * @type {Array<string>}
   * @memberof EngineDeleteMembersRequest
   */
  ids?: Array<string>
  /**
   *
   * @type {string}
   * @memberof EngineDeleteMembersRequest
   */
  queue_id?: string
}
/**
 *
 * @export
 * @interface EngineDtmfCallRequest
 */
export interface EngineDtmfCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineDtmfCallRequest
   */
  app_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineDtmfCallRequest
   */
  digit?: string
  /**
   *
   * @type {string}
   * @memberof EngineDtmfCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineDtmfCallRequest
   */
  id?: string
}
/**
 *
 * @export
 * @interface EngineEavesdropCallRequest
 */
export interface EngineEavesdropCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineEavesdropCallRequest
   */
  app_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineEavesdropCallRequest
   */
  control?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineEavesdropCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineEavesdropCallRequest
   */
  id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineEavesdropCallRequest
   */
  listen_a?: boolean
  /**
   *
   * @type {boolean}
   * @memberof EngineEavesdropCallRequest
   */
  listen_b?: boolean
  /**
   *
   * @type {boolean}
   * @memberof EngineEavesdropCallRequest
   */
  whisper_a?: boolean
  /**
   *
   * @type {boolean}
   * @memberof EngineEavesdropCallRequest
   */
  whisper_b?: boolean
}
/**
 *
 * @export
 * @interface EngineEmailProfile
 */
export interface EngineEmailProfile {
  /**
   *
   * @type {string}
   * @memberof EngineEmailProfile
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineEmailProfile
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineEmailProfile
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineEmailProfile
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineEmailProfile
   */
  enabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineEmailProfile
   */
  host?: string
  /**
   *
   * @type {string}
   * @memberof EngineEmailProfile
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineEmailProfile
   */
  imap_port?: number
  /**
   *
   * @type {string}
   * @memberof EngineEmailProfile
   */
  login?: string
  /**
   *
   * @type {string}
   * @memberof EngineEmailProfile
   */
  mailbox?: string
  /**
   *
   * @type {string}
   * @memberof EngineEmailProfile
   */
  name?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineEmailProfile
   */
  schema?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineEmailProfile
   */
  smtp_port?: number
  /**
   *
   * @type {string}
   * @memberof EngineEmailProfile
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineEmailProfile
   */
  updated_by?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineEndpoint
 */
export interface EngineEndpoint {
  /**
   *
   * @type {string}
   * @memberof EngineEndpoint
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineEndpoint
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineEndpoint
   */
  number?: string
  /**
   *
   * @type {string}
   * @memberof EngineEndpoint
   */
  type?: string
}
/**
 *
 * @export
 * @interface EngineExceptDate
 */
export interface EngineExceptDate {
  /**
   *
   * @type {string}
   * @memberof EngineExceptDate
   */
  date?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineExceptDate
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineExceptDate
   */
  name?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineExceptDate
   */
  repeat?: boolean
}
/**
 *
 * @export
 * @interface EngineFilterBetween
 */
export interface EngineFilterBetween {
  /**
   *
   * @type {string}
   * @memberof EngineFilterBetween
   */
  from?: string
  /**
   *
   * @type {string}
   * @memberof EngineFilterBetween
   */
  to?: string
}
/**
 *
 * @export
 * @interface EngineHangupCallRequest
 */
export interface EngineHangupCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineHangupCallRequest
   */
  app_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineHangupCallRequest
   */
  cause?: string
  /**
   *
   * @type {string}
   * @memberof EngineHangupCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineHangupCallRequest
   */
  id?: string
}
/**
 *
 * @export
 * @interface EngineHistoryCall
 */
export interface EngineHistoryCall {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineHistoryCall
   */
  agent?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  answered_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  app_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineHistoryCall
   */
  bill_sec?: number
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  bridged_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  cause?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  created_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  destination?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  direction?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  display?: string
  /**
   *
   * @type {number}
   * @memberof EngineHistoryCall
   */
  duration?: number
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  extension?: string
  /**
   *
   * @type {Array<EngineCallFile>}
   * @memberof EngineHistoryCall
   */
  files?: Array<EngineCallFile>
  /**
   *
   * @type {EngineEndpoint}
   * @memberof EngineHistoryCall
   */
  from?: EngineEndpoint
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineHistoryCall
   */
  gateway?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  hangup_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  hangup_by?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineHistoryCall
   */
  has_children?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineHistoryCall
   */
  hold_sec?: number
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  joined_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  leaving_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineHistoryCall
   */
  member?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  parent_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineHistoryCall
   */
  queue?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  queue_bridged_at?: string
  /**
   *
   * @type {number}
   * @memberof EngineHistoryCall
   */
  queue_duration_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineHistoryCall
   */
  queue_wait_sec?: number
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  reporting_at?: string
  /**
   *
   * @type {number}
   * @memberof EngineHistoryCall
   */
  reporting_sec?: number
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  result?: string
  /**
   *
   * @type {number}
   * @memberof EngineHistoryCall
   */
  sip_code?: number
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  stored_at?: string
  /**
   *
   * @type {Array<string>}
   * @memberof EngineHistoryCall
   */
  tags?: Array<string>
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineHistoryCall
   */
  team?: EngineLookup
  /**
   *
   * @type {EngineEndpoint}
   * @memberof EngineHistoryCall
   */
  to?: EngineEndpoint
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  transfer_from?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  transfer_to?: string
  /**
   *
   * @type {string}
   * @memberof EngineHistoryCall
   */
  type?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineHistoryCall
   */
  user?: EngineLookup
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineHistoryCall
   */
  variables?: { [key: string]: string }
  /**
   *
   * @type {number}
   * @memberof EngineHistoryCall
   */
  wait_sec?: number
}
/**
 *
 * @export
 * @interface EngineHoldCallResponse
 */
export interface EngineHoldCallResponse {
  /**
   *
   * @type {string}
   * @memberof EngineHoldCallResponse
   */
  state?: string
}
/**
 *
 * @export
 * @interface EngineList
 */
export interface EngineList {
  /**
   *
   * @type {string}
   * @memberof EngineList
   */
  count?: string
  /**
   *
   * @type {string}
   * @memberof EngineList
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineList
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineList
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineList
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineList
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineList
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineList
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineList
   */
  updated_by?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineListAgent
 */
export interface EngineListAgent {
  /**
   *
   * @type {Array<EngineAgent>}
   * @memberof EngineListAgent
   */
  items?: Array<EngineAgent>
  /**
   *
   * @type {boolean}
   * @memberof EngineListAgent
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListAgentInQueue
 */
export interface EngineListAgentInQueue {
  /**
   *
   * @type {Array<EngineAgentInQueue>}
   * @memberof EngineListAgentInQueue
   */
  items?: Array<EngineAgentInQueue>
  /**
   *
   * @type {boolean}
   * @memberof EngineListAgentInQueue
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListAgentInTeam
 */
export interface EngineListAgentInTeam {
  /**
   *
   * @type {Array<EngineAgentInTeam>}
   * @memberof EngineListAgentInTeam
   */
  items?: Array<EngineAgentInTeam>
  /**
   *
   * @type {boolean}
   * @memberof EngineListAgentInTeam
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListAgentSkill
 */
export interface EngineListAgentSkill {
  /**
   *
   * @type {Array<EngineAgentSkillItem>}
   * @memberof EngineListAgentSkill
   */
  items?: Array<EngineAgentSkillItem>
  /**
   *
   * @type {boolean}
   * @memberof EngineListAgentSkill
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListAgentStateHistory
 */
export interface EngineListAgentStateHistory {
  /**
   *
   * @type {Array<EngineAgentState>}
   * @memberof EngineListAgentStateHistory
   */
  items?: Array<EngineAgentState>
  /**
   *
   * @type {boolean}
   * @memberof EngineListAgentStateHistory
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListAgentStatsStatistic
 */
export interface EngineListAgentStatsStatistic {
  /**
   *
   * @type {Array<EngineAgentStatsStatistic>}
   * @memberof EngineListAgentStatsStatistic
   */
  items?: Array<EngineAgentStatsStatistic>
  /**
   *
   * @type {boolean}
   * @memberof EngineListAgentStatsStatistic
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListAgentTeam
 */
export interface EngineListAgentTeam {
  /**
   *
   * @type {Array<EngineAgentTeam>}
   * @memberof EngineListAgentTeam
   */
  items?: Array<EngineAgentTeam>
  /**
   *
   * @type {boolean}
   * @memberof EngineListAgentTeam
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListAgentUser
 */
export interface EngineListAgentUser {
  /**
   *
   * @type {Array<EngineAgentUser>}
   * @memberof EngineListAgentUser
   */
  items?: Array<EngineAgentUser>
  /**
   *
   * @type {boolean}
   * @memberof EngineListAgentUser
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListAttempt
 */
export interface EngineListAttempt {
  /**
   *
   * @type {Array<EngineAttempt>}
   * @memberof EngineListAttempt
   */
  items?: Array<EngineAttempt>
  /**
   *
   * @type {boolean}
   * @memberof EngineListAttempt
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListBucket
 */
export interface EngineListBucket {
  /**
   *
   * @type {Array<EngineBucket>}
   * @memberof EngineListBucket
   */
  items?: Array<EngineBucket>
  /**
   *
   * @type {boolean}
   * @memberof EngineListBucket
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListCalendar
 */
export interface EngineListCalendar {
  /**
   *
   * @type {Array<EngineCalendar>}
   * @memberof EngineListCalendar
   */
  items?: Array<EngineCalendar>
  /**
   *
   * @type {boolean}
   * @memberof EngineListCalendar
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListCall
 */
export interface EngineListCall {
  /**
   *
   * @type {Array<EngineActiveCall>}
   * @memberof EngineListCall
   */
  items?: Array<EngineActiveCall>
  /**
   *
   * @type {boolean}
   * @memberof EngineListCall
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListCommunication
 */
export interface EngineListCommunication {
  /**
   *
   * @type {string}
   * @memberof EngineListCommunication
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineListCommunication
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineListCommunication
   */
  list_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineListCommunication
   */
  number?: string
}
/**
 *
 * @export
 * @interface EngineListCommunicationType
 */
export interface EngineListCommunicationType {
  /**
   *
   * @type {Array<EngineCommunicationType>}
   * @memberof EngineListCommunicationType
   */
  items?: Array<EngineCommunicationType>
  /**
   *
   * @type {boolean}
   * @memberof EngineListCommunicationType
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListEmailProfile
 */
export interface EngineListEmailProfile {
  /**
   *
   * @type {Array<EngineEmailProfile>}
   * @memberof EngineListEmailProfile
   */
  items?: Array<EngineEmailProfile>
  /**
   *
   * @type {boolean}
   * @memberof EngineListEmailProfile
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListHistoryAttempt
 */
export interface EngineListHistoryAttempt {
  /**
   *
   * @type {Array<EngineAttemptHistory>}
   * @memberof EngineListHistoryAttempt
   */
  items?: Array<EngineAttemptHistory>
  /**
   *
   * @type {boolean}
   * @memberof EngineListHistoryAttempt
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListHistoryCall
 */
export interface EngineListHistoryCall {
  /**
   *
   * @type {Array<EngineHistoryCall>}
   * @memberof EngineListHistoryCall
   */
  items?: Array<EngineHistoryCall>
  /**
   *
   * @type {boolean}
   * @memberof EngineListHistoryCall
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListMember
 */
export interface EngineListMember {
  /**
   *
   * @type {Array<EngineMemberInQueue>}
   * @memberof EngineListMember
   */
  items?: Array<EngineMemberInQueue>
  /**
   *
   * @type {boolean}
   * @memberof EngineListMember
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListMemberAttempt
 */
export interface EngineListMemberAttempt {
  /**
   *
   * @type {Array<EngineMemberAttempt>}
   * @memberof EngineListMemberAttempt
   */
  items?: Array<EngineMemberAttempt>
  /**
   *
   * @type {boolean}
   * @memberof EngineListMemberAttempt
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListOfList
 */
export interface EngineListOfList {
  /**
   *
   * @type {Array<EngineList>}
   * @memberof EngineListOfList
   */
  items?: Array<EngineList>
  /**
   *
   * @type {boolean}
   * @memberof EngineListOfList
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListOfListCommunication
 */
export interface EngineListOfListCommunication {
  /**
   *
   * @type {Array<EngineListCommunication>}
   * @memberof EngineListOfListCommunication
   */
  items?: Array<EngineListCommunication>
  /**
   *
   * @type {boolean}
   * @memberof EngineListOfListCommunication
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListOutboundResource
 */
export interface EngineListOutboundResource {
  /**
   *
   * @type {Array<EngineOutboundResource>}
   * @memberof EngineListOutboundResource
   */
  items?: Array<EngineOutboundResource>
  /**
   *
   * @type {boolean}
   * @memberof EngineListOutboundResource
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListOutboundResourceDisplay
 */
export interface EngineListOutboundResourceDisplay {
  /**
   *
   * @type {Array<EngineResourceDisplay>}
   * @memberof EngineListOutboundResourceDisplay
   */
  items?: Array<EngineResourceDisplay>
  /**
   *
   * @type {boolean}
   * @memberof EngineListOutboundResourceDisplay
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListOutboundResourceGroup
 */
export interface EngineListOutboundResourceGroup {
  /**
   *
   * @type {Array<EngineOutboundResourceViewGroup>}
   * @memberof EngineListOutboundResourceGroup
   */
  items?: Array<EngineOutboundResourceViewGroup>
  /**
   *
   * @type {boolean}
   * @memberof EngineListOutboundResourceGroup
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListOutboundResourceInGroup
 */
export interface EngineListOutboundResourceInGroup {
  /**
   *
   * @type {Array<EngineOutboundResourceInGroup>}
   * @memberof EngineListOutboundResourceInGroup
   */
  items?: Array<EngineOutboundResourceInGroup>
  /**
   *
   * @type {boolean}
   * @memberof EngineListOutboundResourceInGroup
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListQueue
 */
export interface EngineListQueue {
  /**
   *
   * @type {Array<EngineQueue>}
   * @memberof EngineListQueue
   */
  items?: Array<EngineQueue>
  /**
   *
   * @type {boolean}
   * @memberof EngineListQueue
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListQueueBucket
 */
export interface EngineListQueueBucket {
  /**
   *
   * @type {Array<EngineQueueBucket>}
   * @memberof EngineListQueueBucket
   */
  items?: Array<EngineQueueBucket>
  /**
   *
   * @type {boolean}
   * @memberof EngineListQueueBucket
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListQueueResourceGroup
 */
export interface EngineListQueueResourceGroup {
  /**
   *
   * @type {Array<EngineQueueResourceGroup>}
   * @memberof EngineListQueueResourceGroup
   */
  items?: Array<EngineQueueResourceGroup>
  /**
   *
   * @type {boolean}
   * @memberof EngineListQueueResourceGroup
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListQueueRouting
 */
export interface EngineListQueueRouting {
  /**
   *
   * @type {Array<EngineQueueRouting>}
   * @memberof EngineListQueueRouting
   */
  items?: Array<EngineQueueRouting>
}
/**
 *
 * @export
 * @interface EngineListReportGeneral
 */
export interface EngineListReportGeneral {
  /**
   *
   * @type {Array<EngineQueueReportGeneral>}
   * @memberof EngineListReportGeneral
   */
  items?: Array<EngineQueueReportGeneral>
  /**
   *
   * @type {boolean}
   * @memberof EngineListReportGeneral
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListResourceTeamAgent
 */
export interface EngineListResourceTeamAgent {
  /**
   *
   * @type {Array<EngineResourceTeamAgent>}
   * @memberof EngineListResourceTeamAgent
   */
  items?: Array<EngineResourceTeamAgent>
  /**
   *
   * @type {boolean}
   * @memberof EngineListResourceTeamAgent
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListResourceTeamSkill
 */
export interface EngineListResourceTeamSkill {
  /**
   *
   * @type {Array<EngineResourceTeamSkill>}
   * @memberof EngineListResourceTeamSkill
   */
  items?: Array<EngineResourceTeamSkill>
  /**
   *
   * @type {boolean}
   * @memberof EngineListResourceTeamSkill
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListRoutingOutboundCall
 */
export interface EngineListRoutingOutboundCall {
  /**
   *
   * @type {Array<EngineRoutingOutboundCallCompact>}
   * @memberof EngineListRoutingOutboundCall
   */
  items?: Array<EngineRoutingOutboundCallCompact>
  /**
   *
   * @type {boolean}
   * @memberof EngineListRoutingOutboundCall
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListRoutingSchema
 */
export interface EngineListRoutingSchema {
  /**
   *
   * @type {Array<EngineRoutingSchema>}
   * @memberof EngineListRoutingSchema
   */
  items?: Array<EngineRoutingSchema>
  /**
   *
   * @type {boolean}
   * @memberof EngineListRoutingSchema
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListRoutingVariable
 */
export interface EngineListRoutingVariable {
  /**
   *
   * @type {Array<EngineRoutingVariable>}
   * @memberof EngineListRoutingVariable
   */
  items?: Array<EngineRoutingVariable>
}
/**
 *
 * @export
 * @interface EngineListSkill
 */
export interface EngineListSkill {
  /**
   *
   * @type {Array<EngineSkill>}
   * @memberof EngineListSkill
   */
  items?: Array<EngineSkill>
  /**
   *
   * @type {boolean}
   * @memberof EngineListSkill
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListSupervisorInTeam
 */
export interface EngineListSupervisorInTeam {
  /**
   *
   * @type {Array<EngineSupervisorInTeam>}
   * @memberof EngineListSupervisorInTeam
   */
  items?: Array<EngineSupervisorInTeam>
  /**
   *
   * @type {boolean}
   * @memberof EngineListSupervisorInTeam
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineListTimezoneResponse
 */
export interface EngineListTimezoneResponse {
  /**
   *
   * @type {Array<EngineTimezone>}
   * @memberof EngineListTimezoneResponse
   */
  items?: Array<EngineTimezone>
  /**
   *
   * @type {boolean}
   * @memberof EngineListTimezoneResponse
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface EngineLookup
 */
export interface EngineLookup {
  /**
   *
   * @type {string}
   * @memberof EngineLookup
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineLookup
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineMemberAttempt
 */
export interface EngineMemberAttempt {
  /**
   *
   * @type {boolean}
   * @memberof EngineMemberAttempt
   */
  active?: boolean
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberAttempt
   */
  agent?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  answered_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  bridged_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberAttempt
   */
  bucket?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  created_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  destination?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  hangup_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  leg_a_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  leg_b_id?: string
  /**
   *
   * @type {object}
   * @memberof EngineMemberAttempt
   */
  logs?: object
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberAttempt
   */
  member?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  node?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  originate_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberAttempt
   */
  resource?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineMemberAttempt
   */
  result?: string
  /**
   *
   * @type {number}
   * @memberof EngineMemberAttempt
   */
  weight?: number
}
/**
 *
 * @export
 * @interface EngineMemberBulkResponse
 */
export interface EngineMemberBulkResponse {
  /**
   *
   * @type {Array<string>}
   * @memberof EngineMemberBulkResponse
   */
  ids?: Array<string>
}
/**
 *
 * @export
 * @interface EngineMemberCommunication
 */
export interface EngineMemberCommunication {
  /**
   *
   * @type {number}
   * @memberof EngineMemberCommunication
   */
  attempts?: number
  /**
   *
   * @type {string}
   * @memberof EngineMemberCommunication
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberCommunication
   */
  destination?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberCommunication
   */
  display?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberCommunication
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberCommunication
   */
  last_activity_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberCommunication
   */
  last_cause?: string
  /**
   *
   * @type {number}
   * @memberof EngineMemberCommunication
   */
  priority?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberCommunication
   */
  resource?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineMemberCommunication
   */
  state?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberCommunication
   */
  type?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineMemberCommunicationCreateRequest
 */
export interface EngineMemberCommunicationCreateRequest {
  /**
   *
   * @type {string}
   * @memberof EngineMemberCommunicationCreateRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberCommunicationCreateRequest
   */
  destination?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberCommunicationCreateRequest
   */
  display?: string
  /**
   *
   * @type {number}
   * @memberof EngineMemberCommunicationCreateRequest
   */
  priority?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberCommunicationCreateRequest
   */
  resource?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberCommunicationCreateRequest
   */
  type?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineMemberInQueue
 */
export interface EngineMemberInQueue {
  /**
   *
   * @type {number}
   * @memberof EngineMemberInQueue
   */
  attempts?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberInQueue
   */
  bucket?: EngineLookup
  /**
   *
   * @type {Array<EngineMemberCommunication>}
   * @memberof EngineMemberInQueue
   */
  communications?: Array<EngineMemberCommunication>
  /**
   *
   * @type {string}
   * @memberof EngineMemberInQueue
   */
  created_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberInQueue
   */
  expire_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberInQueue
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberInQueue
   */
  last_activity_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberInQueue
   */
  min_offering_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineMemberInQueue
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineMemberInQueue
   */
  priority?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberInQueue
   */
  queue?: EngineLookup
  /**
   *
   * @type {boolean}
   * @memberof EngineMemberInQueue
   */
  reserved?: boolean
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberInQueue
   */
  skill?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineMemberInQueue
   */
  stop_cause?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineMemberInQueue
   */
  timezone?: EngineLookup
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineMemberInQueue
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineMovePositionRoutingOutboundCallRequest
 */
export interface EngineMovePositionRoutingOutboundCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineMovePositionRoutingOutboundCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineMovePositionRoutingOutboundCallRequest
   */
  from_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineMovePositionRoutingOutboundCallRequest
   */
  to_id?: string
}
/**
 *
 * @export
 * @interface EngineMovePositionRoutingOutboundCallResponse
 */
export interface EngineMovePositionRoutingOutboundCallResponse {
  /**
   *
   * @type {boolean}
   * @memberof EngineMovePositionRoutingOutboundCallResponse
   */
  success?: boolean
}
/**
 *
 * @export
 * @interface EngineOutboundResource
 */
export interface EngineOutboundResource {
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineOutboundResource
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineOutboundResource
   */
  enabled?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof EngineOutboundResource
   */
  error_ids?: Array<string>
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineOutboundResource
   */
  gateway?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  last_error_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  last_error_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineOutboundResource
   */
  limit?: number
  /**
   *
   * @type {number}
   * @memberof EngineOutboundResource
   */
  max_successively_errors?: number
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  number?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineOutboundResource
   */
  reserve?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineOutboundResource
   */
  rps?: number
  /**
   *
   * @type {number}
   * @memberof EngineOutboundResource
   */
  successively_errors?: number
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineOutboundResource
   */
  updated_by?: EngineLookup
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineOutboundResource
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineOutboundResourceGroup
 */
export interface EngineOutboundResourceGroup {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineOutboundResourceGroup
   */
  communication?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceGroup
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineOutboundResourceGroup
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceGroup
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceGroup
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceGroup
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceGroup
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceGroup
   */
  strategy?: string
  /**
   *
   * @type {Array<EngineOutboundResourceTimeRange>}
   * @memberof EngineOutboundResourceGroup
   */
  time?: Array<EngineOutboundResourceTimeRange>
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceGroup
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineOutboundResourceGroup
   */
  updated_by?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineOutboundResourceInGroup
 */
export interface EngineOutboundResourceInGroup {
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceInGroup
   */
  group_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceInGroup
   */
  id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineOutboundResourceInGroup
   */
  resource?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineOutboundResourceTimeRange
 */
export interface EngineOutboundResourceTimeRange {
  /**
   *
   * @type {number}
   * @memberof EngineOutboundResourceTimeRange
   */
  end_time_of_day?: number
  /**
   *
   * @type {number}
   * @memberof EngineOutboundResourceTimeRange
   */
  start_time_of_day?: number
}
/**
 *
 * @export
 * @interface EngineOutboundResourceViewGroup
 */
export interface EngineOutboundResourceViewGroup {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineOutboundResourceViewGroup
   */
  communication?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceViewGroup
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceViewGroup
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceViewGroup
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResourceViewGroup
   */
  strategy?: string
}
/**
 *
 * @export
 * @interface EnginePatchMemberRequest
 */
export interface EnginePatchMemberRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchMemberRequest
   */
  bucket?: EngineLookup
  /**
   *
   * @type {Array<EngineMemberCommunicationCreateRequest>}
   * @memberof EnginePatchMemberRequest
   */
  communications?: Array<EngineMemberCommunicationCreateRequest>
  /**
   *
   * @type {string}
   * @memberof EnginePatchMemberRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EnginePatchMemberRequest
   */
  expire_at?: string
  /**
   *
   * @type {Array<string>}
   * @memberof EnginePatchMemberRequest
   */
  fields?: Array<string>
  /**
   *
   * @type {string}
   * @memberof EnginePatchMemberRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EnginePatchMemberRequest
   */
  min_offering_at?: string
  /**
   *
   * @type {string}
   * @memberof EnginePatchMemberRequest
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EnginePatchMemberRequest
   */
  priority?: number
  /**
   *
   * @type {string}
   * @memberof EnginePatchMemberRequest
   */
  queue_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchMemberRequest
   */
  skill?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EnginePatchMemberRequest
   */
  stop_cause?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchMemberRequest
   */
  timezone?: EngineLookup
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EnginePatchMemberRequest
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EnginePatchOutboundResourceRequest
 */
export interface EnginePatchOutboundResourceRequest {
  /**
   *
   * @type {string}
   * @memberof EnginePatchOutboundResourceRequest
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EnginePatchOutboundResourceRequest
   */
  enabled?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof EnginePatchOutboundResourceRequest
   */
  error_ids?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof EnginePatchOutboundResourceRequest
   */
  fields?: Array<string>
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchOutboundResourceRequest
   */
  gateway?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EnginePatchOutboundResourceRequest
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EnginePatchOutboundResourceRequest
   */
  limit?: number
  /**
   *
   * @type {number}
   * @memberof EnginePatchOutboundResourceRequest
   */
  max_successively_errors?: number
  /**
   *
   * @type {string}
   * @memberof EnginePatchOutboundResourceRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EnginePatchOutboundResourceRequest
   */
  number?: string
  /**
   *
   * @type {boolean}
   * @memberof EnginePatchOutboundResourceRequest
   */
  reserve?: boolean
  /**
   *
   * @type {number}
   * @memberof EnginePatchOutboundResourceRequest
   */
  rps?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EnginePatchOutboundResourceRequest
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EnginePatchQueueRequest
 */
export interface EnginePatchQueueRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchQueueRequest
   */
  calendar?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EnginePatchQueueRequest
   */
  description?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchQueueRequest
   */
  dnc_list?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EnginePatchQueueRequest
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EnginePatchQueueRequest
   */
  enabled?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof EnginePatchQueueRequest
   */
  fields?: Array<string>
  /**
   *
   * @type {string}
   * @memberof EnginePatchQueueRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EnginePatchQueueRequest
   */
  name?: string
  /**
   *
   * @type {object}
   * @memberof EnginePatchQueueRequest
   */
  payload?: object
  /**
   *
   * @type {number}
   * @memberof EnginePatchQueueRequest
   */
  priority?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchQueueRequest
   */
  ringtone?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchQueueRequest
   */
  schema?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EnginePatchQueueRequest
   */
  sec_locate_agent?: number
  /**
   *
   * @type {string}
   * @memberof EnginePatchQueueRequest
   */
  strategy?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchQueueRequest
   */
  team?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EnginePatchQueueRequest
   */
  timeout?: number
  /**
   *
   * @type {number}
   * @memberof EnginePatchQueueRequest
   */
  type?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EnginePatchQueueRequest
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EnginePatchResourceTeamAgentRequest
 */
export interface EnginePatchResourceTeamAgentRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchResourceTeamAgentRequest
   */
  agent?: EngineLookup
  /**
   *
   * @type {Array<EngineLookup>}
   * @memberof EnginePatchResourceTeamAgentRequest
   */
  buckets?: Array<EngineLookup>
  /**
   *
   * @type {string}
   * @memberof EnginePatchResourceTeamAgentRequest
   */
  domain_id?: string
  /**
   *
   * @type {Array<string>}
   * @memberof EnginePatchResourceTeamAgentRequest
   */
  fields?: Array<string>
  /**
   *
   * @type {string}
   * @memberof EnginePatchResourceTeamAgentRequest
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EnginePatchResourceTeamAgentRequest
   */
  lvl?: number
  /**
   *
   * @type {string}
   * @memberof EnginePatchResourceTeamAgentRequest
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EnginePatchResourceTeamSkillRequest
 */
export interface EnginePatchResourceTeamSkillRequest {
  /**
   *
   * @type {Array<EngineLookup>}
   * @memberof EnginePatchResourceTeamSkillRequest
   */
  buckets?: Array<EngineLookup>
  /**
   *
   * @type {string}
   * @memberof EnginePatchResourceTeamSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {Array<string>}
   * @memberof EnginePatchResourceTeamSkillRequest
   */
  fields?: Array<string>
  /**
   *
   * @type {string}
   * @memberof EnginePatchResourceTeamSkillRequest
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EnginePatchResourceTeamSkillRequest
   */
  lvl?: number
  /**
   *
   * @type {number}
   * @memberof EnginePatchResourceTeamSkillRequest
   */
  max_capacity?: number
  /**
   *
   * @type {number}
   * @memberof EnginePatchResourceTeamSkillRequest
   */
  min_capacity?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchResourceTeamSkillRequest
   */
  skill?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EnginePatchResourceTeamSkillRequest
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EnginePatchRoutingOutboundCallRequest
 */
export interface EnginePatchRoutingOutboundCallRequest {
  /**
   *
   * @type {string}
   * @memberof EnginePatchRoutingOutboundCallRequest
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof EnginePatchRoutingOutboundCallRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EnginePatchRoutingOutboundCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {Array<string>}
   * @memberof EnginePatchRoutingOutboundCallRequest
   */
  fields?: Array<string>
  /**
   *
   * @type {string}
   * @memberof EnginePatchRoutingOutboundCallRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EnginePatchRoutingOutboundCallRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EnginePatchRoutingOutboundCallRequest
   */
  pattern?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EnginePatchRoutingOutboundCallRequest
   */
  schema?: EngineLookup
}
/**
 *
 * @export
 * @interface EnginePatchRoutingSchemaRequest
 */
export interface EnginePatchRoutingSchemaRequest {
  /**
   *
   * @type {boolean}
   * @memberof EnginePatchRoutingSchemaRequest
   */
  debug?: boolean
  /**
   *
   * @type {string}
   * @memberof EnginePatchRoutingSchemaRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EnginePatchRoutingSchemaRequest
   */
  domain_id?: string
  /**
   *
   * @type {Array<string>}
   * @memberof EnginePatchRoutingSchemaRequest
   */
  fields?: Array<string>
  /**
   *
   * @type {string}
   * @memberof EnginePatchRoutingSchemaRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EnginePatchRoutingSchemaRequest
   */
  name?: string
  /**
   *
   * @type {object}
   * @memberof EnginePatchRoutingSchemaRequest
   */
  payload?: object
  /**
   *
   * @type {object}
   * @memberof EnginePatchRoutingSchemaRequest
   */
  schema?: object
  /**
   *
   * @type {number}
   * @memberof EnginePatchRoutingSchemaRequest
   */
  type?: number
}
/**
 *
 * @export
 * @interface EngineQueue
 */
export interface EngineQueue {
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  active?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  calendar?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  description?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  dnc_list?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineQueue
   */
  enabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  name?: string
  /**
   *
   * @type {object}
   * @memberof EngineQueue
   */
  payload?: object
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  priority?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  ringtone?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  schema?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  sec_locate_agent?: number
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  strategy?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  team?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  timeout?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  type?: number
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  updated_by?: EngineLookup
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineQueue
   */
  variables?: { [key: string]: string }
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  waiting?: number
}
/**
 *
 * @export
 * @interface EngineQueueBucket
 */
export interface EngineQueueBucket {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueueBucket
   */
  bucket?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineQueueBucket
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineQueueBucket
   */
  ratio?: number
}
/**
 *
 * @export
 * @interface EngineQueueReportGeneral
 */
export interface EngineQueueReportGeneral {
  /**
   *
   * @type {number}
   * @memberof EngineQueueReportGeneral
   */
  abandoned?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueueReportGeneral
   */
  avg_aht_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueueReportGeneral
   */
  avg_asa_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueueReportGeneral
   */
  avg_awt_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueueReportGeneral
   */
  avg_wrap_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueueReportGeneral
   */
  bridged?: number
  /**
   *
   * @type {string}
   * @memberof EngineQueueReportGeneral
   */
  count?: string
  /**
   *
   * @type {number}
   * @memberof EngineQueueReportGeneral
   */
  max_awt_sec?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueueReportGeneral
   */
  online?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueueReportGeneral
   */
  pause?: number
  /**
   *
   * @type {string}
   * @memberof EngineQueueReportGeneral
   */
  processed?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueueReportGeneral
   */
  queue?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineQueueReportGeneral
   */
  sum_bill_sec?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueueReportGeneral
   */
  team?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineQueueReportGeneral
   */
  waiting?: string
}
/**
 *
 * @export
 * @interface EngineQueueResourceGroup
 */
export interface EngineQueueResourceGroup {
  /**
   *
   * @type {string}
   * @memberof EngineQueueResourceGroup
   */
  id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueueResourceGroup
   */
  resource_group?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineQueueRouting
 */
export interface EngineQueueRouting {
  /**
   *
   * @type {boolean}
   * @memberof EngineQueueRouting
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineQueueRouting
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineQueueRouting
   */
  pattern?: string
  /**
   *
   * @type {number}
   * @memberof EngineQueueRouting
   */
  priority?: number
  /**
   *
   * @type {string}
   * @memberof EngineQueueRouting
   */
  queue_id?: string
}
/**
 *
 * @export
 * @interface EngineResourceDisplay
 */
export interface EngineResourceDisplay {
  /**
   *
   * @type {string}
   * @memberof EngineResourceDisplay
   */
  display?: string
  /**
   *
   * @type {string}
   * @memberof EngineResourceDisplay
   */
  id?: string
}
/**
 *
 * @export
 * @interface EngineResourceTeamAgent
 */
export interface EngineResourceTeamAgent {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineResourceTeamAgent
   */
  agent?: EngineLookup
  /**
   *
   * @type {Array<EngineLookup>}
   * @memberof EngineResourceTeamAgent
   */
  buckets?: Array<EngineLookup>
  /**
   *
   * @type {string}
   * @memberof EngineResourceTeamAgent
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineResourceTeamAgent
   */
  lvl?: number
  /**
   *
   * @type {string}
   * @memberof EngineResourceTeamAgent
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EngineResourceTeamSkill
 */
export interface EngineResourceTeamSkill {
  /**
   *
   * @type {Array<EngineLookup>}
   * @memberof EngineResourceTeamSkill
   */
  buckets?: Array<EngineLookup>
  /**
   *
   * @type {string}
   * @memberof EngineResourceTeamSkill
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineResourceTeamSkill
   */
  lvl?: number
  /**
   *
   * @type {number}
   * @memberof EngineResourceTeamSkill
   */
  max_capacity?: number
  /**
   *
   * @type {number}
   * @memberof EngineResourceTeamSkill
   */
  min_capacity?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineResourceTeamSkill
   */
  skill?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineResourceTeamSkill
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EngineResponse
 */
export interface EngineResponse {
  /**
   *
   * @type {string}
   * @memberof EngineResponse
   */
  status?: string
}
/**
 *
 * @export
 * @interface EngineRoutingOutboundCall
 */
export interface EngineRoutingOutboundCall {
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingOutboundCall
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineRoutingOutboundCall
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  pattern?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingOutboundCall
   */
  schema?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingOutboundCall
   */
  updated_by?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineRoutingOutboundCallCompact
 */
export interface EngineRoutingOutboundCallCompact {
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCallCompact
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineRoutingOutboundCallCompact
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCallCompact
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCallCompact
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCallCompact
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCallCompact
   */
  pattern?: string
  /**
   *
   * @type {number}
   * @memberof EngineRoutingOutboundCallCompact
   */
  position?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingOutboundCallCompact
   */
  schema?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineRoutingSchema
 */
export interface EngineRoutingSchema {
  /**
   *
   * @type {string}
   * @memberof EngineRoutingSchema
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingSchema
   */
  created_by?: EngineLookup
  /**
   *
   * @type {boolean}
   * @memberof EngineRoutingSchema
   */
  debug?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineRoutingSchema
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingSchema
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingSchema
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingSchema
   */
  name?: string
  /**
   *
   * @type {object}
   * @memberof EngineRoutingSchema
   */
  payload?: object
  /**
   *
   * @type {object}
   * @memberof EngineRoutingSchema
   */
  schema?: object
  /**
   *
   * @type {number}
   * @memberof EngineRoutingSchema
   */
  type?: number
  /**
   *
   * @type {string}
   * @memberof EngineRoutingSchema
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingSchema
   */
  updated_by?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineRoutingVariable
 */
export interface EngineRoutingVariable {
  /**
   *
   * @type {string}
   * @memberof EngineRoutingVariable
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingVariable
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingVariable
   */
  key?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingVariable
   */
  value?: string
}
/**
 *
 * @export
 * @interface EngineSkill
 */
export interface EngineSkill {
  /**
   *
   * @type {string}
   * @memberof EngineSkill
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineSkill
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineSkill
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineSkill
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineSupervisorInTeam
 */
export interface EngineSupervisorInTeam {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineSupervisorInTeam
   */
  agent?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineSupervisorInTeam
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineSupervisorInTeam
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineSupervisorInTeam
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EngineTimezone
 */
export interface EngineTimezone {
  /**
   *
   * @type {string}
   * @memberof EngineTimezone
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineTimezone
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineTimezone
   */
  offset?: string
}
/**
 *
 * @export
 * @interface EngineUpdateAgentRequest
 */
export interface EngineUpdateAgentRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentRequest
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentRequest
   */
  progressive_count?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateAgentRequest
   */
  user?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineUpdateAgentSkillRequest
 */
export interface EngineUpdateAgentSkillRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentSkillRequest
   */
  agent_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentSkillRequest
   */
  capacity?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentSkillRequest
   */
  id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateAgentSkillRequest
   */
  skill?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineUpdateAgentTeamRequest
 */
export interface EngineUpdateAgentTeamRequest {
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  busy_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  call_timeout?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentTeamRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentTeamRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentTeamRequest
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  max_no_answer?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentTeamRequest
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  no_answer_delay_time?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateAgentTeamRequest
   */
  post_processing?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  post_processing_timeout?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  reject_delay_time?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentTeamRequest
   */
  strategy?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  wrap_up_time?: number
}
/**
 *
 * @export
 * @interface EngineUpdateBucketRequest
 */
export interface EngineUpdateBucketRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateBucketRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateBucketRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateBucketRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateBucketRequest
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineUpdateCalendarRequest
 */
export interface EngineUpdateCalendarRequest {
  /**
   *
   * @type {Array<EngineAcceptOfDay>}
   * @memberof EngineUpdateCalendarRequest
   */
  accepts?: Array<EngineAcceptOfDay>
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  end_at?: string
  /**
   *
   * @type {Array<EngineExceptDate>}
   * @memberof EngineUpdateCalendarRequest
   */
  excepts?: Array<EngineExceptDate>
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  start_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateCalendarRequest
   */
  timezone?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineUpdateCommunicationTypeRequest
 */
export interface EngineUpdateCommunicationTypeRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCommunicationTypeRequest
   */
  code?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCommunicationTypeRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCommunicationTypeRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCommunicationTypeRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCommunicationTypeRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCommunicationTypeRequest
   */
  type?: string
}
/**
 *
 * @export
 * @interface EngineUpdateEmailProfileRequest
 */
export interface EngineUpdateEmailProfileRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateEmailProfileRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateEmailProfileRequest
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateEmailProfileRequest
   */
  enabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineUpdateEmailProfileRequest
   */
  host?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateEmailProfileRequest
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateEmailProfileRequest
   */
  imap_port?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateEmailProfileRequest
   */
  login?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateEmailProfileRequest
   */
  mailbox?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateEmailProfileRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateEmailProfileRequest
   */
  password?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateEmailProfileRequest
   */
  schema?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineUpdateEmailProfileRequest
   */
  smtp_port?: number
}
/**
 *
 * @export
 * @interface EngineUpdateListCommunicationRequest
 */
export interface EngineUpdateListCommunicationRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateListCommunicationRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateListCommunicationRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateListCommunicationRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateListCommunicationRequest
   */
  list_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateListCommunicationRequest
   */
  number?: string
}
/**
 *
 * @export
 * @interface EngineUpdateListRequest
 */
export interface EngineUpdateListRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateListRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateListRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateListRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateListRequest
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineUpdateMemberRequest
 */
export interface EngineUpdateMemberRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateMemberRequest
   */
  bucket?: EngineLookup
  /**
   *
   * @type {Array<EngineMemberCommunicationCreateRequest>}
   * @memberof EngineUpdateMemberRequest
   */
  communications?: Array<EngineMemberCommunicationCreateRequest>
  /**
   *
   * @type {string}
   * @memberof EngineUpdateMemberRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateMemberRequest
   */
  expire_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateMemberRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateMemberRequest
   */
  min_offering_at?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateMemberRequest
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateMemberRequest
   */
  priority?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateMemberRequest
   */
  queue_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateMemberRequest
   */
  skill?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateMemberRequest
   */
  stop_cause?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateMemberRequest
   */
  timezone?: EngineLookup
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineUpdateMemberRequest
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineUpdateOutboundResourceDisplayRequest
 */
export interface EngineUpdateOutboundResourceDisplayRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceDisplayRequest
   */
  display?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceDisplayRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceDisplayRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceDisplayRequest
   */
  resource_id?: string
}
/**
 *
 * @export
 * @interface EngineUpdateOutboundResourceGroupRequest
 */
export interface EngineUpdateOutboundResourceGroupRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateOutboundResourceGroupRequest
   */
  communication?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceGroupRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceGroupRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceGroupRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceGroupRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceGroupRequest
   */
  strategy?: string
  /**
   *
   * @type {Array<EngineOutboundResourceTimeRange>}
   * @memberof EngineUpdateOutboundResourceGroupRequest
   */
  time?: Array<EngineOutboundResourceTimeRange>
}
/**
 *
 * @export
 * @interface EngineUpdateOutboundResourceInGroupRequest
 */
export interface EngineUpdateOutboundResourceInGroupRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceInGroupRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceInGroupRequest
   */
  group_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceInGroupRequest
   */
  id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateOutboundResourceInGroupRequest
   */
  resource?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineUpdateOutboundResourceRequest
 */
export interface EngineUpdateOutboundResourceRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  enabled?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  error_ids?: Array<string>
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  gateway?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  limit?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  max_successively_errors?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  number?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  reserve?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  rps?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineUpdateQueueBucketRequest
 */
export interface EngineUpdateQueueBucketRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateQueueBucketRequest
   */
  bucket?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueBucketRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueBucketRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueBucketRequest
   */
  queue_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueBucketRequest
   */
  ratio?: number
}
/**
 *
 * @export
 * @interface EngineUpdateQueueRequest
 */
export interface EngineUpdateQueueRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateQueueRequest
   */
  calendar?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRequest
   */
  description?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateQueueRequest
   */
  dnc_list?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRequest
   */
  domain_id?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateQueueRequest
   */
  enabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRequest
   */
  name?: string
  /**
   *
   * @type {object}
   * @memberof EngineUpdateQueueRequest
   */
  payload?: object
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  priority?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateQueueRequest
   */
  ringtone?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateQueueRequest
   */
  schema?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  sec_locate_agent?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRequest
   */
  strategy?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateQueueRequest
   */
  team?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  timeout?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  type?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineUpdateQueueRequest
   */
  variables?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface EngineUpdateQueueResourceGroupRequest
 */
export interface EngineUpdateQueueResourceGroupRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueResourceGroupRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueResourceGroupRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueResourceGroupRequest
   */
  queue_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateQueueResourceGroupRequest
   */
  resource_group?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineUpdateQueueRoutingRequest
 */
export interface EngineUpdateQueueRoutingRequest {
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  pattern?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  priority?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  queue_id?: string
}
/**
 *
 * @export
 * @interface EngineUpdateResourceTeamAgentRequest
 */
export interface EngineUpdateResourceTeamAgentRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateResourceTeamAgentRequest
   */
  agent?: EngineLookup
  /**
   *
   * @type {Array<EngineLookup>}
   * @memberof EngineUpdateResourceTeamAgentRequest
   */
  buckets?: Array<EngineLookup>
  /**
   *
   * @type {string}
   * @memberof EngineUpdateResourceTeamAgentRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateResourceTeamAgentRequest
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateResourceTeamAgentRequest
   */
  lvl?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateResourceTeamAgentRequest
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EngineUpdateResourceTeamSkillRequest
 */
export interface EngineUpdateResourceTeamSkillRequest {
  /**
   *
   * @type {Array<EngineLookup>}
   * @memberof EngineUpdateResourceTeamSkillRequest
   */
  buckets?: Array<EngineLookup>
  /**
   *
   * @type {string}
   * @memberof EngineUpdateResourceTeamSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateResourceTeamSkillRequest
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateResourceTeamSkillRequest
   */
  lvl?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateResourceTeamSkillRequest
   */
  max_capacity?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateResourceTeamSkillRequest
   */
  min_capacity?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateResourceTeamSkillRequest
   */
  skill?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateResourceTeamSkillRequest
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EngineUpdateRoutingOutboundCallRequest
 */
export interface EngineUpdateRoutingOutboundCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  pattern?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  schema?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineUpdateRoutingSchemaRequest
 */
export interface EngineUpdateRoutingSchemaRequest {
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateRoutingSchemaRequest
   */
  debug?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingSchemaRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingSchemaRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingSchemaRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingSchemaRequest
   */
  name?: string
  /**
   *
   * @type {object}
   * @memberof EngineUpdateRoutingSchemaRequest
   */
  payload?: object
  /**
   *
   * @type {object}
   * @memberof EngineUpdateRoutingSchemaRequest
   */
  schema?: object
  /**
   *
   * @type {number}
   * @memberof EngineUpdateRoutingSchemaRequest
   */
  type?: number
}
/**
 *
 * @export
 * @interface EngineUpdateRoutingVariableRequest
 */
export interface EngineUpdateRoutingVariableRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingVariableRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingVariableRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingVariableRequest
   */
  key?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingVariableRequest
   */
  value?: string
}
/**
 *
 * @export
 * @interface EngineUpdateSkillRequest
 */
export interface EngineUpdateSkillRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSkillRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSkillRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSkillRequest
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineUpdateSupervisorInTeamRequest
 */
export interface EngineUpdateSupervisorInTeamRequest {
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateSupervisorInTeamRequest
   */
  agent?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSupervisorInTeamRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSupervisorInTeamRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSupervisorInTeamRequest
   */
  team_id?: string
}
/**
 *
 * @export
 * @interface EngineUserCallRequest
 */
export interface EngineUserCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUserCallRequest
   */
  app_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUserCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUserCallRequest
   */
  id?: string
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the  `Value` type union.     The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */
export enum ProtobufNullValue {
  NULLVALUE = 'NULL_VALUE',
}

/**
 *
 * @export
 * @interface StorageBackendProfile
 */
export interface StorageBackendProfile {
  /**
   *
   * @type {string}
   * @memberof StorageBackendProfile
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof StorageBackendProfile
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof StorageBackendProfile
   */
  data_count?: string
  /**
   *
   * @type {string}
   * @memberof StorageBackendProfile
   */
  data_size?: string
  /**
   *
   * @type {string}
   * @memberof StorageBackendProfile
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof StorageBackendProfile
   */
  disabled?: boolean
  /**
   *
   * @type {number}
   * @memberof StorageBackendProfile
   */
  expire_days?: number
  /**
   *
   * @type {string}
   * @memberof StorageBackendProfile
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof StorageBackendProfile
   */
  max_size?: string
  /**
   *
   * @type {string}
   * @memberof StorageBackendProfile
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof StorageBackendProfile
   */
  priority?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof StorageBackendProfile
   */
  properties?: { [key: string]: string }
  /**
   *
   * @type {string}
   * @memberof StorageBackendProfile
   */
  type?: string
  /**
   *
   * @type {string}
   * @memberof StorageBackendProfile
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof StorageBackendProfile
   */
  updated_by?: EngineLookup
}
/**
 *
 * @export
 * @interface StorageCreateBackendProfileRequest
 */
export interface StorageCreateBackendProfileRequest {
  /**
   *
   * @type {string}
   * @memberof StorageCreateBackendProfileRequest
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof StorageCreateBackendProfileRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof StorageCreateBackendProfileRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof StorageCreateBackendProfileRequest
   */
  expire_days?: number
  /**
   *
   * @type {string}
   * @memberof StorageCreateBackendProfileRequest
   */
  max_size?: string
  /**
   *
   * @type {string}
   * @memberof StorageCreateBackendProfileRequest
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof StorageCreateBackendProfileRequest
   */
  priority?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof StorageCreateBackendProfileRequest
   */
  properties?: { [key: string]: string }
  /**
   *
   * @type {string}
   * @memberof StorageCreateBackendProfileRequest
   */
  type?: string
}
/**
 *
 * @export
 * @interface StorageListBackendProfile
 */
export interface StorageListBackendProfile {
  /**
   *
   * @type {Array<StorageBackendProfile>}
   * @memberof StorageListBackendProfile
   */
  items?: Array<StorageBackendProfile>
  /**
   *
   * @type {boolean}
   * @memberof StorageListBackendProfile
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface StorageListMedia
 */
export interface StorageListMedia {
  /**
   *
   * @type {Array<StorageMediaFile>}
   * @memberof StorageListMedia
   */
  items?: Array<StorageMediaFile>
  /**
   *
   * @type {boolean}
   * @memberof StorageListMedia
   */
  next?: boolean
}
/**
 *
 * @export
 * @interface StorageMediaFile
 */
export interface StorageMediaFile {
  /**
   *
   * @type {string}
   * @memberof StorageMediaFile
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof StorageMediaFile
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof StorageMediaFile
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof StorageMediaFile
   */
  mime_type?: string
  /**
   *
   * @type {string}
   * @memberof StorageMediaFile
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof StorageMediaFile
   */
  size?: string
  /**
   *
   * @type {string}
   * @memberof StorageMediaFile
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof StorageMediaFile
   */
  updated_by?: EngineLookup
}
/**
 *
 * @export
 * @interface StoragePatchBackendProfileRequest
 */
export interface StoragePatchBackendProfileRequest {
  /**
   *
   * @type {string}
   * @memberof StoragePatchBackendProfileRequest
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof StoragePatchBackendProfileRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof StoragePatchBackendProfileRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof StoragePatchBackendProfileRequest
   */
  expire_days?: number
  /**
   *
   * @type {Array<string>}
   * @memberof StoragePatchBackendProfileRequest
   */
  fields?: Array<string>
  /**
   *
   * @type {string}
   * @memberof StoragePatchBackendProfileRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof StoragePatchBackendProfileRequest
   */
  max_size?: string
  /**
   *
   * @type {string}
   * @memberof StoragePatchBackendProfileRequest
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof StoragePatchBackendProfileRequest
   */
  priority?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof StoragePatchBackendProfileRequest
   */
  properties?: { [key: string]: string }
}
/**
 *
 * @export
 * @interface StorageUpdateBackendProfileRequest
 */
export interface StorageUpdateBackendProfileRequest {
  /**
   *
   * @type {string}
   * @memberof StorageUpdateBackendProfileRequest
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof StorageUpdateBackendProfileRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof StorageUpdateBackendProfileRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof StorageUpdateBackendProfileRequest
   */
  expire_days?: number
  /**
   *
   * @type {string}
   * @memberof StorageUpdateBackendProfileRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof StorageUpdateBackendProfileRequest
   */
  max_size?: string
  /**
   *
   * @type {string}
   * @memberof StorageUpdateBackendProfileRequest
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof StorageUpdateBackendProfileRequest
   */
  priority?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof StorageUpdateBackendProfileRequest
   */
  properties?: { [key: string]: string }
}

/**
 * AgentServiceApi - axios parameter creator
 * @export
 */
export const AgentServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [time_from]
     * @param {string} [time_to]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentStateHistory(
      agent_id: string,
      page?: number,
      size?: number,
      time_from?: string,
      time_to?: string,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling agentStateHistory.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/states/history`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agent_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (time_from !== undefined) {
        localVarQueryParameter['time_from'] = time_from
      }

      if (time_to !== undefined) {
        localVarQueryParameter['time_to'] = time_to
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(
      body: EngineCreateAgentRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgent.'
        )
      }
      const localVarPath = `/call_center/agents`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateAgentRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent(id: string, domain_id?: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Agent
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/agents`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [time_from]
     * @param {string} [time_to]
     * @param {Array<number>} [agent_id]
     * @param {string} [domain_id]
     * @param {string} [q]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentCallStatistics(
      page?: number,
      size?: number,
      time_from?: string,
      time_to?: string,
      agent_id?: Array<number>,
      domain_id?: string,
      q?: string,
      fields?: Array<string>,
      sort?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/agents/reports/call`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (time_from !== undefined) {
        localVarQueryParameter['time.from'] = time_from
      }

      if (time_to !== undefined) {
        localVarQueryParameter['time.to'] = time_to
      }

      if (agent_id) {
        localVarQueryParameter['agent_id'] = agent_id
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueue(
      id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling searchAgentInQueue.'
        )
      }
      const localVarPath = `/call_center/agents/{id}/queues`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} agent_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueueStatistics(
      agent_id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling searchAgentInQueueStatistics.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/statistics/queues`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agent_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInTeam(
      id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling searchAgentInTeam.'
        )
      }
      const localVarPath = `/call_center/agents/{id}/teams`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {Array<string>} [agent_id]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStateHistory(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      agent_id?: Array<string>,
      sort?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/agents/states/history`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (joined_at_from !== undefined) {
        localVarQueryParameter['joined_at.from'] = joined_at_from
      }

      if (joined_at_to !== undefined) {
        localVarQueryParameter['joined_at.to'] = joined_at_to
      }

      if (agent_id) {
        localVarQueryParameter['agent_id'] = agent_id
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [time_from]
     * @param {string} [time_to]
     * @param {Array<string>} [agent_id]
     * @param {Array<string>} [status]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatistic(
      page?: number,
      size?: number,
      time_from?: string,
      time_to?: string,
      agent_id?: Array<string>,
      status?: Array<string>,
      sort?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/agents/reports/status`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (time_from !== undefined) {
        localVarQueryParameter['time.from'] = time_from
      }

      if (time_to !== undefined) {
        localVarQueryParameter['time.to'] = time_to
      }

      if (agent_id) {
        localVarQueryParameter['agent_id'] = agent_id
      }

      if (status) {
        localVarQueryParameter['status'] = status
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsUser
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupUsersAgentNotExists(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/lookups/agents/users`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(
      id: string,
      body: EngineUpdateAgentRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgent.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateAgentRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus(
      id: string,
      body: EngineAgentStatusRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgentStatus.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentStatus.'
        )
      }
      const localVarPath = `/call_center/agents/{id}/status`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineAgentStatusRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AgentServiceApi - functional programming interface
 * @export
 */
export const AgentServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [time_from]
     * @param {string} [time_to]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentStateHistory(
      agent_id: string,
      page?: number,
      size?: number,
      time_from?: string,
      time_to?: string,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgentStateHistory> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).agentStateHistory(
        agent_id,
        page,
        size,
        time_from,
        time_to,
        q,
        domain_id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(
      body: EngineCreateAgentRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).createAgent(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).deleteAgent(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).readAgent(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Agent
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgent> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgent(page, size, q, domain_id, fields, sort, id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [time_from]
     * @param {string} [time_to]
     * @param {Array<number>} [agent_id]
     * @param {string} [domain_id]
     * @param {string} [q]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentCallStatistics(
      page?: number,
      size?: number,
      time_from?: string,
      time_to?: string,
      agent_id?: Array<number>,
      domain_id?: string,
      q?: string,
      fields?: Array<string>,
      sort?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentCallStatisticsList> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentCallStatistics(
        page,
        size,
        time_from,
        time_to,
        agent_id,
        domain_id,
        q,
        fields,
        sort,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueue(
      id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgentInQueue> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentInQueue(id, page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} agent_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueueStatistics(
      agent_id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentInQueueStatisticsList> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentInQueueStatistics(agent_id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInTeam(
      id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgentInTeam> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentInTeam(id, page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {Array<string>} [agent_id]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStateHistory(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      agent_id?: Array<string>,
      sort?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgentStateHistory> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentStateHistory(
        page,
        size,
        joined_at_from,
        joined_at_to,
        agent_id,
        sort,
        domain_id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [time_from]
     * @param {string} [time_to]
     * @param {Array<string>} [agent_id]
     * @param {Array<string>} [status]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatistic(
      page?: number,
      size?: number,
      time_from?: string,
      time_to?: string,
      agent_id?: Array<string>,
      status?: Array<string>,
      sort?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgentStatsStatistic> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentStatusStatistic(
        page,
        size,
        time_from,
        time_to,
        agent_id,
        status,
        sort,
        domain_id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsUser
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupUsersAgentNotExists(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgentUser> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).searchLookupUsersAgentNotExists(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(
      id: string,
      body: EngineUpdateAgentRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).updateAgent(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus(
      id: string,
      body: EngineAgentStatusRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResponse> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).updateAgentStatus(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AgentServiceApi - factory interface
 * @export
 */
export const AgentServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [time_from]
     * @param {string} [time_to]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentStateHistory(
      agent_id: string,
      page?: number,
      size?: number,
      time_from?: string,
      time_to?: string,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).agentStateHistory(
        agent_id,
        page,
        size,
        time_from,
        time_to,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(body: EngineCreateAgentRequest, options?: any) {
      return AgentServiceApiFp(configuration).createAgent(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(id: string, domain_id?: string, options?: any) {
      return AgentServiceApiFp(configuration).deleteAgent(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent(id: string, domain_id?: string, options?: any) {
      return AgentServiceApiFp(configuration).readAgent(id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of Agent
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).searchAgent(
        page,
        size,
        q,
        domain_id,
        fields,
        sort,
        id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [time_from]
     * @param {string} [time_to]
     * @param {Array<number>} [agent_id]
     * @param {string} [domain_id]
     * @param {string} [q]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentCallStatistics(
      page?: number,
      size?: number,
      time_from?: string,
      time_to?: string,
      agent_id?: Array<number>,
      domain_id?: string,
      q?: string,
      fields?: Array<string>,
      sort?: string,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).searchAgentCallStatistics(
        page,
        size,
        time_from,
        time_to,
        agent_id,
        domain_id,
        q,
        fields,
        sort,
        options
      )(axios, basePath)
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueue(
      id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).searchAgentInQueue(
        id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @param {string} agent_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueueStatistics(
      agent_id: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).searchAgentInQueueStatistics(
        agent_id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInTeam(
      id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).searchAgentInTeam(
        id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {Array<string>} [agent_id]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStateHistory(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      agent_id?: Array<string>,
      sort?: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).searchAgentStateHistory(
        page,
        size,
        joined_at_from,
        joined_at_to,
        agent_id,
        sort,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [time_from]
     * @param {string} [time_to]
     * @param {Array<string>} [agent_id]
     * @param {Array<string>} [status]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatistic(
      page?: number,
      size?: number,
      time_from?: string,
      time_to?: string,
      agent_id?: Array<string>,
      status?: Array<string>,
      sort?: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).searchAgentStatusStatistic(
        page,
        size,
        time_from,
        time_to,
        agent_id,
        status,
        sort,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsUser
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupUsersAgentNotExists(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).searchLookupUsersAgentNotExists(
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(id: string, body: EngineUpdateAgentRequest, options?: any) {
      return AgentServiceApiFp(configuration).updateAgent(id, body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus(
      id: string,
      body: EngineAgentStatusRequest,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).updateAgentStatus(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * AgentServiceApi - object-oriented interface
 * @export
 * @class AgentServiceApi
 * @extends {BaseAPI}
 */
export class AgentServiceApi extends BaseAPI {
  /**
   *
   * @param {string} agent_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [time_from]
   * @param {string} [time_to]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public agentStateHistory(
    agent_id: string,
    page?: number,
    size?: number,
    time_from?: string,
    time_to?: string,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).agentStateHistory(
      agent_id,
      page,
      size,
      time_from,
      time_to,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Create Agent
   * @param {EngineCreateAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public createAgent(body: EngineCreateAgentRequest, options?: any) {
    return AgentServiceApiFp(this.configuration).createAgent(body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Remove Agent
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public deleteAgent(id: string, domain_id?: string, options?: any) {
    return AgentServiceApiFp(this.configuration).deleteAgent(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Agent item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public readAgent(id: string, domain_id?: string, options?: any) {
    return AgentServiceApiFp(this.configuration).readAgent(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of Agent
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {Array<string>} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgent(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    fields?: Array<string>,
    sort?: string,
    id?: Array<string>,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).searchAgent(
      page,
      size,
      q,
      domain_id,
      fields,
      sort,
      id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [time_from]
   * @param {string} [time_to]
   * @param {Array<number>} [agent_id]
   * @param {string} [domain_id]
   * @param {string} [q]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentCallStatistics(
    page?: number,
    size?: number,
    time_from?: string,
    time_to?: string,
    agent_id?: Array<number>,
    domain_id?: string,
    q?: string,
    fields?: Array<string>,
    sort?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).searchAgentCallStatistics(
      page,
      size,
      time_from,
      time_to,
      agent_id,
      domain_id,
      q,
      fields,
      sort,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @param {string} id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentInQueue(
    id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).searchAgentInQueue(
      id,
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @param {string} agent_id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentInQueueStatistics(
    agent_id: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).searchAgentInQueueStatistics(
      agent_id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @param {string} id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentInTeam(
    id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).searchAgentInTeam(
      id,
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [joined_at_from]
   * @param {string} [joined_at_to]
   * @param {Array<string>} [agent_id]
   * @param {string} [sort]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentStateHistory(
    page?: number,
    size?: number,
    joined_at_from?: string,
    joined_at_to?: string,
    agent_id?: Array<string>,
    sort?: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).searchAgentStateHistory(
      page,
      size,
      joined_at_from,
      joined_at_to,
      agent_id,
      sort,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [time_from]
   * @param {string} [time_to]
   * @param {Array<string>} [agent_id]
   * @param {Array<string>} [status]
   * @param {string} [sort]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentStatusStatistic(
    page?: number,
    size?: number,
    time_from?: string,
    time_to?: string,
    agent_id?: Array<string>,
    status?: Array<string>,
    sort?: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).searchAgentStatusStatistic(
      page,
      size,
      time_from,
      time_to,
      agent_id,
      status,
      sort,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary SearchLookupAgentNotExistsUser
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchLookupUsersAgentNotExists(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentServiceApiFp(
      this.configuration
    ).searchLookupUsersAgentNotExists(page, size, q, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Update Agent
   * @param {string} id
   * @param {EngineUpdateAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public updateAgent(
    id: string,
    body: EngineUpdateAgentRequest,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).updateAgent(id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Change agent status
   * @param {string} id
   * @param {EngineAgentStatusRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public updateAgentStatus(
    id: string,
    body: EngineAgentStatusRequest,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).updateAgentStatus(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * AgentSkillServiceApi - axios parameter creator
 * @export
 */
export const AgentSkillServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {string} agent_id
     * @param {EngineCreateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill(
      agent_id: string,
      body: EngineCreateAgentSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling createAgentSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agent_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateAgentSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling deleteAgentSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling readAgentSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill(
      agent_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling searchAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agent_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsSkill
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupAgentNotExistsSkill(
      agent_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling searchLookupAgentNotExistsSkill.'
        )
      }
      const localVarPath = `/call_center/lookups/agents/skills/{agent_id}`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agent_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill(
      agent_id: string,
      id: string,
      body: EngineUpdateAgentSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling updateAgentSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgentSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateAgentSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AgentSkillServiceApi - functional programming interface
 * @export
 */
export const AgentSkillServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {string} agent_id
     * @param {EngineCreateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill(
      agent_id: string,
      body: EngineCreateAgentSkillRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).createAgentSkill(agent_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).deleteAgentSkill(agent_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).readAgentSkill(agent_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill(
      agent_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgentSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).searchAgentSkill(agent_id, page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsSkill
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupAgentNotExistsSkill(
      agent_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).searchLookupAgentNotExistsSkill(
        agent_id,
        page,
        size,
        q,
        domain_id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill(
      agent_id: string,
      id: string,
      body: EngineUpdateAgentSkillRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).updateAgentSkill(agent_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AgentSkillServiceApi - factory interface
 * @export
 */
export const AgentSkillServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {string} agent_id
     * @param {EngineCreateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill(
      agent_id: string,
      body: EngineCreateAgentSkillRequest,
      options?: any
    ) {
      return AgentSkillServiceApiFp(configuration).createAgentSkill(
        agent_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentSkillServiceApiFp(configuration).deleteAgentSkill(
        agent_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentSkillServiceApiFp(configuration).readAgentSkill(
        agent_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill(
      agent_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentSkillServiceApiFp(configuration).searchAgentSkill(
        agent_id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsSkill
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupAgentNotExistsSkill(
      agent_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentSkillServiceApiFp(
        configuration
      ).searchLookupAgentNotExistsSkill(
        agent_id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill(
      agent_id: string,
      id: string,
      body: EngineUpdateAgentSkillRequest,
      options?: any
    ) {
      return AgentSkillServiceApiFp(configuration).updateAgentSkill(
        agent_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * AgentSkillServiceApi - object-oriented interface
 * @export
 * @class AgentSkillServiceApi
 * @extends {BaseAPI}
 */
export class AgentSkillServiceApi extends BaseAPI {
  /**
   *
   * @summary Create AgentSkill
   * @param {string} agent_id
   * @param {EngineCreateAgentSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public createAgentSkill(
    agent_id: string,
    body: EngineCreateAgentSkillRequest,
    options?: any
  ) {
    return AgentSkillServiceApiFp(this.configuration).createAgentSkill(
      agent_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove AgentSkill
   * @param {string} agent_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public deleteAgentSkill(
    agent_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentSkillServiceApiFp(this.configuration).deleteAgentSkill(
      agent_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary AgentSkill item
   * @param {string} agent_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public readAgentSkill(
    agent_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentSkillServiceApiFp(this.configuration).readAgentSkill(
      agent_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of AgentSkill
   * @param {string} agent_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public searchAgentSkill(
    agent_id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentSkillServiceApiFp(this.configuration).searchAgentSkill(
      agent_id,
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary SearchLookupAgentNotExistsSkill
   * @param {string} agent_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public searchLookupAgentNotExistsSkill(
    agent_id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentSkillServiceApiFp(
      this.configuration
    ).searchLookupAgentNotExistsSkill(
      agent_id,
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update AgentSkill
   * @param {string} agent_id
   * @param {string} id
   * @param {EngineUpdateAgentSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public updateAgentSkill(
    agent_id: string,
    id: string,
    body: EngineUpdateAgentSkillRequest,
    options?: any
  ) {
    return AgentSkillServiceApiFp(this.configuration).updateAgentSkill(
      agent_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * AgentTeamServiceApi - axios parameter creator
 * @export
 */
export const AgentTeamServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam(
      body: EngineCreateAgentTeamRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateAgentTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/teams`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {string} id
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam(
      id: string,
      body: EngineUpdateAgentTeamRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgentTeam.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateAgentTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AgentTeamServiceApi - functional programming interface
 * @export
 */
export const AgentTeamServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam(
      body: EngineCreateAgentTeamRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentTeam> {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).createAgentTeam(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentTeam> {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteAgentTeam(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentTeam> {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).readAgentTeam(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgentTeam> {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).searchAgentTeam(page, size, q, domain_id, fields, sort, id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {string} id
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam(
      id: string,
      body: EngineUpdateAgentTeamRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentTeam> {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).updateAgentTeam(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AgentTeamServiceApi - factory interface
 * @export
 */
export const AgentTeamServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any) {
      return AgentTeamServiceApiFp(configuration).createAgentTeam(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam(id: string, domain_id?: string, options?: any) {
      return AgentTeamServiceApiFp(configuration).deleteAgentTeam(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam(id: string, domain_id?: string, options?: any) {
      return AgentTeamServiceApiFp(configuration).readAgentTeam(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      options?: any
    ) {
      return AgentTeamServiceApiFp(configuration).searchAgentTeam(
        page,
        size,
        q,
        domain_id,
        fields,
        sort,
        id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {string} id
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam(
      id: string,
      body: EngineUpdateAgentTeamRequest,
      options?: any
    ) {
      return AgentTeamServiceApiFp(configuration).updateAgentTeam(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * AgentTeamServiceApi - object-oriented interface
 * @export
 * @class AgentTeamServiceApi
 * @extends {BaseAPI}
 */
export class AgentTeamServiceApi extends BaseAPI {
  /**
   *
   * @summary Create AgentTeam
   * @param {EngineCreateAgentTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  public createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any) {
    return AgentTeamServiceApiFp(this.configuration).createAgentTeam(
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove AgentTeam
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  public deleteAgentTeam(id: string, domain_id?: string, options?: any) {
    return AgentTeamServiceApiFp(this.configuration).deleteAgentTeam(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary AgentTeam item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  public readAgentTeam(id: string, domain_id?: string, options?: any) {
    return AgentTeamServiceApiFp(this.configuration).readAgentTeam(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of AgentTeam
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {Array<string>} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  public searchAgentTeam(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    fields?: Array<string>,
    sort?: string,
    id?: Array<string>,
    options?: any
  ) {
    return AgentTeamServiceApiFp(this.configuration).searchAgentTeam(
      page,
      size,
      q,
      domain_id,
      fields,
      sort,
      id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update AgentTeam
   * @param {string} id
   * @param {EngineUpdateAgentTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  public updateAgentTeam(
    id: string,
    body: EngineUpdateAgentTeamRequest,
    options?: any
  ) {
    return AgentTeamServiceApiFp(this.configuration).updateAgentTeam(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * BackendProfileServiceApi - axios parameter creator
 * @export
 */
export const BackendProfileServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create BackendProfile
     * @param {StorageCreateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackendProfile(
      body: StorageCreateBackendProfileRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createBackendProfile.'
        )
      }
      const localVarPath = `/storage/backend_profiles`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'StorageCreateBackendProfileRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove BackendProfile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBackendProfile(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteBackendProfile.'
        )
      }
      const localVarPath = `/storage/backend_profiles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch BackendProfile
     * @param {string} id
     * @param {StoragePatchBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchBackendProfile(
      id: string,
      body: StoragePatchBackendProfileRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchBackendProfile.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchBackendProfile.'
        )
      }
      const localVarPath = `/storage/backend_profiles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'StoragePatchBackendProfileRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary BackendProfile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBackendProfile(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readBackendProfile.'
        )
      }
      const localVarPath = `/storage/backend_profiles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of BackendProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBackendProfile(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/storage/backend_profiles`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update BackendProfile
     * @param {string} id
     * @param {StorageUpdateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBackendProfile(
      id: string,
      body: StorageUpdateBackendProfileRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateBackendProfile.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateBackendProfile.'
        )
      }
      const localVarPath = `/storage/backend_profiles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'StorageUpdateBackendProfileRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * BackendProfileServiceApi - functional programming interface
 * @export
 */
export const BackendProfileServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create BackendProfile
     * @param {StorageCreateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackendProfile(
      body: StorageCreateBackendProfileRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<StorageBackendProfile> {
      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(
        configuration
      ).createBackendProfile(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove BackendProfile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBackendProfile(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<StorageBackendProfile> {
      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(
        configuration
      ).deleteBackendProfile(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch BackendProfile
     * @param {string} id
     * @param {StoragePatchBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchBackendProfile(
      id: string,
      body: StoragePatchBackendProfileRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<StorageBackendProfile> {
      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(
        configuration
      ).patchBackendProfile(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary BackendProfile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBackendProfile(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<StorageBackendProfile> {
      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(
        configuration
      ).readBackendProfile(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of BackendProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBackendProfile(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<StorageListBackendProfile> {
      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(
        configuration
      ).searchBackendProfile(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update BackendProfile
     * @param {string} id
     * @param {StorageUpdateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBackendProfile(
      id: string,
      body: StorageUpdateBackendProfileRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<StorageBackendProfile> {
      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(
        configuration
      ).updateBackendProfile(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * BackendProfileServiceApi - factory interface
 * @export
 */
export const BackendProfileServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create BackendProfile
     * @param {StorageCreateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackendProfile(
      body: StorageCreateBackendProfileRequest,
      options?: any
    ) {
      return BackendProfileServiceApiFp(configuration).createBackendProfile(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove BackendProfile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBackendProfile(id: string, domain_id?: string, options?: any) {
      return BackendProfileServiceApiFp(configuration).deleteBackendProfile(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Patch BackendProfile
     * @param {string} id
     * @param {StoragePatchBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchBackendProfile(
      id: string,
      body: StoragePatchBackendProfileRequest,
      options?: any
    ) {
      return BackendProfileServiceApiFp(configuration).patchBackendProfile(
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary BackendProfile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBackendProfile(id: string, domain_id?: string, options?: any) {
      return BackendProfileServiceApiFp(configuration).readBackendProfile(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of BackendProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBackendProfile(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return BackendProfileServiceApiFp(configuration).searchBackendProfile(
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update BackendProfile
     * @param {string} id
     * @param {StorageUpdateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBackendProfile(
      id: string,
      body: StorageUpdateBackendProfileRequest,
      options?: any
    ) {
      return BackendProfileServiceApiFp(configuration).updateBackendProfile(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * BackendProfileServiceApi - object-oriented interface
 * @export
 * @class BackendProfileServiceApi
 * @extends {BaseAPI}
 */
export class BackendProfileServiceApi extends BaseAPI {
  /**
   *
   * @summary Create BackendProfile
   * @param {StorageCreateBackendProfileRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackendProfileServiceApi
   */
  public createBackendProfile(
    body: StorageCreateBackendProfileRequest,
    options?: any
  ) {
    return BackendProfileServiceApiFp(this.configuration).createBackendProfile(
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove BackendProfile
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackendProfileServiceApi
   */
  public deleteBackendProfile(id: string, domain_id?: string, options?: any) {
    return BackendProfileServiceApiFp(this.configuration).deleteBackendProfile(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Patch BackendProfile
   * @param {string} id
   * @param {StoragePatchBackendProfileRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackendProfileServiceApi
   */
  public patchBackendProfile(
    id: string,
    body: StoragePatchBackendProfileRequest,
    options?: any
  ) {
    return BackendProfileServiceApiFp(this.configuration).patchBackendProfile(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary BackendProfile item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackendProfileServiceApi
   */
  public readBackendProfile(id: string, domain_id?: string, options?: any) {
    return BackendProfileServiceApiFp(this.configuration).readBackendProfile(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of BackendProfile
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackendProfileServiceApi
   */
  public searchBackendProfile(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return BackendProfileServiceApiFp(this.configuration).searchBackendProfile(
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update BackendProfile
   * @param {string} id
   * @param {StorageUpdateBackendProfileRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackendProfileServiceApi
   */
  public updateBackendProfile(
    id: string,
    body: StorageUpdateBackendProfileRequest,
    options?: any
  ) {
    return BackendProfileServiceApiFp(this.configuration).updateBackendProfile(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * BucketServiceApi - axios parameter creator
 * @export
 */
export const BucketServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create Bucket
     * @param {EngineCreateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBucket(
      body: EngineCreateBucketRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createBucket.'
        )
      }
      const localVarPath = `/call_center/buckets`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateBucketRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Bucket
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBucket(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteBucket.'
        )
      }
      const localVarPath = `/call_center/buckets/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Bucket item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBucket(id: string, domain_id?: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readBucket.'
        )
      }
      const localVarPath = `/call_center/buckets/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Bucket
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBucket(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/buckets`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Bucket
     * @param {string} id
     * @param {EngineUpdateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBucket(
      id: string,
      body: EngineUpdateBucketRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateBucket.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateBucket.'
        )
      }
      const localVarPath = `/call_center/buckets/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateBucketRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * BucketServiceApi - functional programming interface
 * @export
 */
export const BucketServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Bucket
     * @param {EngineCreateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBucket(
      body: EngineCreateBucketRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineBucket> {
      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(
        configuration
      ).createBucket(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Bucket
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBucket(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineBucket> {
      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(
        configuration
      ).deleteBucket(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Bucket item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBucket(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineBucket> {
      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(
        configuration
      ).readBucket(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Bucket
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBucket(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListBucket> {
      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(
        configuration
      ).searchBucket(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Bucket
     * @param {string} id
     * @param {EngineUpdateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBucket(
      id: string,
      body: EngineUpdateBucketRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineBucket> {
      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(
        configuration
      ).updateBucket(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * BucketServiceApi - factory interface
 * @export
 */
export const BucketServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create Bucket
     * @param {EngineCreateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBucket(body: EngineCreateBucketRequest, options?: any) {
      return BucketServiceApiFp(configuration).createBucket(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove Bucket
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBucket(id: string, domain_id?: string, options?: any) {
      return BucketServiceApiFp(configuration).deleteBucket(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Bucket item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBucket(id: string, domain_id?: string, options?: any) {
      return BucketServiceApiFp(configuration).readBucket(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of Bucket
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBucket(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return BucketServiceApiFp(configuration).searchBucket(
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update Bucket
     * @param {string} id
     * @param {EngineUpdateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBucket(id: string, body: EngineUpdateBucketRequest, options?: any) {
      return BucketServiceApiFp(configuration).updateBucket(id, body, options)(
        axios,
        basePath
      )
    },
  }
}

/**
 * BucketServiceApi - object-oriented interface
 * @export
 * @class BucketServiceApi
 * @extends {BaseAPI}
 */
export class BucketServiceApi extends BaseAPI {
  /**
   *
   * @summary Create Bucket
   * @param {EngineCreateBucketRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BucketServiceApi
   */
  public createBucket(body: EngineCreateBucketRequest, options?: any) {
    return BucketServiceApiFp(this.configuration).createBucket(body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Remove Bucket
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BucketServiceApi
   */
  public deleteBucket(id: string, domain_id?: string, options?: any) {
    return BucketServiceApiFp(this.configuration).deleteBucket(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Bucket item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BucketServiceApi
   */
  public readBucket(id: string, domain_id?: string, options?: any) {
    return BucketServiceApiFp(this.configuration).readBucket(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of Bucket
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BucketServiceApi
   */
  public searchBucket(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return BucketServiceApiFp(this.configuration).searchBucket(
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update Bucket
   * @param {string} id
   * @param {EngineUpdateBucketRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BucketServiceApi
   */
  public updateBucket(
    id: string,
    body: EngineUpdateBucketRequest,
    options?: any
  ) {
    return BucketServiceApiFp(this.configuration).updateBucket(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * CalendarServiceApi - axios parameter creator
 * @export
 */
export const CalendarServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar(
      body: EngineCreateCalendarRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createCalendar.'
        )
      }
      const localVarPath = `/calendars`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateCalendarRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteCalendar.'
        )
      }
      const localVarPath = `/calendars/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readCalendar.'
        )
      }
      const localVarPath = `/calendars/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of calendar
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/calendars`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List timezones
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones(
      page?: number,
      size?: number,
      q?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/calendars/timezones`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update calendar
     * @param {string} id
     * @param {EngineUpdateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar(
      id: string,
      body: EngineUpdateCalendarRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateCalendar.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateCalendar.'
        )
      }
      const localVarPath = `/calendars/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateCalendarRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CalendarServiceApi - functional programming interface
 * @export
 */
export const CalendarServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar(
      body: EngineCreateCalendarRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCalendar> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).createCalendar(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCalendar> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).deleteCalendar(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCalendar> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).readCalendar(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of calendar
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListCalendar> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).searchCalendar(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List timezones
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones(
      page?: number,
      size?: number,
      q?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListTimezoneResponse> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).searchTimezones(page, size, q, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update calendar
     * @param {string} id
     * @param {EngineUpdateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar(
      id: string,
      body: EngineUpdateCalendarRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCalendar> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).updateCalendar(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * CalendarServiceApi - factory interface
 * @export
 */
export const CalendarServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar(body: EngineCreateCalendarRequest, options?: any) {
      return CalendarServiceApiFp(configuration).createCalendar(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar(id: string, domain_id?: string, options?: any) {
      return CalendarServiceApiFp(configuration).deleteCalendar(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar(id: string, domain_id?: string, options?: any) {
      return CalendarServiceApiFp(configuration).readCalendar(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of calendar
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).searchCalendar(
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List timezones
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones(page?: number, size?: number, q?: string, options?: any) {
      return CalendarServiceApiFp(configuration).searchTimezones(
        page,
        size,
        q,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update calendar
     * @param {string} id
     * @param {EngineUpdateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar(
      id: string,
      body: EngineUpdateCalendarRequest,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).updateCalendar(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * CalendarServiceApi - object-oriented interface
 * @export
 * @class CalendarServiceApi
 * @extends {BaseAPI}
 */
export class CalendarServiceApi extends BaseAPI {
  /**
   *
   * @summary Create calendar
   * @param {EngineCreateCalendarRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public createCalendar(body: EngineCreateCalendarRequest, options?: any) {
    return CalendarServiceApiFp(this.configuration).createCalendar(
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove calendar
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public deleteCalendar(id: string, domain_id?: string, options?: any) {
    return CalendarServiceApiFp(this.configuration).deleteCalendar(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Calendar item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public readCalendar(id: string, domain_id?: string, options?: any) {
    return CalendarServiceApiFp(this.configuration).readCalendar(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of calendar
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public searchCalendar(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).searchCalendar(
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List timezones
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public searchTimezones(
    page?: number,
    size?: number,
    q?: string,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).searchTimezones(
      page,
      size,
      q,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update calendar
   * @param {string} id
   * @param {EngineUpdateCalendarRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public updateCalendar(
    id: string,
    body: EngineUpdateCalendarRequest,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).updateCalendar(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * CallServiceApi - axios parameter creator
 * @export
 */
export const CallServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} id
     * @param {EngineBlindTransferCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blindTransferCall(
      id: string,
      body: EngineBlindTransferCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling blindTransferCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling blindTransferCall.'
        )
      }
      const localVarPath = `/calls/active/{id}/transfer`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineBlindTransferCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create e call
     * @param {EngineCreateCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCall(body: EngineCreateCallRequest, options: any = {}): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createCall.'
        )
      }
      const localVarPath = `/calls`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineDtmfCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dtmfCall(
      id: string,
      body: EngineDtmfCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling dtmfCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling dtmfCall.'
        )
      }
      const localVarPath = `/calls/active/{id}/dtmf`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineDtmfCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineEavesdropCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eavesdropCall(
      id: string,
      body: EngineEavesdropCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling eavesdropCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling eavesdropCall.'
        )
      }
      const localVarPath = `/calls/active/{id}/eavesdrop`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineEavesdropCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineHangupCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hangupCall(
      id: string,
      body: EngineHangupCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling hangupCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling hangupCall.'
        )
      }
      const localVarPath = `/calls/active/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineHangupCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    holdCall(
      id: string,
      body: EngineUserCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling holdCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling holdCall.'
        )
      }
      const localVarPath = `/calls/active/{id}/hold`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUserCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Call item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCall(id: string, domain_id?: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readCall.'
        )
      }
      const localVarPath = `/calls/active/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [created_at_from]
     * @param {string} [created_at_to]
     * @param {Array<string>} [user_id]
     * @param {Array<string>} [agent_id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [team_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [gateway_id]
     * @param {string} [q]
     * @param {string} [duration_from]
     * @param {string} [duration_to]
     * @param {boolean} [skip_parent]
     * @param {string} [parent_id]
     * @param {string} [cause]
     * @param {boolean} [exists_file]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {string} [number]
     * @param {string} [direction]
     * @param {string} [answered_at_from]
     * @param {string} [answered_at_to]
     * @param {boolean} [missed]
     * @param {string} [stored_at_from]
     * @param {string} [stored_at_to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchActiveCall(
      page?: number,
      size?: number,
      created_at_from?: string,
      created_at_to?: string,
      user_id?: Array<string>,
      agent_id?: Array<string>,
      queue_id?: Array<string>,
      team_id?: Array<string>,
      member_id?: Array<string>,
      gateway_id?: Array<string>,
      q?: string,
      duration_from?: string,
      duration_to?: string,
      skip_parent?: boolean,
      parent_id?: string,
      cause?: string,
      exists_file?: boolean,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      number?: string,
      direction?: string,
      answered_at_from?: string,
      answered_at_to?: string,
      missed?: boolean,
      stored_at_from?: string,
      stored_at_to?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/calls/active`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (created_at_from !== undefined) {
        localVarQueryParameter['created_at.from'] = created_at_from
      }

      if (created_at_to !== undefined) {
        localVarQueryParameter['created_at.to'] = created_at_to
      }

      if (user_id) {
        localVarQueryParameter['user_id'] = user_id
      }

      if (agent_id) {
        localVarQueryParameter['agent_id'] = agent_id
      }

      if (queue_id) {
        localVarQueryParameter['queue_id'] = queue_id
      }

      if (team_id) {
        localVarQueryParameter['team_id'] = team_id
      }

      if (member_id) {
        localVarQueryParameter['member_id'] = member_id
      }

      if (gateway_id) {
        localVarQueryParameter['gateway_id'] = gateway_id
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (duration_from !== undefined) {
        localVarQueryParameter['duration.from'] = duration_from
      }

      if (duration_to !== undefined) {
        localVarQueryParameter['duration.to'] = duration_to
      }

      if (skip_parent !== undefined) {
        localVarQueryParameter['skip_parent'] = skip_parent
      }

      if (parent_id !== undefined) {
        localVarQueryParameter['parent_id'] = parent_id
      }

      if (cause !== undefined) {
        localVarQueryParameter['cause'] = cause
      }

      if (exists_file !== undefined) {
        localVarQueryParameter['exists_file'] = exists_file
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (number !== undefined) {
        localVarQueryParameter['number'] = number
      }

      if (direction !== undefined) {
        localVarQueryParameter['direction'] = direction
      }

      if (answered_at_from !== undefined) {
        localVarQueryParameter['answered_at.from'] = answered_at_from
      }

      if (answered_at_to !== undefined) {
        localVarQueryParameter['answered_at.to'] = answered_at_to
      }

      if (missed !== undefined) {
        localVarQueryParameter['missed'] = missed
      }

      if (stored_at_from !== undefined) {
        localVarQueryParameter['stored_at.from'] = stored_at_from
      }

      if (stored_at_to !== undefined) {
        localVarQueryParameter['stored_at.to'] = stored_at_to
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of call
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [created_at_from]
     * @param {string} [created_at_to]
     * @param {Array<string>} [user_id]
     * @param {Array<string>} [agent_id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [team_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [gateway_id]
     * @param {string} [q]
     * @param {string} [duration_from]
     * @param {string} [duration_to]
     * @param {boolean} [skip_parent]
     * @param {string} [parent_id]
     * @param {string} [cause]
     * @param {boolean} [has_file]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {string} [number]
     * @param {string} [direction]
     * @param {string} [answered_at_from]
     * @param {string} [answered_at_to]
     * @param {boolean} [missed]
     * @param {string} [stored_at_from]
     * @param {string} [stored_at_to]
     * @param {Array<string>} [id]
     * @param {Array<string>} [transfer_from]
     * @param {Array<string>} [transfer_to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchHistoryCall(
      page?: number,
      size?: number,
      created_at_from?: string,
      created_at_to?: string,
      user_id?: Array<string>,
      agent_id?: Array<string>,
      queue_id?: Array<string>,
      team_id?: Array<string>,
      member_id?: Array<string>,
      gateway_id?: Array<string>,
      q?: string,
      duration_from?: string,
      duration_to?: string,
      skip_parent?: boolean,
      parent_id?: string,
      cause?: string,
      has_file?: boolean,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      number?: string,
      direction?: string,
      answered_at_from?: string,
      answered_at_to?: string,
      missed?: boolean,
      stored_at_from?: string,
      stored_at_to?: string,
      id?: Array<string>,
      transfer_from?: Array<string>,
      transfer_to?: Array<string>,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/calls/history`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (created_at_from !== undefined) {
        localVarQueryParameter['created_at.from'] = created_at_from
      }

      if (created_at_to !== undefined) {
        localVarQueryParameter['created_at.to'] = created_at_to
      }

      if (user_id) {
        localVarQueryParameter['user_id'] = user_id
      }

      if (agent_id) {
        localVarQueryParameter['agent_id'] = agent_id
      }

      if (queue_id) {
        localVarQueryParameter['queue_id'] = queue_id
      }

      if (team_id) {
        localVarQueryParameter['team_id'] = team_id
      }

      if (member_id) {
        localVarQueryParameter['member_id'] = member_id
      }

      if (gateway_id) {
        localVarQueryParameter['gateway_id'] = gateway_id
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (duration_from !== undefined) {
        localVarQueryParameter['duration.from'] = duration_from
      }

      if (duration_to !== undefined) {
        localVarQueryParameter['duration.to'] = duration_to
      }

      if (skip_parent !== undefined) {
        localVarQueryParameter['skip_parent'] = skip_parent
      }

      if (parent_id !== undefined) {
        localVarQueryParameter['parent_id'] = parent_id
      }

      if (cause !== undefined) {
        localVarQueryParameter['cause'] = cause
      }

      if (has_file !== undefined) {
        localVarQueryParameter['has_file'] = has_file
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (number !== undefined) {
        localVarQueryParameter['number'] = number
      }

      if (direction !== undefined) {
        localVarQueryParameter['direction'] = direction
      }

      if (answered_at_from !== undefined) {
        localVarQueryParameter['answered_at.from'] = answered_at_from
      }

      if (answered_at_to !== undefined) {
        localVarQueryParameter['answered_at.to'] = answered_at_to
      }

      if (missed !== undefined) {
        localVarQueryParameter['missed'] = missed
      }

      if (stored_at_from !== undefined) {
        localVarQueryParameter['stored_at.from'] = stored_at_from
      }

      if (stored_at_to !== undefined) {
        localVarQueryParameter['stored_at.to'] = stored_at_to
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (transfer_from) {
        localVarQueryParameter['transfer_from'] = transfer_from
      }

      if (transfer_to) {
        localVarQueryParameter['transfer_to'] = transfer_to
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unHoldCall(
      id: string,
      body: EngineUserCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling unHoldCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling unHoldCall.'
        )
      }
      const localVarPath = `/calls/active/{id}/unhold`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUserCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CallServiceApi - functional programming interface
 * @export
 */
export const CallServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} id
     * @param {EngineBlindTransferCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blindTransferCall(
      id: string,
      body: EngineBlindTransferCallRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
      const localVarAxiosArgs = CallServiceApiAxiosParamCreator(
        configuration
      ).blindTransferCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create e call
     * @param {EngineCreateCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCall(
      body: EngineCreateCallRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCreateCallResponse> {
      const localVarAxiosArgs = CallServiceApiAxiosParamCreator(
        configuration
      ).createCall(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineDtmfCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dtmfCall(
      id: string,
      body: EngineDtmfCallRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
      const localVarAxiosArgs = CallServiceApiAxiosParamCreator(
        configuration
      ).dtmfCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineEavesdropCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eavesdropCall(
      id: string,
      body: EngineEavesdropCallRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCreateCallResponse> {
      const localVarAxiosArgs = CallServiceApiAxiosParamCreator(
        configuration
      ).eavesdropCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineHangupCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hangupCall(
      id: string,
      body: EngineHangupCallRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
      const localVarAxiosArgs = CallServiceApiAxiosParamCreator(
        configuration
      ).hangupCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    holdCall(
      id: string,
      body: EngineUserCallRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineHoldCallResponse> {
      const localVarAxiosArgs = CallServiceApiAxiosParamCreator(
        configuration
      ).holdCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Call item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCall(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineActiveCall> {
      const localVarAxiosArgs = CallServiceApiAxiosParamCreator(
        configuration
      ).readCall(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [created_at_from]
     * @param {string} [created_at_to]
     * @param {Array<string>} [user_id]
     * @param {Array<string>} [agent_id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [team_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [gateway_id]
     * @param {string} [q]
     * @param {string} [duration_from]
     * @param {string} [duration_to]
     * @param {boolean} [skip_parent]
     * @param {string} [parent_id]
     * @param {string} [cause]
     * @param {boolean} [exists_file]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {string} [number]
     * @param {string} [direction]
     * @param {string} [answered_at_from]
     * @param {string} [answered_at_to]
     * @param {boolean} [missed]
     * @param {string} [stored_at_from]
     * @param {string} [stored_at_to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchActiveCall(
      page?: number,
      size?: number,
      created_at_from?: string,
      created_at_to?: string,
      user_id?: Array<string>,
      agent_id?: Array<string>,
      queue_id?: Array<string>,
      team_id?: Array<string>,
      member_id?: Array<string>,
      gateway_id?: Array<string>,
      q?: string,
      duration_from?: string,
      duration_to?: string,
      skip_parent?: boolean,
      parent_id?: string,
      cause?: string,
      exists_file?: boolean,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      number?: string,
      direction?: string,
      answered_at_from?: string,
      answered_at_to?: string,
      missed?: boolean,
      stored_at_from?: string,
      stored_at_to?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListCall> {
      const localVarAxiosArgs = CallServiceApiAxiosParamCreator(
        configuration
      ).searchActiveCall(
        page,
        size,
        created_at_from,
        created_at_to,
        user_id,
        agent_id,
        queue_id,
        team_id,
        member_id,
        gateway_id,
        q,
        duration_from,
        duration_to,
        skip_parent,
        parent_id,
        cause,
        exists_file,
        fields,
        sort,
        domain_id,
        number,
        direction,
        answered_at_from,
        answered_at_to,
        missed,
        stored_at_from,
        stored_at_to,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of call
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [created_at_from]
     * @param {string} [created_at_to]
     * @param {Array<string>} [user_id]
     * @param {Array<string>} [agent_id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [team_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [gateway_id]
     * @param {string} [q]
     * @param {string} [duration_from]
     * @param {string} [duration_to]
     * @param {boolean} [skip_parent]
     * @param {string} [parent_id]
     * @param {string} [cause]
     * @param {boolean} [has_file]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {string} [number]
     * @param {string} [direction]
     * @param {string} [answered_at_from]
     * @param {string} [answered_at_to]
     * @param {boolean} [missed]
     * @param {string} [stored_at_from]
     * @param {string} [stored_at_to]
     * @param {Array<string>} [id]
     * @param {Array<string>} [transfer_from]
     * @param {Array<string>} [transfer_to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchHistoryCall(
      page?: number,
      size?: number,
      created_at_from?: string,
      created_at_to?: string,
      user_id?: Array<string>,
      agent_id?: Array<string>,
      queue_id?: Array<string>,
      team_id?: Array<string>,
      member_id?: Array<string>,
      gateway_id?: Array<string>,
      q?: string,
      duration_from?: string,
      duration_to?: string,
      skip_parent?: boolean,
      parent_id?: string,
      cause?: string,
      has_file?: boolean,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      number?: string,
      direction?: string,
      answered_at_from?: string,
      answered_at_to?: string,
      missed?: boolean,
      stored_at_from?: string,
      stored_at_to?: string,
      id?: Array<string>,
      transfer_from?: Array<string>,
      transfer_to?: Array<string>,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListHistoryCall> {
      const localVarAxiosArgs = CallServiceApiAxiosParamCreator(
        configuration
      ).searchHistoryCall(
        page,
        size,
        created_at_from,
        created_at_to,
        user_id,
        agent_id,
        queue_id,
        team_id,
        member_id,
        gateway_id,
        q,
        duration_from,
        duration_to,
        skip_parent,
        parent_id,
        cause,
        has_file,
        fields,
        sort,
        domain_id,
        number,
        direction,
        answered_at_from,
        answered_at_to,
        missed,
        stored_at_from,
        stored_at_to,
        id,
        transfer_from,
        transfer_to,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unHoldCall(
      id: string,
      body: EngineUserCallRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineHoldCallResponse> {
      const localVarAxiosArgs = CallServiceApiAxiosParamCreator(
        configuration
      ).unHoldCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * CallServiceApi - factory interface
 * @export
 */
export const CallServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {string} id
     * @param {EngineBlindTransferCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blindTransferCall(
      id: string,
      body: EngineBlindTransferCallRequest,
      options?: any
    ) {
      return CallServiceApiFp(configuration).blindTransferCall(
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Create e call
     * @param {EngineCreateCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCall(body: EngineCreateCallRequest, options?: any) {
      return CallServiceApiFp(configuration).createCall(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @param {string} id
     * @param {EngineDtmfCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dtmfCall(id: string, body: EngineDtmfCallRequest, options?: any) {
      return CallServiceApiFp(configuration).dtmfCall(id, body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @param {string} id
     * @param {EngineEavesdropCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eavesdropCall(id: string, body: EngineEavesdropCallRequest, options?: any) {
      return CallServiceApiFp(configuration).eavesdropCall(id, body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @param {string} id
     * @param {EngineHangupCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hangupCall(id: string, body: EngineHangupCallRequest, options?: any) {
      return CallServiceApiFp(configuration).hangupCall(id, body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    holdCall(id: string, body: EngineUserCallRequest, options?: any) {
      return CallServiceApiFp(configuration).holdCall(id, body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Call item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCall(id: string, domain_id?: string, options?: any) {
      return CallServiceApiFp(configuration).readCall(id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [created_at_from]
     * @param {string} [created_at_to]
     * @param {Array<string>} [user_id]
     * @param {Array<string>} [agent_id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [team_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [gateway_id]
     * @param {string} [q]
     * @param {string} [duration_from]
     * @param {string} [duration_to]
     * @param {boolean} [skip_parent]
     * @param {string} [parent_id]
     * @param {string} [cause]
     * @param {boolean} [exists_file]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {string} [number]
     * @param {string} [direction]
     * @param {string} [answered_at_from]
     * @param {string} [answered_at_to]
     * @param {boolean} [missed]
     * @param {string} [stored_at_from]
     * @param {string} [stored_at_to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchActiveCall(
      page?: number,
      size?: number,
      created_at_from?: string,
      created_at_to?: string,
      user_id?: Array<string>,
      agent_id?: Array<string>,
      queue_id?: Array<string>,
      team_id?: Array<string>,
      member_id?: Array<string>,
      gateway_id?: Array<string>,
      q?: string,
      duration_from?: string,
      duration_to?: string,
      skip_parent?: boolean,
      parent_id?: string,
      cause?: string,
      exists_file?: boolean,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      number?: string,
      direction?: string,
      answered_at_from?: string,
      answered_at_to?: string,
      missed?: boolean,
      stored_at_from?: string,
      stored_at_to?: string,
      options?: any
    ) {
      return CallServiceApiFp(configuration).searchActiveCall(
        page,
        size,
        created_at_from,
        created_at_to,
        user_id,
        agent_id,
        queue_id,
        team_id,
        member_id,
        gateway_id,
        q,
        duration_from,
        duration_to,
        skip_parent,
        parent_id,
        cause,
        exists_file,
        fields,
        sort,
        domain_id,
        number,
        direction,
        answered_at_from,
        answered_at_to,
        missed,
        stored_at_from,
        stored_at_to,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of call
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [created_at_from]
     * @param {string} [created_at_to]
     * @param {Array<string>} [user_id]
     * @param {Array<string>} [agent_id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [team_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [gateway_id]
     * @param {string} [q]
     * @param {string} [duration_from]
     * @param {string} [duration_to]
     * @param {boolean} [skip_parent]
     * @param {string} [parent_id]
     * @param {string} [cause]
     * @param {boolean} [has_file]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {string} [number]
     * @param {string} [direction]
     * @param {string} [answered_at_from]
     * @param {string} [answered_at_to]
     * @param {boolean} [missed]
     * @param {string} [stored_at_from]
     * @param {string} [stored_at_to]
     * @param {Array<string>} [id]
     * @param {Array<string>} [transfer_from]
     * @param {Array<string>} [transfer_to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchHistoryCall(
      page?: number,
      size?: number,
      created_at_from?: string,
      created_at_to?: string,
      user_id?: Array<string>,
      agent_id?: Array<string>,
      queue_id?: Array<string>,
      team_id?: Array<string>,
      member_id?: Array<string>,
      gateway_id?: Array<string>,
      q?: string,
      duration_from?: string,
      duration_to?: string,
      skip_parent?: boolean,
      parent_id?: string,
      cause?: string,
      has_file?: boolean,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      number?: string,
      direction?: string,
      answered_at_from?: string,
      answered_at_to?: string,
      missed?: boolean,
      stored_at_from?: string,
      stored_at_to?: string,
      id?: Array<string>,
      transfer_from?: Array<string>,
      transfer_to?: Array<string>,
      options?: any
    ) {
      return CallServiceApiFp(configuration).searchHistoryCall(
        page,
        size,
        created_at_from,
        created_at_to,
        user_id,
        agent_id,
        queue_id,
        team_id,
        member_id,
        gateway_id,
        q,
        duration_from,
        duration_to,
        skip_parent,
        parent_id,
        cause,
        has_file,
        fields,
        sort,
        domain_id,
        number,
        direction,
        answered_at_from,
        answered_at_to,
        missed,
        stored_at_from,
        stored_at_to,
        id,
        transfer_from,
        transfer_to,
        options
      )(axios, basePath)
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unHoldCall(id: string, body: EngineUserCallRequest, options?: any) {
      return CallServiceApiFp(configuration).unHoldCall(id, body, options)(
        axios,
        basePath
      )
    },
  }
}

/**
 * CallServiceApi - object-oriented interface
 * @export
 * @class CallServiceApi
 * @extends {BaseAPI}
 */
export class CallServiceApi extends BaseAPI {
  /**
   *
   * @param {string} id
   * @param {EngineBlindTransferCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CallServiceApi
   */
  public blindTransferCall(
    id: string,
    body: EngineBlindTransferCallRequest,
    options?: any
  ) {
    return CallServiceApiFp(this.configuration).blindTransferCall(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Create e call
   * @param {EngineCreateCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CallServiceApi
   */
  public createCall(body: EngineCreateCallRequest, options?: any) {
    return CallServiceApiFp(this.configuration).createCall(body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @param {string} id
   * @param {EngineDtmfCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CallServiceApi
   */
  public dtmfCall(id: string, body: EngineDtmfCallRequest, options?: any) {
    return CallServiceApiFp(this.configuration).dtmfCall(id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @param {string} id
   * @param {EngineEavesdropCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CallServiceApi
   */
  public eavesdropCall(
    id: string,
    body: EngineEavesdropCallRequest,
    options?: any
  ) {
    return CallServiceApiFp(this.configuration).eavesdropCall(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @param {string} id
   * @param {EngineHangupCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CallServiceApi
   */
  public hangupCall(id: string, body: EngineHangupCallRequest, options?: any) {
    return CallServiceApiFp(this.configuration).hangupCall(id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @param {string} id
   * @param {EngineUserCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CallServiceApi
   */
  public holdCall(id: string, body: EngineUserCallRequest, options?: any) {
    return CallServiceApiFp(this.configuration).holdCall(id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Call item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CallServiceApi
   */
  public readCall(id: string, domain_id?: string, options?: any) {
    return CallServiceApiFp(this.configuration).readCall(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [created_at_from]
   * @param {string} [created_at_to]
   * @param {Array<string>} [user_id]
   * @param {Array<string>} [agent_id]
   * @param {Array<string>} [queue_id]
   * @param {Array<string>} [team_id]
   * @param {Array<string>} [member_id]
   * @param {Array<string>} [gateway_id]
   * @param {string} [q]
   * @param {string} [duration_from]
   * @param {string} [duration_to]
   * @param {boolean} [skip_parent]
   * @param {string} [parent_id]
   * @param {string} [cause]
   * @param {boolean} [exists_file]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {string} [domain_id]
   * @param {string} [number]
   * @param {string} [direction]
   * @param {string} [answered_at_from]
   * @param {string} [answered_at_to]
   * @param {boolean} [missed]
   * @param {string} [stored_at_from]
   * @param {string} [stored_at_to]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CallServiceApi
   */
  public searchActiveCall(
    page?: number,
    size?: number,
    created_at_from?: string,
    created_at_to?: string,
    user_id?: Array<string>,
    agent_id?: Array<string>,
    queue_id?: Array<string>,
    team_id?: Array<string>,
    member_id?: Array<string>,
    gateway_id?: Array<string>,
    q?: string,
    duration_from?: string,
    duration_to?: string,
    skip_parent?: boolean,
    parent_id?: string,
    cause?: string,
    exists_file?: boolean,
    fields?: Array<string>,
    sort?: string,
    domain_id?: string,
    number?: string,
    direction?: string,
    answered_at_from?: string,
    answered_at_to?: string,
    missed?: boolean,
    stored_at_from?: string,
    stored_at_to?: string,
    options?: any
  ) {
    return CallServiceApiFp(this.configuration).searchActiveCall(
      page,
      size,
      created_at_from,
      created_at_to,
      user_id,
      agent_id,
      queue_id,
      team_id,
      member_id,
      gateway_id,
      q,
      duration_from,
      duration_to,
      skip_parent,
      parent_id,
      cause,
      exists_file,
      fields,
      sort,
      domain_id,
      number,
      direction,
      answered_at_from,
      answered_at_to,
      missed,
      stored_at_from,
      stored_at_to,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of call
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [created_at_from]
   * @param {string} [created_at_to]
   * @param {Array<string>} [user_id]
   * @param {Array<string>} [agent_id]
   * @param {Array<string>} [queue_id]
   * @param {Array<string>} [team_id]
   * @param {Array<string>} [member_id]
   * @param {Array<string>} [gateway_id]
   * @param {string} [q]
   * @param {string} [duration_from]
   * @param {string} [duration_to]
   * @param {boolean} [skip_parent]
   * @param {string} [parent_id]
   * @param {string} [cause]
   * @param {boolean} [has_file]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {string} [domain_id]
   * @param {string} [number]
   * @param {string} [direction]
   * @param {string} [answered_at_from]
   * @param {string} [answered_at_to]
   * @param {boolean} [missed]
   * @param {string} [stored_at_from]
   * @param {string} [stored_at_to]
   * @param {Array<string>} [id]
   * @param {Array<string>} [transfer_from]
   * @param {Array<string>} [transfer_to]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CallServiceApi
   */
  public searchHistoryCall(
    page?: number,
    size?: number,
    created_at_from?: string,
    created_at_to?: string,
    user_id?: Array<string>,
    agent_id?: Array<string>,
    queue_id?: Array<string>,
    team_id?: Array<string>,
    member_id?: Array<string>,
    gateway_id?: Array<string>,
    q?: string,
    duration_from?: string,
    duration_to?: string,
    skip_parent?: boolean,
    parent_id?: string,
    cause?: string,
    has_file?: boolean,
    fields?: Array<string>,
    sort?: string,
    domain_id?: string,
    number?: string,
    direction?: string,
    answered_at_from?: string,
    answered_at_to?: string,
    missed?: boolean,
    stored_at_from?: string,
    stored_at_to?: string,
    id?: Array<string>,
    transfer_from?: Array<string>,
    transfer_to?: Array<string>,
    options?: any
  ) {
    return CallServiceApiFp(this.configuration).searchHistoryCall(
      page,
      size,
      created_at_from,
      created_at_to,
      user_id,
      agent_id,
      queue_id,
      team_id,
      member_id,
      gateway_id,
      q,
      duration_from,
      duration_to,
      skip_parent,
      parent_id,
      cause,
      has_file,
      fields,
      sort,
      domain_id,
      number,
      direction,
      answered_at_from,
      answered_at_to,
      missed,
      stored_at_from,
      stored_at_to,
      id,
      transfer_from,
      transfer_to,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @param {string} id
   * @param {EngineUserCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CallServiceApi
   */
  public unHoldCall(id: string, body: EngineUserCallRequest, options?: any) {
    return CallServiceApiFp(this.configuration).unHoldCall(id, body, options)(
      this.axios,
      this.basePath
    )
  }
}

/**
 * CommunicationTypeServiceApi - axios parameter creator
 * @export
 */
export const CommunicationTypeServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create CommunicationType
     * @param {EngineCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommunicationType(
      body: EngineCommunicationTypeRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createCommunicationType.'
        )
      }
      const localVarPath = `/call_center/communication_type`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCommunicationTypeRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove CommunicationType
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommunicationType(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteCommunicationType.'
        )
      }
      const localVarPath = `/call_center/communication_type/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary CommunicationType item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCommunicationType(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readCommunicationType.'
        )
      }
      const localVarPath = `/call_center/communication_type/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of CommunicationType
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCommunicationType(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/communication_type`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update CommunicationType
     * @param {string} id
     * @param {EngineUpdateCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCommunicationType(
      id: string,
      body: EngineUpdateCommunicationTypeRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateCommunicationType.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateCommunicationType.'
        )
      }
      const localVarPath = `/call_center/communication_type/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateCommunicationTypeRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CommunicationTypeServiceApi - functional programming interface
 * @export
 */
export const CommunicationTypeServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create CommunicationType
     * @param {EngineCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommunicationType(
      body: EngineCommunicationTypeRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCommunicationType> {
      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(
        configuration
      ).createCommunicationType(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove CommunicationType
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommunicationType(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCommunicationType> {
      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(
        configuration
      ).deleteCommunicationType(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary CommunicationType item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCommunicationType(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCommunicationType> {
      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(
        configuration
      ).readCommunicationType(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of CommunicationType
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCommunicationType(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListCommunicationType> {
      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(
        configuration
      ).searchCommunicationType(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update CommunicationType
     * @param {string} id
     * @param {EngineUpdateCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCommunicationType(
      id: string,
      body: EngineUpdateCommunicationTypeRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCommunicationType> {
      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(
        configuration
      ).updateCommunicationType(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * CommunicationTypeServiceApi - factory interface
 * @export
 */
export const CommunicationTypeServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create CommunicationType
     * @param {EngineCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommunicationType(
      body: EngineCommunicationTypeRequest,
      options?: any
    ) {
      return CommunicationTypeServiceApiFp(
        configuration
      ).createCommunicationType(body, options)(axios, basePath)
    },
    /**
     *
     * @summary Remove CommunicationType
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommunicationType(id: string, domain_id?: string, options?: any) {
      return CommunicationTypeServiceApiFp(
        configuration
      ).deleteCommunicationType(id, domain_id, options)(axios, basePath)
    },
    /**
     *
     * @summary CommunicationType item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCommunicationType(id: string, domain_id?: string, options?: any) {
      return CommunicationTypeServiceApiFp(configuration).readCommunicationType(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of CommunicationType
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCommunicationType(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return CommunicationTypeServiceApiFp(
        configuration
      ).searchCommunicationType(page, size, q, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Update CommunicationType
     * @param {string} id
     * @param {EngineUpdateCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCommunicationType(
      id: string,
      body: EngineUpdateCommunicationTypeRequest,
      options?: any
    ) {
      return CommunicationTypeServiceApiFp(
        configuration
      ).updateCommunicationType(id, body, options)(axios, basePath)
    },
  }
}

/**
 * CommunicationTypeServiceApi - object-oriented interface
 * @export
 * @class CommunicationTypeServiceApi
 * @extends {BaseAPI}
 */
export class CommunicationTypeServiceApi extends BaseAPI {
  /**
   *
   * @summary Create CommunicationType
   * @param {EngineCommunicationTypeRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunicationTypeServiceApi
   */
  public createCommunicationType(
    body: EngineCommunicationTypeRequest,
    options?: any
  ) {
    return CommunicationTypeServiceApiFp(
      this.configuration
    ).createCommunicationType(body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove CommunicationType
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunicationTypeServiceApi
   */
  public deleteCommunicationType(
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return CommunicationTypeServiceApiFp(
      this.configuration
    ).deleteCommunicationType(id, domain_id, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary CommunicationType item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunicationTypeServiceApi
   */
  public readCommunicationType(id: string, domain_id?: string, options?: any) {
    return CommunicationTypeServiceApiFp(
      this.configuration
    ).readCommunicationType(id, domain_id, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of CommunicationType
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunicationTypeServiceApi
   */
  public searchCommunicationType(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return CommunicationTypeServiceApiFp(
      this.configuration
    ).searchCommunicationType(page, size, q, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Update CommunicationType
   * @param {string} id
   * @param {EngineUpdateCommunicationTypeRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunicationTypeServiceApi
   */
  public updateCommunicationType(
    id: string,
    body: EngineUpdateCommunicationTypeRequest,
    options?: any
  ) {
    return CommunicationTypeServiceApiFp(
      this.configuration
    ).updateCommunicationType(id, body, options)(this.axios, this.basePath)
  }
}

/**
 * EmailProfileServiceApi - axios parameter creator
 * @export
 */
export const EmailProfileServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create EmailProfile
     * @param {EngineCreateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmailProfile(
      body: EngineCreateEmailProfileRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createEmailProfile.'
        )
      }
      const localVarPath = `/email/profile`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateEmailProfileRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove EmailProfile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmailProfile(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteEmailProfile.'
        )
      }
      const localVarPath = `/email/profile/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary EmailProfile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readEmailProfile(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readEmailProfile.'
        )
      }
      const localVarPath = `/email/profile/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Search EmailProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchEmailProfile(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/email/profile`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update EmailProfile
     * @param {string} id
     * @param {EngineUpdateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmailProfile(
      id: string,
      body: EngineUpdateEmailProfileRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateEmailProfile.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateEmailProfile.'
        )
      }
      const localVarPath = `/email/profile/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateEmailProfileRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * EmailProfileServiceApi - functional programming interface
 * @export
 */
export const EmailProfileServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create EmailProfile
     * @param {EngineCreateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmailProfile(
      body: EngineCreateEmailProfileRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineEmailProfile> {
      const localVarAxiosArgs = EmailProfileServiceApiAxiosParamCreator(
        configuration
      ).createEmailProfile(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove EmailProfile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmailProfile(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineEmailProfile> {
      const localVarAxiosArgs = EmailProfileServiceApiAxiosParamCreator(
        configuration
      ).deleteEmailProfile(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary EmailProfile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readEmailProfile(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineEmailProfile> {
      const localVarAxiosArgs = EmailProfileServiceApiAxiosParamCreator(
        configuration
      ).readEmailProfile(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Search EmailProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchEmailProfile(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListEmailProfile> {
      const localVarAxiosArgs = EmailProfileServiceApiAxiosParamCreator(
        configuration
      ).searchEmailProfile(page, size, q, domain_id, fields, sort, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update EmailProfile
     * @param {string} id
     * @param {EngineUpdateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmailProfile(
      id: string,
      body: EngineUpdateEmailProfileRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineEmailProfile> {
      const localVarAxiosArgs = EmailProfileServiceApiAxiosParamCreator(
        configuration
      ).updateEmailProfile(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * EmailProfileServiceApi - factory interface
 * @export
 */
export const EmailProfileServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create EmailProfile
     * @param {EngineCreateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmailProfile(body: EngineCreateEmailProfileRequest, options?: any) {
      return EmailProfileServiceApiFp(configuration).createEmailProfile(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove EmailProfile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmailProfile(id: string, domain_id?: string, options?: any) {
      return EmailProfileServiceApiFp(configuration).deleteEmailProfile(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary EmailProfile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readEmailProfile(id: string, domain_id?: string, options?: any) {
      return EmailProfileServiceApiFp(configuration).readEmailProfile(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Search EmailProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchEmailProfile(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      options?: any
    ) {
      return EmailProfileServiceApiFp(configuration).searchEmailProfile(
        page,
        size,
        q,
        domain_id,
        fields,
        sort,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update EmailProfile
     * @param {string} id
     * @param {EngineUpdateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmailProfile(
      id: string,
      body: EngineUpdateEmailProfileRequest,
      options?: any
    ) {
      return EmailProfileServiceApiFp(configuration).updateEmailProfile(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * EmailProfileServiceApi - object-oriented interface
 * @export
 * @class EmailProfileServiceApi
 * @extends {BaseAPI}
 */
export class EmailProfileServiceApi extends BaseAPI {
  /**
   *
   * @summary Create EmailProfile
   * @param {EngineCreateEmailProfileRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailProfileServiceApi
   */
  public createEmailProfile(
    body: EngineCreateEmailProfileRequest,
    options?: any
  ) {
    return EmailProfileServiceApiFp(this.configuration).createEmailProfile(
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove EmailProfile
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailProfileServiceApi
   */
  public deleteEmailProfile(id: string, domain_id?: string, options?: any) {
    return EmailProfileServiceApiFp(this.configuration).deleteEmailProfile(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary EmailProfile item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailProfileServiceApi
   */
  public readEmailProfile(id: string, domain_id?: string, options?: any) {
    return EmailProfileServiceApiFp(this.configuration).readEmailProfile(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Search EmailProfile
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailProfileServiceApi
   */
  public searchEmailProfile(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    fields?: Array<string>,
    sort?: string,
    options?: any
  ) {
    return EmailProfileServiceApiFp(this.configuration).searchEmailProfile(
      page,
      size,
      q,
      domain_id,
      fields,
      sort,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update EmailProfile
   * @param {string} id
   * @param {EngineUpdateEmailProfileRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailProfileServiceApi
   */
  public updateEmailProfile(
    id: string,
    body: EngineUpdateEmailProfileRequest,
    options?: any
  ) {
    return EmailProfileServiceApiFp(this.configuration).updateEmailProfile(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * ListServiceApi - axios parameter creator
 * @export
 */
export const ListServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create List
     * @param {EngineCreateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList(body: EngineCreateListRequest, options: any = {}): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createList.'
        )
      }
      const localVarPath = `/call_center/list`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateListRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create ListCommunication
     * @param {string} list_id
     * @param {EngineCreateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createListCommunication(
      list_id: string,
      body: EngineCreateListCommunicationRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'list_id' is not null or undefined
      if (list_id === null || list_id === undefined) {
        throw new RequiredError(
          'list_id',
          'Required parameter list_id was null or undefined when calling createListCommunication.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createListCommunication.'
        )
      }
      const localVarPath = `/call_center/list/{list_id}/communication`.replace(
        `{${'list_id'}}`,
        encodeURIComponent(String(list_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateListCommunicationRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove list
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteList(id: string, domain_id?: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteList.'
        )
      }
      const localVarPath = `/call_center/list/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove ListCommunication
     * @param {string} list_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteListCommunication(
      list_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'list_id' is not null or undefined
      if (list_id === null || list_id === undefined) {
        throw new RequiredError(
          'list_id',
          'Required parameter list_id was null or undefined when calling deleteListCommunication.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteListCommunication.'
        )
      }
      const localVarPath = `/call_center/list/{list_id}/communication/{id}`
        .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readList(id: string, domain_id?: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readList.'
        )
      }
      const localVarPath = `/call_center/list/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List item
     * @param {string} list_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readListCommunication(
      list_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'list_id' is not null or undefined
      if (list_id === null || list_id === undefined) {
        throw new RequiredError(
          'list_id',
          'Required parameter list_id was null or undefined when calling readListCommunication.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readListCommunication.'
        )
      }
      const localVarPath = `/call_center/list/{list_id}/communication/{id}`
        .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of List
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchList(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/list`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of List
     * @param {string} list_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchListCommunication(
      list_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'list_id' is not null or undefined
      if (list_id === null || list_id === undefined) {
        throw new RequiredError(
          'list_id',
          'Required parameter list_id was null or undefined when calling searchListCommunication.'
        )
      }
      const localVarPath = `/call_center/list/{list_id}/communication`.replace(
        `{${'list_id'}}`,
        encodeURIComponent(String(list_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update list
     * @param {string} id
     * @param {EngineUpdateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateList(
      id: string,
      body: EngineUpdateListRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateList.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateList.'
        )
      }
      const localVarPath = `/call_center/list/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateListRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update ListCommunication
     * @param {string} list_id
     * @param {string} id
     * @param {EngineUpdateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateListCommunication(
      list_id: string,
      id: string,
      body: EngineUpdateListCommunicationRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'list_id' is not null or undefined
      if (list_id === null || list_id === undefined) {
        throw new RequiredError(
          'list_id',
          'Required parameter list_id was null or undefined when calling updateListCommunication.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateListCommunication.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateListCommunication.'
        )
      }
      const localVarPath = `/call_center/list/{list_id}/communication/{id}`
        .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateListCommunicationRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ListServiceApi - functional programming interface
 * @export
 */
export const ListServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create List
     * @param {EngineCreateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList(
      body: EngineCreateListRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {
      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(
        configuration
      ).createList(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create ListCommunication
     * @param {string} list_id
     * @param {EngineCreateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createListCommunication(
      list_id: string,
      body: EngineCreateListCommunicationRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListCommunication> {
      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(
        configuration
      ).createListCommunication(list_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove list
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteList(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {
      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(
        configuration
      ).deleteList(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove ListCommunication
     * @param {string} list_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteListCommunication(
      list_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListCommunication> {
      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(
        configuration
      ).deleteListCommunication(list_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readList(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {
      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(
        configuration
      ).readList(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List item
     * @param {string} list_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readListCommunication(
      list_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListCommunication> {
      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(
        configuration
      ).readListCommunication(list_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of List
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchList(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListOfList> {
      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(
        configuration
      ).searchList(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of List
     * @param {string} list_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchListCommunication(
      list_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListOfListCommunication> {
      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(
        configuration
      ).searchListCommunication(list_id, page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update list
     * @param {string} id
     * @param {EngineUpdateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateList(
      id: string,
      body: EngineUpdateListRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {
      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(
        configuration
      ).updateList(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update ListCommunication
     * @param {string} list_id
     * @param {string} id
     * @param {EngineUpdateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateListCommunication(
      list_id: string,
      id: string,
      body: EngineUpdateListCommunicationRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListCommunication> {
      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(
        configuration
      ).updateListCommunication(list_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * ListServiceApi - factory interface
 * @export
 */
export const ListServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create List
     * @param {EngineCreateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList(body: EngineCreateListRequest, options?: any) {
      return ListServiceApiFp(configuration).createList(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Create ListCommunication
     * @param {string} list_id
     * @param {EngineCreateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createListCommunication(
      list_id: string,
      body: EngineCreateListCommunicationRequest,
      options?: any
    ) {
      return ListServiceApiFp(configuration).createListCommunication(
        list_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove list
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteList(id: string, domain_id?: string, options?: any) {
      return ListServiceApiFp(configuration).deleteList(id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove ListCommunication
     * @param {string} list_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteListCommunication(
      list_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return ListServiceApiFp(configuration).deleteListCommunication(
        list_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readList(id: string, domain_id?: string, options?: any) {
      return ListServiceApiFp(configuration).readList(id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List item
     * @param {string} list_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readListCommunication(
      list_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return ListServiceApiFp(configuration).readListCommunication(
        list_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of List
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchList(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return ListServiceApiFp(configuration).searchList(
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of List
     * @param {string} list_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchListCommunication(
      list_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return ListServiceApiFp(configuration).searchListCommunication(
        list_id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update list
     * @param {string} id
     * @param {EngineUpdateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateList(id: string, body: EngineUpdateListRequest, options?: any) {
      return ListServiceApiFp(configuration).updateList(id, body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Update ListCommunication
     * @param {string} list_id
     * @param {string} id
     * @param {EngineUpdateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateListCommunication(
      list_id: string,
      id: string,
      body: EngineUpdateListCommunicationRequest,
      options?: any
    ) {
      return ListServiceApiFp(configuration).updateListCommunication(
        list_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * ListServiceApi - object-oriented interface
 * @export
 * @class ListServiceApi
 * @extends {BaseAPI}
 */
export class ListServiceApi extends BaseAPI {
  /**
   *
   * @summary Create List
   * @param {EngineCreateListRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListServiceApi
   */
  public createList(body: EngineCreateListRequest, options?: any) {
    return ListServiceApiFp(this.configuration).createList(body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Create ListCommunication
   * @param {string} list_id
   * @param {EngineCreateListCommunicationRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListServiceApi
   */
  public createListCommunication(
    list_id: string,
    body: EngineCreateListCommunicationRequest,
    options?: any
  ) {
    return ListServiceApiFp(this.configuration).createListCommunication(
      list_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove list
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListServiceApi
   */
  public deleteList(id: string, domain_id?: string, options?: any) {
    return ListServiceApiFp(this.configuration).deleteList(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove ListCommunication
   * @param {string} list_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListServiceApi
   */
  public deleteListCommunication(
    list_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return ListServiceApiFp(this.configuration).deleteListCommunication(
      list_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListServiceApi
   */
  public readList(id: string, domain_id?: string, options?: any) {
    return ListServiceApiFp(this.configuration).readList(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List item
   * @param {string} list_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListServiceApi
   */
  public readListCommunication(
    list_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return ListServiceApiFp(this.configuration).readListCommunication(
      list_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of List
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListServiceApi
   */
  public searchList(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return ListServiceApiFp(this.configuration).searchList(
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of List
   * @param {string} list_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListServiceApi
   */
  public searchListCommunication(
    list_id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return ListServiceApiFp(this.configuration).searchListCommunication(
      list_id,
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update list
   * @param {string} id
   * @param {EngineUpdateListRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListServiceApi
   */
  public updateList(id: string, body: EngineUpdateListRequest, options?: any) {
    return ListServiceApiFp(this.configuration).updateList(id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Update ListCommunication
   * @param {string} list_id
   * @param {string} id
   * @param {EngineUpdateListCommunicationRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListServiceApi
   */
  public updateListCommunication(
    list_id: string,
    id: string,
    body: EngineUpdateListCommunicationRequest,
    options?: any
  ) {
    return ListServiceApiFp(this.configuration).updateListCommunication(
      list_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * MediaFileServiceApi - axios parameter creator
 * @export
 */
export const MediaFileServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Remove MediaFile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMediaFile(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteMediaFile.'
        )
      }
      const localVarPath = `/storage/media/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary MediaFile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMediaFile(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readMediaFile.'
        )
      }
      const localVarPath = `/storage/media/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Search MediaFile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMediaFile(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/storage/media`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * MediaFileServiceApi - functional programming interface
 * @export
 */
export const MediaFileServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Remove MediaFile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMediaFile(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<StorageMediaFile> {
      const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(
        configuration
      ).deleteMediaFile(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary MediaFile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMediaFile(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<StorageMediaFile> {
      const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(
        configuration
      ).readMediaFile(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Search MediaFile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMediaFile(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<StorageListMedia> {
      const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(
        configuration
      ).searchMediaFile(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * MediaFileServiceApi - factory interface
 * @export
 */
export const MediaFileServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Remove MediaFile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMediaFile(id: string, domain_id?: string, options?: any) {
      return MediaFileServiceApiFp(configuration).deleteMediaFile(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary MediaFile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMediaFile(id: string, domain_id?: string, options?: any) {
      return MediaFileServiceApiFp(configuration).readMediaFile(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Search MediaFile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMediaFile(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return MediaFileServiceApiFp(configuration).searchMediaFile(
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
  }
}

/**
 * MediaFileServiceApi - object-oriented interface
 * @export
 * @class MediaFileServiceApi
 * @extends {BaseAPI}
 */
export class MediaFileServiceApi extends BaseAPI {
  /**
   *
   * @summary Remove MediaFile
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MediaFileServiceApi
   */
  public deleteMediaFile(id: string, domain_id?: string, options?: any) {
    return MediaFileServiceApiFp(this.configuration).deleteMediaFile(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary MediaFile item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MediaFileServiceApi
   */
  public readMediaFile(id: string, domain_id?: string, options?: any) {
    return MediaFileServiceApiFp(this.configuration).readMediaFile(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Search MediaFile
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MediaFileServiceApi
   */
  public searchMediaFile(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return MediaFileServiceApiFp(this.configuration).searchMediaFile(
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * MemberServiceApi - axios parameter creator
 * @export
 */
export const MemberServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} queue_id
     * @param {number} member_id
     * @param {number} attempt_id
     * @param {EngineAttemptResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptResult(
      queue_id: number,
      member_id: number,
      attempt_id: number,
      body: EngineAttemptResultRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling attemptResult.'
        )
      }
      // verify required parameter 'member_id' is not null or undefined
      if (member_id === null || member_id === undefined) {
        throw new RequiredError(
          'member_id',
          'Required parameter member_id was null or undefined when calling attemptResult.'
        )
      }
      // verify required parameter 'attempt_id' is not null or undefined
      if (attempt_id === null || attempt_id === undefined) {
        throw new RequiredError(
          'attempt_id',
          'Required parameter attempt_id was null or undefined when calling attemptResult.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling attemptResult.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{member_id}/attempts/{attempt_id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'member_id'}}`, encodeURIComponent(String(member_id)))
        .replace(`{${'attempt_id'}}`, encodeURIComponent(String(attempt_id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineAttemptResultRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Offline queue
     * @param {string} queue_id
     * @param {string} member_id
     * @param {EngineCreateAttemptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAttempt(
      queue_id: string,
      member_id: string,
      body: EngineCreateAttemptRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling createAttempt.'
        )
      }
      // verify required parameter 'member_id' is not null or undefined
      if (member_id === null || member_id === undefined) {
        throw new RequiredError(
          'member_id',
          'Required parameter member_id was null or undefined when calling createAttempt.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAttempt.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{member_id}/attempts`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'member_id'}}`, encodeURIComponent(String(member_id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateAttemptRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create Member
     * @param {string} queue_id
     * @param {EngineCreateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember(
      queue_id: string,
      body: EngineCreateMemberRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling createMember.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createMember.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateMemberRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create Member
     * @param {string} queue_id
     * @param {EngineCreateMemberBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMemberBulk(
      queue_id: string,
      body: EngineCreateMemberBulkRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling createMemberBulk.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createMemberBulk.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/bulk`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateMemberBulkRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary DeleteMember
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember(
      queue_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling deleteMember.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteMember.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary DeleteMembers
     * @param {string} queue_id
     * @param {EngineDeleteMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMembers(
      queue_id: string,
      body: EngineDeleteMembersRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling deleteMembers.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling deleteMembers.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineDeleteMembersRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch Member
     * @param {string} queue_id
     * @param {string} id
     * @param {EnginePatchMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchMember(
      queue_id: string,
      id: string,
      body: EnginePatchMemberRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling patchMember.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchMember.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchMember.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EnginePatchMemberRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMember(
      queue_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling readMember.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readMember.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [bucket_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [agent_id]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttempts(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      id?: Array<string>,
      queue_id?: Array<string>,
      bucket_id?: Array<string>,
      member_id?: Array<string>,
      agent_id?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/queues/attempts/active`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (joined_at_from !== undefined) {
        localVarQueryParameter['joined_at.from'] = joined_at_from
      }

      if (joined_at_to !== undefined) {
        localVarQueryParameter['joined_at.to'] = joined_at_to
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (queue_id) {
        localVarQueryParameter['queue_id'] = queue_id
      }

      if (bucket_id) {
        localVarQueryParameter['bucket_id'] = bucket_id
      }

      if (member_id) {
        localVarQueryParameter['member_id'] = member_id
      }

      if (agent_id) {
        localVarQueryParameter['agent_id'] = agent_id
      }

      if (result !== undefined) {
        localVarQueryParameter['result'] = result
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [bucket_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [agent_id]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttemptsHistory(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      id?: Array<string>,
      queue_id?: Array<string>,
      bucket_id?: Array<string>,
      member_id?: Array<string>,
      agent_id?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/queues/attempts/history`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (joined_at_from !== undefined) {
        localVarQueryParameter['joined_at.from'] = joined_at_from
      }

      if (joined_at_to !== undefined) {
        localVarQueryParameter['joined_at.to'] = joined_at_to
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (queue_id) {
        localVarQueryParameter['queue_id'] = queue_id
      }

      if (bucket_id) {
        localVarQueryParameter['bucket_id'] = bucket_id
      }

      if (member_id) {
        localVarQueryParameter['member_id'] = member_id
      }

      if (agent_id) {
        localVarQueryParameter['agent_id'] = agent_id
      }

      if (result !== undefined) {
        localVarQueryParameter['result'] = result
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {string} queue_id
     * @param {string} member_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberAttempts(
      queue_id: string,
      member_id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling searchMemberAttempts.'
        )
      }
      // verify required parameter 'member_id' is not null or undefined
      if (member_id === null || member_id === undefined) {
        throw new RequiredError(
          'member_id',
          'Required parameter member_id was null or undefined when calling searchMemberAttempts.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{member_id}/attempts`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'member_id'}}`, encodeURIComponent(String(member_id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Member
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberInQueue(
      queue_id: string,
      page?: number,
      size?: number,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling searchMemberInQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Search of Member
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [id]
     * @param {string} [queue_id]
     * @param {number} [bucket_id]
     * @param {string} [destination]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMembers(
      page?: number,
      size?: number,
      id?: string,
      queue_id?: string,
      bucket_id?: number,
      destination?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/members`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      if (queue_id !== undefined) {
        localVarQueryParameter['queue_id'] = queue_id
      }

      if (bucket_id !== undefined) {
        localVarQueryParameter['bucket_id'] = bucket_id
      }

      if (destination !== undefined) {
        localVarQueryParameter['destination'] = destination
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary UpdateMember
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember(
      queue_id: string,
      id: string,
      body: EngineUpdateMemberRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling updateMember.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateMember.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateMember.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateMemberRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * MemberServiceApi - functional programming interface
 * @export
 */
export const MemberServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} queue_id
     * @param {number} member_id
     * @param {number} attempt_id
     * @param {EngineAttemptResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptResult(
      queue_id: number,
      member_id: number,
      attempt_id: number,
      body: EngineAttemptResultRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAttemptResultResponse> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).attemptResult(queue_id, member_id, attempt_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Offline queue
     * @param {string} queue_id
     * @param {string} member_id
     * @param {EngineCreateAttemptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAttempt(
      queue_id: string,
      member_id: string,
      body: EngineCreateAttemptRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCreateAttemptResponse> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).createAttempt(queue_id, member_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create Member
     * @param {string} queue_id
     * @param {EngineCreateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember(
      queue_id: string,
      body: EngineCreateMemberRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineMemberInQueue> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).createMember(queue_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create Member
     * @param {string} queue_id
     * @param {EngineCreateMemberBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMemberBulk(
      queue_id: string,
      body: EngineCreateMemberBulkRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineMemberBulkResponse> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).createMemberBulk(queue_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary DeleteMember
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineMemberInQueue> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).deleteMember(queue_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary DeleteMembers
     * @param {string} queue_id
     * @param {EngineDeleteMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMembers(
      queue_id: string,
      body: EngineDeleteMembersRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListMember> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).deleteMembers(queue_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch Member
     * @param {string} queue_id
     * @param {string} id
     * @param {EnginePatchMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchMember(
      queue_id: string,
      id: string,
      body: EnginePatchMemberRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineMemberInQueue> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).patchMember(queue_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMember(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineMemberInQueue> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).readMember(queue_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [bucket_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [agent_id]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttempts(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      id?: Array<string>,
      queue_id?: Array<string>,
      bucket_id?: Array<string>,
      member_id?: Array<string>,
      agent_id?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAttempt> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).searchAttempts(
        page,
        size,
        joined_at_from,
        joined_at_to,
        id,
        queue_id,
        bucket_id,
        member_id,
        agent_id,
        result,
        fields,
        sort,
        domain_id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [bucket_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [agent_id]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttemptsHistory(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      id?: Array<string>,
      queue_id?: Array<string>,
      bucket_id?: Array<string>,
      member_id?: Array<string>,
      agent_id?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListHistoryAttempt> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).searchAttemptsHistory(
        page,
        size,
        joined_at_from,
        joined_at_to,
        id,
        queue_id,
        bucket_id,
        member_id,
        agent_id,
        result,
        fields,
        sort,
        domain_id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {string} queue_id
     * @param {string} member_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberAttempts(
      queue_id: string,
      member_id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListMemberAttempt> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).searchMemberAttempts(queue_id, member_id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Member
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberInQueue(
      queue_id: string,
      page?: number,
      size?: number,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListMember> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).searchMemberInQueue(queue_id, page, size, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Search of Member
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [id]
     * @param {string} [queue_id]
     * @param {number} [bucket_id]
     * @param {string} [destination]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMembers(
      page?: number,
      size?: number,
      id?: string,
      queue_id?: string,
      bucket_id?: number,
      destination?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListMember> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).searchMembers(
        page,
        size,
        id,
        queue_id,
        bucket_id,
        destination,
        domain_id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary UpdateMember
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember(
      queue_id: string,
      id: string,
      body: EngineUpdateMemberRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineMemberInQueue> {
      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(
        configuration
      ).updateMember(queue_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * MemberServiceApi - factory interface
 * @export
 */
export const MemberServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {number} queue_id
     * @param {number} member_id
     * @param {number} attempt_id
     * @param {EngineAttemptResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptResult(
      queue_id: number,
      member_id: number,
      attempt_id: number,
      body: EngineAttemptResultRequest,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).attemptResult(
        queue_id,
        member_id,
        attempt_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Offline queue
     * @param {string} queue_id
     * @param {string} member_id
     * @param {EngineCreateAttemptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAttempt(
      queue_id: string,
      member_id: string,
      body: EngineCreateAttemptRequest,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).createAttempt(
        queue_id,
        member_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Create Member
     * @param {string} queue_id
     * @param {EngineCreateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember(
      queue_id: string,
      body: EngineCreateMemberRequest,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).createMember(
        queue_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Create Member
     * @param {string} queue_id
     * @param {EngineCreateMemberBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMemberBulk(
      queue_id: string,
      body: EngineCreateMemberBulkRequest,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).createMemberBulk(
        queue_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary DeleteMember
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).deleteMember(
        queue_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary DeleteMembers
     * @param {string} queue_id
     * @param {EngineDeleteMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMembers(
      queue_id: string,
      body: EngineDeleteMembersRequest,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).deleteMembers(
        queue_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Patch Member
     * @param {string} queue_id
     * @param {string} id
     * @param {EnginePatchMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchMember(
      queue_id: string,
      id: string,
      body: EnginePatchMemberRequest,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).patchMember(
        queue_id,
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMember(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).readMember(
        queue_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SearchAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [bucket_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [agent_id]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttempts(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      id?: Array<string>,
      queue_id?: Array<string>,
      bucket_id?: Array<string>,
      member_id?: Array<string>,
      agent_id?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).searchAttempts(
        page,
        size,
        joined_at_from,
        joined_at_to,
        id,
        queue_id,
        bucket_id,
        member_id,
        agent_id,
        result,
        fields,
        sort,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queue_id]
     * @param {Array<string>} [bucket_id]
     * @param {Array<string>} [member_id]
     * @param {Array<string>} [agent_id]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttemptsHistory(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      id?: Array<string>,
      queue_id?: Array<string>,
      bucket_id?: Array<string>,
      member_id?: Array<string>,
      agent_id?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domain_id?: string,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).searchAttemptsHistory(
        page,
        size,
        joined_at_from,
        joined_at_to,
        id,
        queue_id,
        bucket_id,
        member_id,
        agent_id,
        result,
        fields,
        sort,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {string} queue_id
     * @param {string} member_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberAttempts(
      queue_id: string,
      member_id: string,
      domain_id?: string,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).searchMemberAttempts(
        queue_id,
        member_id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of Member
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberInQueue(
      queue_id: string,
      page?: number,
      size?: number,
      domain_id?: string,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).searchMemberInQueue(
        queue_id,
        page,
        size,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Search of Member
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [id]
     * @param {string} [queue_id]
     * @param {number} [bucket_id]
     * @param {string} [destination]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMembers(
      page?: number,
      size?: number,
      id?: string,
      queue_id?: string,
      bucket_id?: number,
      destination?: string,
      domain_id?: string,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).searchMembers(
        page,
        size,
        id,
        queue_id,
        bucket_id,
        destination,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary UpdateMember
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember(
      queue_id: string,
      id: string,
      body: EngineUpdateMemberRequest,
      options?: any
    ) {
      return MemberServiceApiFp(configuration).updateMember(
        queue_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * MemberServiceApi - object-oriented interface
 * @export
 * @class MemberServiceApi
 * @extends {BaseAPI}
 */
export class MemberServiceApi extends BaseAPI {
  /**
   *
   * @param {number} queue_id
   * @param {number} member_id
   * @param {number} attempt_id
   * @param {EngineAttemptResultRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public attemptResult(
    queue_id: number,
    member_id: number,
    attempt_id: number,
    body: EngineAttemptResultRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).attemptResult(
      queue_id,
      member_id,
      attempt_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Offline queue
   * @param {string} queue_id
   * @param {string} member_id
   * @param {EngineCreateAttemptRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public createAttempt(
    queue_id: string,
    member_id: string,
    body: EngineCreateAttemptRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).createAttempt(
      queue_id,
      member_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Create Member
   * @param {string} queue_id
   * @param {EngineCreateMemberRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public createMember(
    queue_id: string,
    body: EngineCreateMemberRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).createMember(
      queue_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Create Member
   * @param {string} queue_id
   * @param {EngineCreateMemberBulkRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public createMemberBulk(
    queue_id: string,
    body: EngineCreateMemberBulkRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).createMemberBulk(
      queue_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary DeleteMember
   * @param {string} queue_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public deleteMember(
    queue_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).deleteMember(
      queue_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary DeleteMembers
   * @param {string} queue_id
   * @param {EngineDeleteMembersRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public deleteMembers(
    queue_id: string,
    body: EngineDeleteMembersRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).deleteMembers(
      queue_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Patch Member
   * @param {string} queue_id
   * @param {string} id
   * @param {EnginePatchMemberRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public patchMember(
    queue_id: string,
    id: string,
    body: EnginePatchMemberRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).patchMember(
      queue_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary ReadQueueRouting
   * @param {string} queue_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public readMember(
    queue_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).readMember(
      queue_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary SearchAttempts
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [joined_at_from]
   * @param {string} [joined_at_to]
   * @param {Array<string>} [id]
   * @param {Array<string>} [queue_id]
   * @param {Array<string>} [bucket_id]
   * @param {Array<string>} [member_id]
   * @param {Array<string>} [agent_id]
   * @param {string} [result]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public searchAttempts(
    page?: number,
    size?: number,
    joined_at_from?: string,
    joined_at_to?: string,
    id?: Array<string>,
    queue_id?: Array<string>,
    bucket_id?: Array<string>,
    member_id?: Array<string>,
    agent_id?: Array<string>,
    result?: string,
    fields?: Array<string>,
    sort?: string,
    domain_id?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).searchAttempts(
      page,
      size,
      joined_at_from,
      joined_at_to,
      id,
      queue_id,
      bucket_id,
      member_id,
      agent_id,
      result,
      fields,
      sort,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary SearchMemberAttempts
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [joined_at_from]
   * @param {string} [joined_at_to]
   * @param {Array<string>} [id]
   * @param {Array<string>} [queue_id]
   * @param {Array<string>} [bucket_id]
   * @param {Array<string>} [member_id]
   * @param {Array<string>} [agent_id]
   * @param {string} [result]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public searchAttemptsHistory(
    page?: number,
    size?: number,
    joined_at_from?: string,
    joined_at_to?: string,
    id?: Array<string>,
    queue_id?: Array<string>,
    bucket_id?: Array<string>,
    member_id?: Array<string>,
    agent_id?: Array<string>,
    result?: string,
    fields?: Array<string>,
    sort?: string,
    domain_id?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).searchAttemptsHistory(
      page,
      size,
      joined_at_from,
      joined_at_to,
      id,
      queue_id,
      bucket_id,
      member_id,
      agent_id,
      result,
      fields,
      sort,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary SearchMemberAttempts
   * @param {string} queue_id
   * @param {string} member_id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public searchMemberAttempts(
    queue_id: string,
    member_id: string,
    domain_id?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).searchMemberAttempts(
      queue_id,
      member_id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of Member
   * @param {string} queue_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public searchMemberInQueue(
    queue_id: string,
    page?: number,
    size?: number,
    domain_id?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).searchMemberInQueue(
      queue_id,
      page,
      size,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Search of Member
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [id]
   * @param {string} [queue_id]
   * @param {number} [bucket_id]
   * @param {string} [destination]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public searchMembers(
    page?: number,
    size?: number,
    id?: string,
    queue_id?: string,
    bucket_id?: number,
    destination?: string,
    domain_id?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).searchMembers(
      page,
      size,
      id,
      queue_id,
      bucket_id,
      destination,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary UpdateMember
   * @param {string} queue_id
   * @param {string} id
   * @param {EngineUpdateMemberRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public updateMember(
    queue_id: string,
    id: string,
    body: EngineUpdateMemberRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration).updateMember(
      queue_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * OutboundResourceGroupServiceApi - axios parameter creator
 * @export
 */
export const OutboundResourceGroupServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {EngineCreateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceGroup(
      body: EngineCreateOutboundResourceGroupRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createOutboundResourceGroup.'
        )
      }
      const localVarPath = `/call_center/resource_group`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateOutboundResourceGroupRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {string} group_id
     * @param {EngineCreateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceInGroup(
      group_id: string,
      body: EngineCreateOutboundResourceInGroupRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'group_id' is not null or undefined
      if (group_id === null || group_id === undefined) {
        throw new RequiredError(
          'group_id',
          'Required parameter group_id was null or undefined when calling createOutboundResourceInGroup.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createOutboundResourceInGroup.'
        )
      }
      const localVarPath = `/call_center/resource_group/{group_id}/resource`.replace(
        `{${'group_id'}}`,
        encodeURIComponent(String(group_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateOutboundResourceInGroupRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove OutboundResourceGroup
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceGroup(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteOutboundResourceGroup.'
        )
      }
      const localVarPath = `/call_center/resource_group/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove OutboundResourceInGroup
     * @param {string} group_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceInGroup(
      group_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'group_id' is not null or undefined
      if (group_id === null || group_id === undefined) {
        throw new RequiredError(
          'group_id',
          'Required parameter group_id was null or undefined when calling deleteOutboundResourceInGroup.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteOutboundResourceInGroup.'
        )
      }
      const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`
        .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary OutboundResourceGroup item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceGroup(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readOutboundResourceGroup.'
        )
      }
      const localVarPath = `/call_center/resource_group/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary OutboundResourceInGroup item
     * @param {string} group_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceInGroup(
      group_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'group_id' is not null or undefined
      if (group_id === null || group_id === undefined) {
        throw new RequiredError(
          'group_id',
          'Required parameter group_id was null or undefined when calling readOutboundResourceInGroup.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readOutboundResourceInGroup.'
        )
      }
      const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`
        .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of OutboundResourceGroup
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceGroup(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/resource_group`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of OutboundResourceInGroup
     * @param {string} group_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceInGroup(
      group_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'group_id' is not null or undefined
      if (group_id === null || group_id === undefined) {
        throw new RequiredError(
          'group_id',
          'Required parameter group_id was null or undefined when calling searchOutboundResourceInGroup.'
        )
      }
      const localVarPath = `/call_center/resource_group/{group_id}/resource`.replace(
        `{${'group_id'}}`,
        encodeURIComponent(String(group_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update OutboundResourceGroup
     * @param {string} id
     * @param {EngineUpdateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceGroup(
      id: string,
      body: EngineUpdateOutboundResourceGroupRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateOutboundResourceGroup.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateOutboundResourceGroup.'
        )
      }
      const localVarPath = `/call_center/resource_group/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateOutboundResourceGroupRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update OutboundResourceInGroup
     * @param {string} group_id
     * @param {string} id
     * @param {EngineUpdateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceInGroup(
      group_id: string,
      id: string,
      body: EngineUpdateOutboundResourceInGroupRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'group_id' is not null or undefined
      if (group_id === null || group_id === undefined) {
        throw new RequiredError(
          'group_id',
          'Required parameter group_id was null or undefined when calling updateOutboundResourceInGroup.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateOutboundResourceInGroup.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateOutboundResourceInGroup.'
        )
      }
      const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`
        .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateOutboundResourceInGroupRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OutboundResourceGroupServiceApi - functional programming interface
 * @export
 */
export const OutboundResourceGroupServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {EngineCreateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceGroup(
      body: EngineCreateOutboundResourceGroupRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResourceGroup> {
      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(
        configuration
      ).createOutboundResourceGroup(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {string} group_id
     * @param {EngineCreateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceInGroup(
      group_id: string,
      body: EngineCreateOutboundResourceInGroupRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResourceInGroup> {
      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(
        configuration
      ).createOutboundResourceInGroup(group_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove OutboundResourceGroup
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceGroup(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResourceGroup> {
      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(
        configuration
      ).deleteOutboundResourceGroup(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove OutboundResourceInGroup
     * @param {string} group_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceInGroup(
      group_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResourceInGroup> {
      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(
        configuration
      ).deleteOutboundResourceInGroup(group_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary OutboundResourceGroup item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceGroup(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResourceGroup> {
      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(
        configuration
      ).readOutboundResourceGroup(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary OutboundResourceInGroup item
     * @param {string} group_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceInGroup(
      group_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResourceInGroup> {
      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(
        configuration
      ).readOutboundResourceInGroup(group_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of OutboundResourceGroup
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceGroup(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListOutboundResourceGroup> {
      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(
        configuration
      ).searchOutboundResourceGroup(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of OutboundResourceInGroup
     * @param {string} group_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceInGroup(
      group_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListOutboundResourceInGroup> {
      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(
        configuration
      ).searchOutboundResourceInGroup(
        group_id,
        page,
        size,
        q,
        domain_id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update OutboundResourceGroup
     * @param {string} id
     * @param {EngineUpdateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceGroup(
      id: string,
      body: EngineUpdateOutboundResourceGroupRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResourceGroup> {
      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(
        configuration
      ).updateOutboundResourceGroup(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update OutboundResourceInGroup
     * @param {string} group_id
     * @param {string} id
     * @param {EngineUpdateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceInGroup(
      group_id: string,
      id: string,
      body: EngineUpdateOutboundResourceInGroupRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResourceInGroup> {
      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(
        configuration
      ).updateOutboundResourceInGroup(group_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * OutboundResourceGroupServiceApi - factory interface
 * @export
 */
export const OutboundResourceGroupServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {EngineCreateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceGroup(
      body: EngineCreateOutboundResourceGroupRequest,
      options?: any
    ) {
      return OutboundResourceGroupServiceApiFp(
        configuration
      ).createOutboundResourceGroup(body, options)(axios, basePath)
    },
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {string} group_id
     * @param {EngineCreateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceInGroup(
      group_id: string,
      body: EngineCreateOutboundResourceInGroupRequest,
      options?: any
    ) {
      return OutboundResourceGroupServiceApiFp(
        configuration
      ).createOutboundResourceInGroup(group_id, body, options)(axios, basePath)
    },
    /**
     *
     * @summary Remove OutboundResourceGroup
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceGroup(id: string, domain_id?: string, options?: any) {
      return OutboundResourceGroupServiceApiFp(
        configuration
      ).deleteOutboundResourceGroup(id, domain_id, options)(axios, basePath)
    },
    /**
     *
     * @summary Remove OutboundResourceInGroup
     * @param {string} group_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceInGroup(
      group_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return OutboundResourceGroupServiceApiFp(
        configuration
      ).deleteOutboundResourceInGroup(group_id, id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary OutboundResourceGroup item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceGroup(id: string, domain_id?: string, options?: any) {
      return OutboundResourceGroupServiceApiFp(
        configuration
      ).readOutboundResourceGroup(id, domain_id, options)(axios, basePath)
    },
    /**
     *
     * @summary OutboundResourceInGroup item
     * @param {string} group_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceInGroup(
      group_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return OutboundResourceGroupServiceApiFp(
        configuration
      ).readOutboundResourceInGroup(group_id, id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of OutboundResourceGroup
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceGroup(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return OutboundResourceGroupServiceApiFp(
        configuration
      ).searchOutboundResourceGroup(page, size, q, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of OutboundResourceInGroup
     * @param {string} group_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceInGroup(
      group_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return OutboundResourceGroupServiceApiFp(
        configuration
      ).searchOutboundResourceInGroup(
        group_id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update OutboundResourceGroup
     * @param {string} id
     * @param {EngineUpdateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceGroup(
      id: string,
      body: EngineUpdateOutboundResourceGroupRequest,
      options?: any
    ) {
      return OutboundResourceGroupServiceApiFp(
        configuration
      ).updateOutboundResourceGroup(id, body, options)(axios, basePath)
    },
    /**
     *
     * @summary Update OutboundResourceInGroup
     * @param {string} group_id
     * @param {string} id
     * @param {EngineUpdateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceInGroup(
      group_id: string,
      id: string,
      body: EngineUpdateOutboundResourceInGroupRequest,
      options?: any
    ) {
      return OutboundResourceGroupServiceApiFp(
        configuration
      ).updateOutboundResourceInGroup(group_id, id, body, options)(
        axios,
        basePath
      )
    },
  }
}

/**
 * OutboundResourceGroupServiceApi - object-oriented interface
 * @export
 * @class OutboundResourceGroupServiceApi
 * @extends {BaseAPI}
 */
export class OutboundResourceGroupServiceApi extends BaseAPI {
  /**
   *
   * @summary Create OutboundResourceGroup
   * @param {EngineCreateOutboundResourceGroupRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceGroupServiceApi
   */
  public createOutboundResourceGroup(
    body: EngineCreateOutboundResourceGroupRequest,
    options?: any
  ) {
    return OutboundResourceGroupServiceApiFp(
      this.configuration
    ).createOutboundResourceGroup(body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Create OutboundResourceGroup
   * @param {string} group_id
   * @param {EngineCreateOutboundResourceInGroupRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceGroupServiceApi
   */
  public createOutboundResourceInGroup(
    group_id: string,
    body: EngineCreateOutboundResourceInGroupRequest,
    options?: any
  ) {
    return OutboundResourceGroupServiceApiFp(
      this.configuration
    ).createOutboundResourceInGroup(group_id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Remove OutboundResourceGroup
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceGroupServiceApi
   */
  public deleteOutboundResourceGroup(
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return OutboundResourceGroupServiceApiFp(
      this.configuration
    ).deleteOutboundResourceGroup(id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Remove OutboundResourceInGroup
   * @param {string} group_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceGroupServiceApi
   */
  public deleteOutboundResourceInGroup(
    group_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return OutboundResourceGroupServiceApiFp(
      this.configuration
    ).deleteOutboundResourceInGroup(group_id, id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary OutboundResourceGroup item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceGroupServiceApi
   */
  public readOutboundResourceGroup(
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return OutboundResourceGroupServiceApiFp(
      this.configuration
    ).readOutboundResourceGroup(id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary OutboundResourceInGroup item
   * @param {string} group_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceGroupServiceApi
   */
  public readOutboundResourceInGroup(
    group_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return OutboundResourceGroupServiceApiFp(
      this.configuration
    ).readOutboundResourceInGroup(group_id, id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary List of OutboundResourceGroup
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceGroupServiceApi
   */
  public searchOutboundResourceGroup(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return OutboundResourceGroupServiceApiFp(
      this.configuration
    ).searchOutboundResourceGroup(page, size, q, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary List of OutboundResourceInGroup
   * @param {string} group_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceGroupServiceApi
   */
  public searchOutboundResourceInGroup(
    group_id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return OutboundResourceGroupServiceApiFp(
      this.configuration
    ).searchOutboundResourceInGroup(
      group_id,
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update OutboundResourceGroup
   * @param {string} id
   * @param {EngineUpdateOutboundResourceGroupRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceGroupServiceApi
   */
  public updateOutboundResourceGroup(
    id: string,
    body: EngineUpdateOutboundResourceGroupRequest,
    options?: any
  ) {
    return OutboundResourceGroupServiceApiFp(
      this.configuration
    ).updateOutboundResourceGroup(id, body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update OutboundResourceInGroup
   * @param {string} group_id
   * @param {string} id
   * @param {EngineUpdateOutboundResourceInGroupRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceGroupServiceApi
   */
  public updateOutboundResourceInGroup(
    group_id: string,
    id: string,
    body: EngineUpdateOutboundResourceInGroupRequest,
    options?: any
  ) {
    return OutboundResourceGroupServiceApiFp(
      this.configuration
    ).updateOutboundResourceInGroup(group_id, id, body, options)(
      this.axios,
      this.basePath
    )
  }
}

/**
 * OutboundResourceServiceApi - axios parameter creator
 * @export
 */
export const OutboundResourceServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource(
      body: EngineCreateOutboundResourceRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateOutboundResourceRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resource_id
     * @param {EngineCreateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceDisplay(
      resource_id: string,
      body: EngineCreateOutboundResourceDisplayRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'resource_id' is not null or undefined
      if (resource_id === null || resource_id === undefined) {
        throw new RequiredError(
          'resource_id',
          'Required parameter resource_id was null or undefined when calling createOutboundResourceDisplay.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createOutboundResourceDisplay.'
        )
      }
      const localVarPath = `/call_center/resources/{resource_id}/display`.replace(
        `{${'resource_id'}}`,
        encodeURIComponent(String(resource_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateOutboundResourceDisplayRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove ResourceDisplay
     * @param {string} resource_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceDisplay(
      resource_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'resource_id' is not null or undefined
      if (resource_id === null || resource_id === undefined) {
        throw new RequiredError(
          'resource_id',
          'Required parameter resource_id was null or undefined when calling deleteOutboundResourceDisplay.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteOutboundResourceDisplay.'
        )
      }
      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch OutboundResource
     * @param {string} id
     * @param {EnginePatchOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOutboundResource(
      id: string,
      body: EnginePatchOutboundResourceRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchOutboundResource.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EnginePatchOutboundResourceRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ResourceDisplay item
     * @param {string} resource_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceDisplay(
      resource_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'resource_id' is not null or undefined
      if (resource_id === null || resource_id === undefined) {
        throw new RequiredError(
          'resource_id',
          'Required parameter resource_id was null or undefined when calling readOutboundResourceDisplay.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readOutboundResourceDisplay.'
        )
      }
      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/resources`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of ResourceDisplay
     * @param {string} resource_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceDisplay(
      resource_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'resource_id' is not null or undefined
      if (resource_id === null || resource_id === undefined) {
        throw new RequiredError(
          'resource_id',
          'Required parameter resource_id was null or undefined when calling searchOutboundResourceDisplay.'
        )
      }
      const localVarPath = `/call_center/resources/{resource_id}/display`.replace(
        `{${'resource_id'}}`,
        encodeURIComponent(String(resource_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource(
      id: string,
      body: EngineUpdateOutboundResourceRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateOutboundResource.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateOutboundResourceRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update ResourceDisplay
     * @param {string} resource_id
     * @param {string} id
     * @param {EngineUpdateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceDisplay(
      resource_id: string,
      id: string,
      body: EngineUpdateOutboundResourceDisplayRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'resource_id' is not null or undefined
      if (resource_id === null || resource_id === undefined) {
        throw new RequiredError(
          'resource_id',
          'Required parameter resource_id was null or undefined when calling updateOutboundResourceDisplay.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateOutboundResourceDisplay.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateOutboundResourceDisplay.'
        )
      }
      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateOutboundResourceDisplayRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OutboundResourceServiceApi - functional programming interface
 * @export
 */
export const OutboundResourceServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource(
      body: EngineCreateOutboundResourceRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).createOutboundResource(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resource_id
     * @param {EngineCreateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceDisplay(
      resource_id: string,
      body: EngineCreateOutboundResourceDisplayRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceDisplay> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).createOutboundResourceDisplay(resource_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).deleteOutboundResource(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove ResourceDisplay
     * @param {string} resource_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceDisplay(
      resource_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceDisplay> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch OutboundResource
     * @param {string} id
     * @param {EnginePatchOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOutboundResource(
      id: string,
      body: EnginePatchOutboundResourceRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).patchOutboundResource(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).readOutboundResource(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ResourceDisplay item
     * @param {string} resource_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceDisplay(
      resource_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceDisplay> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).readOutboundResourceDisplay(resource_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).searchOutboundResource(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of ResourceDisplay
     * @param {string} resource_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceDisplay(
      resource_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListOutboundResourceDisplay> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).searchOutboundResourceDisplay(
        resource_id,
        page,
        size,
        q,
        domain_id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource(
      id: string,
      body: EngineUpdateOutboundResourceRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).updateOutboundResource(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update ResourceDisplay
     * @param {string} resource_id
     * @param {string} id
     * @param {EngineUpdateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceDisplay(
      resource_id: string,
      id: string,
      body: EngineUpdateOutboundResourceDisplayRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceDisplay> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).updateOutboundResourceDisplay(resource_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * OutboundResourceServiceApi - factory interface
 * @export
 */
export const OutboundResourceServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource(
      body: EngineCreateOutboundResourceRequest,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(configuration).createOutboundResource(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resource_id
     * @param {EngineCreateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceDisplay(
      resource_id: string,
      body: EngineCreateOutboundResourceDisplayRequest,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(
        configuration
      ).createOutboundResourceDisplay(resource_id, body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource(id: string, domain_id?: string, options?: any) {
      return OutboundResourceServiceApiFp(configuration).deleteOutboundResource(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove ResourceDisplay
     * @param {string} resource_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceDisplay(
      resource_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(
        configuration
      ).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Patch OutboundResource
     * @param {string} id
     * @param {EnginePatchOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOutboundResource(
      id: string,
      body: EnginePatchOutboundResourceRequest,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(configuration).patchOutboundResource(
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource(id: string, domain_id?: string, options?: any) {
      return OutboundResourceServiceApiFp(configuration).readOutboundResource(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary ResourceDisplay item
     * @param {string} resource_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceDisplay(
      resource_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(
        configuration
      ).readOutboundResourceDisplay(resource_id, id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(configuration).searchOutboundResource(
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of ResourceDisplay
     * @param {string} resource_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceDisplay(
      resource_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(
        configuration
      ).searchOutboundResourceDisplay(
        resource_id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource(
      id: string,
      body: EngineUpdateOutboundResourceRequest,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(configuration).updateOutboundResource(
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update ResourceDisplay
     * @param {string} resource_id
     * @param {string} id
     * @param {EngineUpdateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceDisplay(
      resource_id: string,
      id: string,
      body: EngineUpdateOutboundResourceDisplayRequest,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(
        configuration
      ).updateOutboundResourceDisplay(resource_id, id, body, options)(
        axios,
        basePath
      )
    },
  }
}

/**
 * OutboundResourceServiceApi - object-oriented interface
 * @export
 * @class OutboundResourceServiceApi
 * @extends {BaseAPI}
 */
export class OutboundResourceServiceApi extends BaseAPI {
  /**
   *
   * @summary Create OutboundResource
   * @param {EngineCreateOutboundResourceRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public createOutboundResource(
    body: EngineCreateOutboundResourceRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).createOutboundResource(body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Create CreateOutboundResourceDisplay
   * @param {string} resource_id
   * @param {EngineCreateOutboundResourceDisplayRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public createOutboundResourceDisplay(
    resource_id: string,
    body: EngineCreateOutboundResourceDisplayRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).createOutboundResourceDisplay(resource_id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Remove OutboundResource
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public deleteOutboundResource(id: string, domain_id?: string, options?: any) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).deleteOutboundResource(id, domain_id, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove ResourceDisplay
   * @param {string} resource_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public deleteOutboundResourceDisplay(
    resource_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Patch OutboundResource
   * @param {string} id
   * @param {EnginePatchOutboundResourceRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public patchOutboundResource(
    id: string,
    body: EnginePatchOutboundResourceRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).patchOutboundResource(id, body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary OutboundResource item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public readOutboundResource(id: string, domain_id?: string, options?: any) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).readOutboundResource(id, domain_id, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary ResourceDisplay item
   * @param {string} resource_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public readOutboundResourceDisplay(
    resource_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).readOutboundResourceDisplay(resource_id, id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary List of OutboundResource
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public searchOutboundResource(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).searchOutboundResource(page, size, q, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary List of ResourceDisplay
   * @param {string} resource_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public searchOutboundResourceDisplay(
    resource_id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).searchOutboundResourceDisplay(
      resource_id,
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update OutboundResource
   * @param {string} id
   * @param {EngineUpdateOutboundResourceRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public updateOutboundResource(
    id: string,
    body: EngineUpdateOutboundResourceRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).updateOutboundResource(id, body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update ResourceDisplay
   * @param {string} resource_id
   * @param {string} id
   * @param {EngineUpdateOutboundResourceDisplayRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public updateOutboundResourceDisplay(
    resource_id: string,
    id: string,
    body: EngineUpdateOutboundResourceDisplayRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).updateOutboundResourceDisplay(resource_id, id, body, options)(
      this.axios,
      this.basePath
    )
  }
}

/**
 * QueueBucketServiceApi - axios parameter creator
 * @export
 */
export const QueueBucketServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create QueueBucket
     * @param {string} queue_id
     * @param {EngineCreateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueBucket(
      queue_id: string,
      body: EngineCreateQueueBucketRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling createQueueBucket.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createQueueBucket.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/buckets`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateQueueBucketRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueBucket(
      queue_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling deleteQueueBucket.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteQueueBucket.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueBucket(
      queue_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling readQueueBucket.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readQueueBucket.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueBucket(
      queue_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling searchQueueBucket.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/buckets`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary UpdateQueueBucket
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueBucket(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueBucketRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling updateQueueBucket.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateQueueBucket.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateQueueBucket.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateQueueBucketRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * QueueBucketServiceApi - functional programming interface
 * @export
 */
export const QueueBucketServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create QueueBucket
     * @param {string} queue_id
     * @param {EngineCreateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueBucket(
      queue_id: string,
      body: EngineCreateQueueBucketRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueBucket> {
      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(
        configuration
      ).createQueueBucket(queue_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueBucket(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueBucket> {
      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(
        configuration
      ).deleteQueueBucket(queue_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueBucket(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueBucket> {
      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(
        configuration
      ).readQueueBucket(queue_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueBucket(
      queue_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListQueueBucket> {
      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(
        configuration
      ).searchQueueBucket(queue_id, page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary UpdateQueueBucket
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueBucket(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueBucketRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueBucket> {
      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(
        configuration
      ).updateQueueBucket(queue_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * QueueBucketServiceApi - factory interface
 * @export
 */
export const QueueBucketServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create QueueBucket
     * @param {string} queue_id
     * @param {EngineCreateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueBucket(
      queue_id: string,
      body: EngineCreateQueueBucketRequest,
      options?: any
    ) {
      return QueueBucketServiceApiFp(configuration).createQueueBucket(
        queue_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueBucket(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return QueueBucketServiceApiFp(configuration).deleteQueueBucket(
        queue_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueBucket(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return QueueBucketServiceApiFp(configuration).readQueueBucket(
        queue_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueBucket(
      queue_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return QueueBucketServiceApiFp(configuration).searchQueueBucket(
        queue_id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary UpdateQueueBucket
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueBucket(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueBucketRequest,
      options?: any
    ) {
      return QueueBucketServiceApiFp(configuration).updateQueueBucket(
        queue_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * QueueBucketServiceApi - object-oriented interface
 * @export
 * @class QueueBucketServiceApi
 * @extends {BaseAPI}
 */
export class QueueBucketServiceApi extends BaseAPI {
  /**
   *
   * @summary Create QueueBucket
   * @param {string} queue_id
   * @param {EngineCreateQueueBucketRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueBucketServiceApi
   */
  public createQueueBucket(
    queue_id: string,
    body: EngineCreateQueueBucketRequest,
    options?: any
  ) {
    return QueueBucketServiceApiFp(this.configuration).createQueueBucket(
      queue_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary DeleteQueueRouting
   * @param {string} queue_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueBucketServiceApi
   */
  public deleteQueueBucket(
    queue_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return QueueBucketServiceApiFp(this.configuration).deleteQueueBucket(
      queue_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary ReadQueueRouting
   * @param {string} queue_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueBucketServiceApi
   */
  public readQueueBucket(
    queue_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return QueueBucketServiceApiFp(this.configuration).readQueueBucket(
      queue_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary SearchQueueRouting
   * @param {string} queue_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueBucketServiceApi
   */
  public searchQueueBucket(
    queue_id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return QueueBucketServiceApiFp(this.configuration).searchQueueBucket(
      queue_id,
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary UpdateQueueBucket
   * @param {string} queue_id
   * @param {string} id
   * @param {EngineUpdateQueueBucketRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueBucketServiceApi
   */
  public updateQueueBucket(
    queue_id: string,
    id: string,
    body: EngineUpdateQueueBucketRequest,
    options?: any
  ) {
    return QueueBucketServiceApiFp(this.configuration).updateQueueBucket(
      queue_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * QueueResourcesServiceApi - axios parameter creator
 * @export
 */
export const QueueResourcesServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary CreateQueueResourceGroup
     * @param {string} queue_id
     * @param {EngineCreateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueResourceGroup(
      queue_id: string,
      body: EngineCreateQueueResourceGroupRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling createQueueResourceGroup.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createQueueResourceGroup.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/resource_groups`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateQueueResourceGroupRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary DeleteQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueResourceGroup(
      queue_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling deleteQueueResourceGroup.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteQueueResourceGroup.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ReadQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueResourceGroup(
      queue_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling readQueueResourceGroup.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readQueueResourceGroup.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchQueueResourceGroup
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueResourceGroup(
      queue_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling searchQueueResourceGroup.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/resource_groups`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary UpdateQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueResourceGroup(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueResourceGroupRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling updateQueueResourceGroup.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateQueueResourceGroup.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateQueueResourceGroup.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateQueueResourceGroupRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * QueueResourcesServiceApi - functional programming interface
 * @export
 */
export const QueueResourcesServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary CreateQueueResourceGroup
     * @param {string} queue_id
     * @param {EngineCreateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueResourceGroup(
      queue_id: string,
      body: EngineCreateQueueResourceGroupRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueResourceGroup> {
      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(
        configuration
      ).createQueueResourceGroup(queue_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary DeleteQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueResourceGroup(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueResourceGroup> {
      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(
        configuration
      ).deleteQueueResourceGroup(queue_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ReadQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueResourceGroup(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueResourceGroup> {
      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(
        configuration
      ).readQueueResourceGroup(queue_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchQueueResourceGroup
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueResourceGroup(
      queue_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListQueueResourceGroup> {
      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(
        configuration
      ).searchQueueResourceGroup(queue_id, page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary UpdateQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueResourceGroup(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueResourceGroupRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueResourceGroup> {
      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(
        configuration
      ).updateQueueResourceGroup(queue_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * QueueResourcesServiceApi - factory interface
 * @export
 */
export const QueueResourcesServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary CreateQueueResourceGroup
     * @param {string} queue_id
     * @param {EngineCreateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueResourceGroup(
      queue_id: string,
      body: EngineCreateQueueResourceGroupRequest,
      options?: any
    ) {
      return QueueResourcesServiceApiFp(configuration).createQueueResourceGroup(
        queue_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary DeleteQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueResourceGroup(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return QueueResourcesServiceApiFp(configuration).deleteQueueResourceGroup(
        queue_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary ReadQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueResourceGroup(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return QueueResourcesServiceApiFp(configuration).readQueueResourceGroup(
        queue_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SearchQueueResourceGroup
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueResourceGroup(
      queue_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return QueueResourcesServiceApiFp(configuration).searchQueueResourceGroup(
        queue_id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary UpdateQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueResourceGroup(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueResourceGroupRequest,
      options?: any
    ) {
      return QueueResourcesServiceApiFp(configuration).updateQueueResourceGroup(
        queue_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * QueueResourcesServiceApi - object-oriented interface
 * @export
 * @class QueueResourcesServiceApi
 * @extends {BaseAPI}
 */
export class QueueResourcesServiceApi extends BaseAPI {
  /**
   *
   * @summary CreateQueueResourceGroup
   * @param {string} queue_id
   * @param {EngineCreateQueueResourceGroupRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueResourcesServiceApi
   */
  public createQueueResourceGroup(
    queue_id: string,
    body: EngineCreateQueueResourceGroupRequest,
    options?: any
  ) {
    return QueueResourcesServiceApiFp(
      this.configuration
    ).createQueueResourceGroup(queue_id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary DeleteQueueResourceGroup
   * @param {string} queue_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueResourcesServiceApi
   */
  public deleteQueueResourceGroup(
    queue_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return QueueResourcesServiceApiFp(
      this.configuration
    ).deleteQueueResourceGroup(queue_id, id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary ReadQueueResourceGroup
   * @param {string} queue_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueResourcesServiceApi
   */
  public readQueueResourceGroup(
    queue_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return QueueResourcesServiceApiFp(
      this.configuration
    ).readQueueResourceGroup(queue_id, id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary SearchQueueResourceGroup
   * @param {string} queue_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueResourcesServiceApi
   */
  public searchQueueResourceGroup(
    queue_id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return QueueResourcesServiceApiFp(
      this.configuration
    ).searchQueueResourceGroup(queue_id, page, size, q, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary UpdateQueueResourceGroup
   * @param {string} queue_id
   * @param {string} id
   * @param {EngineUpdateQueueResourceGroupRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueResourcesServiceApi
   */
  public updateQueueResourceGroup(
    queue_id: string,
    id: string,
    body: EngineUpdateQueueResourceGroupRequest,
    options?: any
  ) {
    return QueueResourcesServiceApiFp(
      this.configuration
    ).updateQueueResourceGroup(queue_id, id, body, options)(
      this.axios,
      this.basePath
    )
  }
}

/**
 * QueueRoutingServiceApi - axios parameter creator
 * @export
 */
export const QueueRoutingServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary CreateQueueRouting
     * @param {string} queue_id
     * @param {EngineCreateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueRouting(
      queue_id: string,
      body: EngineCreateQueueRoutingRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling createQueueRouting.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createQueueRouting.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/routings`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateQueueRoutingRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling deleteQueueRouting.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteQueueRouting.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling readQueueRouting.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readQueueRouting.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueRouting(
      queue_id: string,
      page?: number,
      size?: number,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling searchQueueRouting.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/routings`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary UpdateQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueRouting(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueRoutingRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling updateQueueRouting.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateQueueRouting.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateQueueRouting.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateQueueRoutingRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * QueueRoutingServiceApi - functional programming interface
 * @export
 */
export const QueueRoutingServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary CreateQueueRouting
     * @param {string} queue_id
     * @param {EngineCreateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueRouting(
      queue_id: string,
      body: EngineCreateQueueRoutingRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueRouting> {
      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(
        configuration
      ).createQueueRouting(queue_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueRouting> {
      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(
        configuration
      ).deleteQueueRouting(queue_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueRouting> {
      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(
        configuration
      ).readQueueRouting(queue_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueRouting(
      queue_id: string,
      page?: number,
      size?: number,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListQueueRouting> {
      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(
        configuration
      ).searchQueueRouting(queue_id, page, size, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary UpdateQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueRouting(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueRoutingRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueRouting> {
      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(
        configuration
      ).updateQueueRouting(queue_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * QueueRoutingServiceApi - factory interface
 * @export
 */
export const QueueRoutingServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary CreateQueueRouting
     * @param {string} queue_id
     * @param {EngineCreateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueRouting(
      queue_id: string,
      body: EngineCreateQueueRoutingRequest,
      options?: any
    ) {
      return QueueRoutingServiceApiFp(configuration).createQueueRouting(
        queue_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return QueueRoutingServiceApiFp(configuration).deleteQueueRouting(
        queue_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return QueueRoutingServiceApiFp(configuration).readQueueRouting(
        queue_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueRouting(
      queue_id: string,
      page?: number,
      size?: number,
      domain_id?: string,
      options?: any
    ) {
      return QueueRoutingServiceApiFp(configuration).searchQueueRouting(
        queue_id,
        page,
        size,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary UpdateQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueRouting(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueRoutingRequest,
      options?: any
    ) {
      return QueueRoutingServiceApiFp(configuration).updateQueueRouting(
        queue_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * QueueRoutingServiceApi - object-oriented interface
 * @export
 * @class QueueRoutingServiceApi
 * @extends {BaseAPI}
 */
export class QueueRoutingServiceApi extends BaseAPI {
  /**
   *
   * @summary CreateQueueRouting
   * @param {string} queue_id
   * @param {EngineCreateQueueRoutingRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueRoutingServiceApi
   */
  public createQueueRouting(
    queue_id: string,
    body: EngineCreateQueueRoutingRequest,
    options?: any
  ) {
    return QueueRoutingServiceApiFp(this.configuration).createQueueRouting(
      queue_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary DeleteQueueRouting
   * @param {string} queue_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueRoutingServiceApi
   */
  public deleteQueueRouting(
    queue_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return QueueRoutingServiceApiFp(this.configuration).deleteQueueRouting(
      queue_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary ReadQueueRouting
   * @param {string} queue_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueRoutingServiceApi
   */
  public readQueueRouting(
    queue_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return QueueRoutingServiceApiFp(this.configuration).readQueueRouting(
      queue_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary SearchQueueRouting
   * @param {string} queue_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueRoutingServiceApi
   */
  public searchQueueRouting(
    queue_id: string,
    page?: number,
    size?: number,
    domain_id?: string,
    options?: any
  ) {
    return QueueRoutingServiceApiFp(this.configuration).searchQueueRouting(
      queue_id,
      page,
      size,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary UpdateQueueRouting
   * @param {string} queue_id
   * @param {string} id
   * @param {EngineUpdateQueueRoutingRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueRoutingServiceApi
   */
  public updateQueueRouting(
    queue_id: string,
    id: string,
    body: EngineUpdateQueueRoutingRequest,
    options?: any
  ) {
    return QueueRoutingServiceApiFp(this.configuration).updateQueueRouting(
      queue_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * QueueServiceApi - axios parameter creator
 * @export
 */
export const QueueServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue(
      body: EngineCreateQueueRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createQueue.'
        )
      }
      const localVarPath = `/call_center/queues`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateQueueRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch Queue
     * @param {string} id
     * @param {EnginePatchQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueue(
      id: string,
      body: EnginePatchQueueRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchQueue.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EnginePatchQueueRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue(id: string, domain_id?: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Queue
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/queues`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [q]
     * @param {Array<number>} [queue_id]
     * @param {Array<number>} [team_id]
     * @param {Array<number>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueReportGeneral(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      q?: string,
      queue_id?: Array<number>,
      team_id?: Array<number>,
      type?: Array<number>,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/queues/reports/general`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (joined_at_from !== undefined) {
        localVarQueryParameter['joined_at.from'] = joined_at_from
      }

      if (joined_at_to !== undefined) {
        localVarQueryParameter['joined_at.to'] = joined_at_to
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (queue_id) {
        localVarQueryParameter['queue_id'] = queue_id
      }

      if (team_id) {
        localVarQueryParameter['team_id'] = team_id
      }

      if (type) {
        localVarQueryParameter['type'] = type
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Queue
     * @param {string} id
     * @param {EngineUpdateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue(
      id: string,
      body: EngineUpdateQueueRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateQueue.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateQueueRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * QueueServiceApi - functional programming interface
 * @export
 */
export const QueueServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue(
      body: EngineCreateQueueRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).createQueue(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).deleteQueue(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch Queue
     * @param {string} id
     * @param {EnginePatchQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueue(
      id: string,
      body: EnginePatchQueueRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).patchQueue(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).readQueue(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Queue
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).searchQueue(page, size, q, domain_id, fields, sort, id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [q]
     * @param {Array<number>} [queue_id]
     * @param {Array<number>} [team_id]
     * @param {Array<number>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueReportGeneral(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      q?: string,
      queue_id?: Array<number>,
      team_id?: Array<number>,
      type?: Array<number>,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListReportGeneral> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).searchQueueReportGeneral(
        page,
        size,
        joined_at_from,
        joined_at_to,
        domain_id,
        fields,
        sort,
        q,
        queue_id,
        team_id,
        type,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Queue
     * @param {string} id
     * @param {EngineUpdateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue(
      id: string,
      body: EngineUpdateQueueRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).updateQueue(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * QueueServiceApi - factory interface
 * @export
 */
export const QueueServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue(body: EngineCreateQueueRequest, options?: any) {
      return QueueServiceApiFp(configuration).createQueue(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue(id: string, domain_id?: string, options?: any) {
      return QueueServiceApiFp(configuration).deleteQueue(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Patch Queue
     * @param {string} id
     * @param {EnginePatchQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueue(id: string, body: EnginePatchQueueRequest, options?: any) {
      return QueueServiceApiFp(configuration).patchQueue(id, body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue(id: string, domain_id?: string, options?: any) {
      return QueueServiceApiFp(configuration).readQueue(id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of Queue
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      options?: any
    ) {
      return QueueServiceApiFp(configuration).searchQueue(
        page,
        size,
        q,
        domain_id,
        fields,
        sort,
        id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joined_at_from]
     * @param {string} [joined_at_to]
     * @param {string} [domain_id]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [q]
     * @param {Array<number>} [queue_id]
     * @param {Array<number>} [team_id]
     * @param {Array<number>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueReportGeneral(
      page?: number,
      size?: number,
      joined_at_from?: string,
      joined_at_to?: string,
      domain_id?: string,
      fields?: Array<string>,
      sort?: string,
      q?: string,
      queue_id?: Array<number>,
      team_id?: Array<number>,
      type?: Array<number>,
      options?: any
    ) {
      return QueueServiceApiFp(configuration).searchQueueReportGeneral(
        page,
        size,
        joined_at_from,
        joined_at_to,
        domain_id,
        fields,
        sort,
        q,
        queue_id,
        team_id,
        type,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update Queue
     * @param {string} id
     * @param {EngineUpdateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue(id: string, body: EngineUpdateQueueRequest, options?: any) {
      return QueueServiceApiFp(configuration).updateQueue(id, body, options)(
        axios,
        basePath
      )
    },
  }
}

/**
 * QueueServiceApi - object-oriented interface
 * @export
 * @class QueueServiceApi
 * @extends {BaseAPI}
 */
export class QueueServiceApi extends BaseAPI {
  /**
   *
   * @summary Create Queue
   * @param {EngineCreateQueueRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public createQueue(body: EngineCreateQueueRequest, options?: any) {
    return QueueServiceApiFp(this.configuration).createQueue(body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Remove Queue
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public deleteQueue(id: string, domain_id?: string, options?: any) {
    return QueueServiceApiFp(this.configuration).deleteQueue(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Patch Queue
   * @param {string} id
   * @param {EnginePatchQueueRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public patchQueue(id: string, body: EnginePatchQueueRequest, options?: any) {
    return QueueServiceApiFp(this.configuration).patchQueue(id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Queue item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public readQueue(id: string, domain_id?: string, options?: any) {
    return QueueServiceApiFp(this.configuration).readQueue(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of Queue
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {Array<string>} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public searchQueue(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    fields?: Array<string>,
    sort?: string,
    id?: Array<string>,
    options?: any
  ) {
    return QueueServiceApiFp(this.configuration).searchQueue(
      page,
      size,
      q,
      domain_id,
      fields,
      sort,
      id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [joined_at_from]
   * @param {string} [joined_at_to]
   * @param {string} [domain_id]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {string} [q]
   * @param {Array<number>} [queue_id]
   * @param {Array<number>} [team_id]
   * @param {Array<number>} [type]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public searchQueueReportGeneral(
    page?: number,
    size?: number,
    joined_at_from?: string,
    joined_at_to?: string,
    domain_id?: string,
    fields?: Array<string>,
    sort?: string,
    q?: string,
    queue_id?: Array<number>,
    team_id?: Array<number>,
    type?: Array<number>,
    options?: any
  ) {
    return QueueServiceApiFp(this.configuration).searchQueueReportGeneral(
      page,
      size,
      joined_at_from,
      joined_at_to,
      domain_id,
      fields,
      sort,
      q,
      queue_id,
      team_id,
      type,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update Queue
   * @param {string} id
   * @param {EngineUpdateQueueRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public updateQueue(
    id: string,
    body: EngineUpdateQueueRequest,
    options?: any
  ) {
    return QueueServiceApiFp(this.configuration).updateQueue(id, body, options)(
      this.axios,
      this.basePath
    )
  }
}

/**
 * ResourceTeamServiceApi - axios parameter creator
 * @export
 */
export const ResourceTeamServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create ResourceTeamAgent
     * @param {string} team_id
     * @param {EngineCreateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeamAgent(
      team_id: string,
      body: EngineCreateResourceTeamAgentRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling createResourceTeamAgent.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(team_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateResourceTeamAgentRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SKill Create ResourceTeamSkill
     * @param {string} team_id
     * @param {EngineCreateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeamSkill(
      team_id: string,
      body: EngineCreateResourceTeamSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling createResourceTeamSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(team_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateResourceTeamSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeamAgent(
      team_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling deleteResourceTeamAgent.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove ResourceTeamSkill
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeamSkill(
      team_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling deleteResourceTeamSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {EnginePatchResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchResourceTeamAgent(
      team_id: string,
      id: string,
      body: EnginePatchResourceTeamAgentRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling patchResourceTeamAgent.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchResourceTeamAgent.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EnginePatchResourceTeamAgentRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {EnginePatchResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchResourceTeamSkill(
      team_id: string,
      id: string,
      body: EnginePatchResourceTeamSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling patchResourceTeamSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchResourceTeamSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EnginePatchResourceTeamSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ResourceTeamAgent item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeamAgent(
      team_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling readResourceTeamAgent.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ResourceTeamSkill item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeamSkill(
      team_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling readResourceTeamSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of ResourceTeamAgent
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeamAgent(
      team_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling searchResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(team_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of ResourceTeamSkill
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeamSkill(
      team_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling searchResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(team_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeamAgent(
      team_id: string,
      id: string,
      body: EngineUpdateResourceTeamAgentRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling updateResourceTeamAgent.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateResourceTeamAgent.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateResourceTeamAgent.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateResourceTeamAgentRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update ResourceTeamSkill
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeamSkill(
      team_id: string,
      id: string,
      body: EngineUpdateResourceTeamSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling updateResourceTeamSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateResourceTeamSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateResourceTeamSkill.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateResourceTeamSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ResourceTeamServiceApi - functional programming interface
 * @export
 */
export const ResourceTeamServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create ResourceTeamAgent
     * @param {string} team_id
     * @param {EngineCreateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeamAgent(
      team_id: string,
      body: EngineCreateResourceTeamAgentRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeamAgent> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).createResourceTeamAgent(team_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SKill Create ResourceTeamSkill
     * @param {string} team_id
     * @param {EngineCreateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeamSkill(
      team_id: string,
      body: EngineCreateResourceTeamSkillRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeamSkill> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).createResourceTeamSkill(team_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeamAgent(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeamAgent> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteResourceTeamAgent(team_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove ResourceTeamSkill
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeamSkill(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeamSkill> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteResourceTeamSkill(team_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {EnginePatchResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchResourceTeamAgent(
      team_id: string,
      id: string,
      body: EnginePatchResourceTeamAgentRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeamAgent> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).patchResourceTeamAgent(team_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {EnginePatchResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchResourceTeamSkill(
      team_id: string,
      id: string,
      body: EnginePatchResourceTeamSkillRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeamSkill> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).patchResourceTeamSkill(team_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ResourceTeamAgent item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeamAgent(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeamAgent> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).readResourceTeamAgent(team_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ResourceTeamSkill item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeamSkill(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeamSkill> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).readResourceTeamSkill(team_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of ResourceTeamAgent
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeamAgent(
      team_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListResourceTeamAgent> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).searchResourceTeamAgent(team_id, page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of ResourceTeamSkill
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeamSkill(
      team_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListResourceTeamSkill> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).searchResourceTeamSkill(team_id, page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeamAgent(
      team_id: string,
      id: string,
      body: EngineUpdateResourceTeamAgentRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeamAgent> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).updateResourceTeamAgent(team_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update ResourceTeamSkill
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeamSkill(
      team_id: string,
      id: string,
      body: EngineUpdateResourceTeamSkillRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeamSkill> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).updateResourceTeamSkill(team_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * ResourceTeamServiceApi - factory interface
 * @export
 */
export const ResourceTeamServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create ResourceTeamAgent
     * @param {string} team_id
     * @param {EngineCreateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeamAgent(
      team_id: string,
      body: EngineCreateResourceTeamAgentRequest,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).createResourceTeamAgent(
        team_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SKill Create ResourceTeamSkill
     * @param {string} team_id
     * @param {EngineCreateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeamSkill(
      team_id: string,
      body: EngineCreateResourceTeamSkillRequest,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).createResourceTeamSkill(
        team_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeamAgent(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).deleteResourceTeamAgent(
        team_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove ResourceTeamSkill
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeamSkill(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).deleteResourceTeamSkill(
        team_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {EnginePatchResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchResourceTeamAgent(
      team_id: string,
      id: string,
      body: EnginePatchResourceTeamAgentRequest,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).patchResourceTeamAgent(
        team_id,
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Patch ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {EnginePatchResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchResourceTeamSkill(
      team_id: string,
      id: string,
      body: EnginePatchResourceTeamSkillRequest,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).patchResourceTeamSkill(
        team_id,
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary ResourceTeamAgent item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeamAgent(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).readResourceTeamAgent(
        team_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary ResourceTeamSkill item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeamSkill(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).readResourceTeamSkill(
        team_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of ResourceTeamAgent
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeamAgent(
      team_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).searchResourceTeamAgent(
        team_id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of ResourceTeamSkill
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeamSkill(
      team_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).searchResourceTeamSkill(
        team_id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeamAgent(
      team_id: string,
      id: string,
      body: EngineUpdateResourceTeamAgentRequest,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).updateResourceTeamAgent(
        team_id,
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update ResourceTeamSkill
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeamSkill(
      team_id: string,
      id: string,
      body: EngineUpdateResourceTeamSkillRequest,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).updateResourceTeamSkill(
        team_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * ResourceTeamServiceApi - object-oriented interface
 * @export
 * @class ResourceTeamServiceApi
 * @extends {BaseAPI}
 */
export class ResourceTeamServiceApi extends BaseAPI {
  /**
   *
   * @summary Create ResourceTeamAgent
   * @param {string} team_id
   * @param {EngineCreateResourceTeamAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public createResourceTeamAgent(
    team_id: string,
    body: EngineCreateResourceTeamAgentRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).createResourceTeamAgent(
      team_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary SKill Create ResourceTeamSkill
   * @param {string} team_id
   * @param {EngineCreateResourceTeamSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public createResourceTeamSkill(
    team_id: string,
    body: EngineCreateResourceTeamSkillRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).createResourceTeamSkill(
      team_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove ResourceTeamAgent
   * @param {string} team_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public deleteResourceTeamAgent(
    team_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeamAgent(
      team_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove ResourceTeamSkill
   * @param {string} team_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public deleteResourceTeamSkill(
    team_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeamSkill(
      team_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Patch ResourceTeamAgent
   * @param {string} team_id
   * @param {string} id
   * @param {EnginePatchResourceTeamAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public patchResourceTeamAgent(
    team_id: string,
    id: string,
    body: EnginePatchResourceTeamAgentRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).patchResourceTeamAgent(
      team_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Patch ResourceTeamAgent
   * @param {string} team_id
   * @param {string} id
   * @param {EnginePatchResourceTeamSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public patchResourceTeamSkill(
    team_id: string,
    id: string,
    body: EnginePatchResourceTeamSkillRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).patchResourceTeamSkill(
      team_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary ResourceTeamAgent item
   * @param {string} team_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public readResourceTeamAgent(
    team_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).readResourceTeamAgent(
      team_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary ResourceTeamSkill item
   * @param {string} team_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public readResourceTeamSkill(
    team_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).readResourceTeamSkill(
      team_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of ResourceTeamAgent
   * @param {string} team_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public searchResourceTeamAgent(
    team_id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).searchResourceTeamAgent(
      team_id,
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of ResourceTeamSkill
   * @param {string} team_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public searchResourceTeamSkill(
    team_id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).searchResourceTeamSkill(
      team_id,
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update ResourceTeamAgent
   * @param {string} team_id
   * @param {string} id
   * @param {EngineUpdateResourceTeamAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public updateResourceTeamAgent(
    team_id: string,
    id: string,
    body: EngineUpdateResourceTeamAgentRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).updateResourceTeamAgent(
      team_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update ResourceTeamSkill
   * @param {string} team_id
   * @param {string} id
   * @param {EngineUpdateResourceTeamSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public updateResourceTeamSkill(
    team_id: string,
    id: string,
    body: EngineUpdateResourceTeamSkillRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).updateResourceTeamSkill(
      team_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * RoutingOutboundCallServiceApi - axios parameter creator
 * @export
 */
export const RoutingOutboundCallServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall(
      body: EngineCreateRoutingOutboundCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateRoutingOutboundCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Move RoutingOutboundCall
     * @param {string} from_id
     * @param {string} to_id
     * @param {EngineMovePositionRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    movePositionRoutingOutboundCall(
      from_id: string,
      to_id: string,
      body: EngineMovePositionRoutingOutboundCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'from_id' is not null or undefined
      if (from_id === null || from_id === undefined) {
        throw new RequiredError(
          'from_id',
          'Required parameter from_id was null or undefined when calling movePositionRoutingOutboundCall.'
        )
      }
      // verify required parameter 'to_id' is not null or undefined
      if (to_id === null || to_id === undefined) {
        throw new RequiredError(
          'to_id',
          'Required parameter to_id was null or undefined when calling movePositionRoutingOutboundCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling movePositionRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{from_id}/to/{to_id}`
        .replace(`{${'from_id'}}`, encodeURIComponent(String(from_id)))
        .replace(`{${'to_id'}}`, encodeURIComponent(String(to_id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineMovePositionRoutingOutboundCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch RoutingOutboundCall
     * @param {string} id
     * @param {EnginePatchRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingOutboundCall(
      id: string,
      body: EnginePatchRoutingOutboundCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchRoutingOutboundCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EnginePatchRoutingOutboundCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/routing/outbound/calls`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall(
      id: string,
      body: EngineUpdateRoutingOutboundCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateRoutingOutboundCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateRoutingOutboundCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RoutingOutboundCallServiceApi - functional programming interface
 * @export
 */
export const RoutingOutboundCallServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall(
      body: EngineCreateRoutingOutboundCallRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).createRoutingOutboundCall(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).deleteRoutingOutboundCall(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Move RoutingOutboundCall
     * @param {string} from_id
     * @param {string} to_id
     * @param {EngineMovePositionRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    movePositionRoutingOutboundCall(
      from_id: string,
      to_id: string,
      body: EngineMovePositionRoutingOutboundCallRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineMovePositionRoutingOutboundCallResponse> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).movePositionRoutingOutboundCall(from_id, to_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch RoutingOutboundCall
     * @param {string} id
     * @param {EnginePatchRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingOutboundCall(
      id: string,
      body: EnginePatchRoutingOutboundCallRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).patchRoutingOutboundCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).readRoutingOutboundCall(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).searchRoutingOutboundCall(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall(
      id: string,
      body: EngineUpdateRoutingOutboundCallRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).updateRoutingOutboundCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * RoutingOutboundCallServiceApi - factory interface
 * @export
 */
export const RoutingOutboundCallServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall(
      body: EngineCreateRoutingOutboundCallRequest,
      options?: any
    ) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).createRoutingOutboundCall(body, options)(axios, basePath)
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall(id: string, domain_id?: string, options?: any) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).deleteRoutingOutboundCall(id, domain_id, options)(axios, basePath)
    },
    /**
     *
     * @summary Move RoutingOutboundCall
     * @param {string} from_id
     * @param {string} to_id
     * @param {EngineMovePositionRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    movePositionRoutingOutboundCall(
      from_id: string,
      to_id: string,
      body: EngineMovePositionRoutingOutboundCallRequest,
      options?: any
    ) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).movePositionRoutingOutboundCall(from_id, to_id, body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Patch RoutingOutboundCall
     * @param {string} id
     * @param {EnginePatchRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingOutboundCall(
      id: string,
      body: EnginePatchRoutingOutboundCallRequest,
      options?: any
    ) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).patchRoutingOutboundCall(id, body, options)(axios, basePath)
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall(id: string, domain_id?: string, options?: any) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).readRoutingOutboundCall(id, domain_id, options)(axios, basePath)
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).searchRoutingOutboundCall(page, size, q, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall(
      id: string,
      body: EngineUpdateRoutingOutboundCallRequest,
      options?: any
    ) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).updateRoutingOutboundCall(id, body, options)(axios, basePath)
    },
  }
}

/**
 * RoutingOutboundCallServiceApi - object-oriented interface
 * @export
 * @class RoutingOutboundCallServiceApi
 * @extends {BaseAPI}
 */
export class RoutingOutboundCallServiceApi extends BaseAPI {
  /**
   *
   * @summary Create RoutingOutboundCall
   * @param {EngineCreateRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public createRoutingOutboundCall(
    body: EngineCreateRoutingOutboundCallRequest,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).createRoutingOutboundCall(body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove RoutingOutboundCall
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public deleteRoutingOutboundCall(
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).deleteRoutingOutboundCall(id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Move RoutingOutboundCall
   * @param {string} from_id
   * @param {string} to_id
   * @param {EngineMovePositionRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public movePositionRoutingOutboundCall(
    from_id: string,
    to_id: string,
    body: EngineMovePositionRoutingOutboundCallRequest,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).movePositionRoutingOutboundCall(from_id, to_id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Patch RoutingOutboundCall
   * @param {string} id
   * @param {EnginePatchRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public patchRoutingOutboundCall(
    id: string,
    body: EnginePatchRoutingOutboundCallRequest,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).patchRoutingOutboundCall(id, body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary RoutingOutboundCall item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public readRoutingOutboundCall(
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).readRoutingOutboundCall(id, domain_id, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of RoutingOutboundCall
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public searchRoutingOutboundCall(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).searchRoutingOutboundCall(page, size, q, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Update RoutingOutboundCall
   * @param {string} id
   * @param {EngineUpdateRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public updateRoutingOutboundCall(
    id: string,
    body: EngineUpdateRoutingOutboundCallRequest,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).updateRoutingOutboundCall(id, body, options)(this.axios, this.basePath)
  }
}

/**
 * RoutingSchemaServiceApi - axios parameter creator
 * @export
 */
export const RoutingSchemaServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingSchema
     * @param {EngineCreateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingSchema(
      body: EngineCreateRoutingSchemaRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createRoutingSchema.'
        )
      }
      const localVarPath = `/routing/schema`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateRoutingSchemaRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove RoutingSchema
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingSchema(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteRoutingSchema.'
        )
      }
      const localVarPath = `/routing/schema/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch RoutingSchema
     * @param {string} id
     * @param {EnginePatchRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingSchema(
      id: string,
      body: EnginePatchRoutingSchemaRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchRoutingSchema.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchRoutingSchema.'
        )
      }
      const localVarPath = `/routing/schema/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EnginePatchRoutingSchemaRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RoutingSchema item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingSchema(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readRoutingSchema.'
        )
      }
      const localVarPath = `/routing/schema/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List RoutingSchema
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingSchema(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/routing/schema`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update RoutingSchema
     * @param {string} id
     * @param {EngineUpdateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingSchema(
      id: string,
      body: EngineUpdateRoutingSchemaRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateRoutingSchema.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateRoutingSchema.'
        )
      }
      const localVarPath = `/routing/schema/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateRoutingSchemaRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RoutingSchemaServiceApi - functional programming interface
 * @export
 */
export const RoutingSchemaServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingSchema
     * @param {EngineCreateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingSchema(
      body: EngineCreateRoutingSchemaRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingSchema> {
      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(
        configuration
      ).createRoutingSchema(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove RoutingSchema
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingSchema(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingSchema> {
      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(
        configuration
      ).deleteRoutingSchema(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch RoutingSchema
     * @param {string} id
     * @param {EnginePatchRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingSchema(
      id: string,
      body: EnginePatchRoutingSchemaRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingSchema> {
      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(
        configuration
      ).patchRoutingSchema(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RoutingSchema item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingSchema(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingSchema> {
      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(
        configuration
      ).readRoutingSchema(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List RoutingSchema
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingSchema(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListRoutingSchema> {
      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(
        configuration
      ).searchRoutingSchema(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update RoutingSchema
     * @param {string} id
     * @param {EngineUpdateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingSchema(
      id: string,
      body: EngineUpdateRoutingSchemaRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingSchema> {
      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(
        configuration
      ).updateRoutingSchema(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * RoutingSchemaServiceApi - factory interface
 * @export
 */
export const RoutingSchemaServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create RoutingSchema
     * @param {EngineCreateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingSchema(body: EngineCreateRoutingSchemaRequest, options?: any) {
      return RoutingSchemaServiceApiFp(configuration).createRoutingSchema(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove RoutingSchema
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingSchema(id: string, domain_id?: string, options?: any) {
      return RoutingSchemaServiceApiFp(configuration).deleteRoutingSchema(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Patch RoutingSchema
     * @param {string} id
     * @param {EnginePatchRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingSchema(
      id: string,
      body: EnginePatchRoutingSchemaRequest,
      options?: any
    ) {
      return RoutingSchemaServiceApiFp(configuration).patchRoutingSchema(
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary RoutingSchema item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingSchema(id: string, domain_id?: string, options?: any) {
      return RoutingSchemaServiceApiFp(configuration).readRoutingSchema(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List RoutingSchema
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingSchema(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return RoutingSchemaServiceApiFp(configuration).searchRoutingSchema(
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update RoutingSchema
     * @param {string} id
     * @param {EngineUpdateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingSchema(
      id: string,
      body: EngineUpdateRoutingSchemaRequest,
      options?: any
    ) {
      return RoutingSchemaServiceApiFp(configuration).updateRoutingSchema(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * RoutingSchemaServiceApi - object-oriented interface
 * @export
 * @class RoutingSchemaServiceApi
 * @extends {BaseAPI}
 */
export class RoutingSchemaServiceApi extends BaseAPI {
  /**
   *
   * @summary Create RoutingSchema
   * @param {EngineCreateRoutingSchemaRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemaServiceApi
   */
  public createRoutingSchema(
    body: EngineCreateRoutingSchemaRequest,
    options?: any
  ) {
    return RoutingSchemaServiceApiFp(this.configuration).createRoutingSchema(
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove RoutingSchema
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemaServiceApi
   */
  public deleteRoutingSchema(id: string, domain_id?: string, options?: any) {
    return RoutingSchemaServiceApiFp(this.configuration).deleteRoutingSchema(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Patch RoutingSchema
   * @param {string} id
   * @param {EnginePatchRoutingSchemaRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemaServiceApi
   */
  public patchRoutingSchema(
    id: string,
    body: EnginePatchRoutingSchemaRequest,
    options?: any
  ) {
    return RoutingSchemaServiceApiFp(this.configuration).patchRoutingSchema(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary RoutingSchema item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemaServiceApi
   */
  public readRoutingSchema(id: string, domain_id?: string, options?: any) {
    return RoutingSchemaServiceApiFp(this.configuration).readRoutingSchema(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List RoutingSchema
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemaServiceApi
   */
  public searchRoutingSchema(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return RoutingSchemaServiceApiFp(this.configuration).searchRoutingSchema(
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update RoutingSchema
   * @param {string} id
   * @param {EngineUpdateRoutingSchemaRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemaServiceApi
   */
  public updateRoutingSchema(
    id: string,
    body: EngineUpdateRoutingSchemaRequest,
    options?: any
  ) {
    return RoutingSchemaServiceApiFp(this.configuration).updateRoutingSchema(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * RoutingVariableServiceApi - axios parameter creator
 * @export
 */
export const RoutingVariableServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable(
      body: EngineCreateRoutingVariableRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateRoutingVariableRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable(
      page?: number,
      size?: number,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/routing/variables`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {string} id
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable(
      id: string,
      body: EngineUpdateRoutingVariableRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateRoutingVariable.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateRoutingVariableRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RoutingVariableServiceApi - functional programming interface
 * @export
 */
export const RoutingVariableServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable(
      body: EngineCreateRoutingVariableRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingVariable> {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).createRoutingVariable(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingVariable> {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).deleteRoutingVariable(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingVariable> {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).readRoutingVariable(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable(
      page?: number,
      size?: number,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListRoutingVariable> {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).searchRoutingVariable(page, size, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {string} id
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable(
      id: string,
      body: EngineUpdateRoutingVariableRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingVariable> {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).updateRoutingVariable(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * RoutingVariableServiceApi - factory interface
 * @export
 */
export const RoutingVariableServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable(
      body: EngineCreateRoutingVariableRequest,
      options?: any
    ) {
      return RoutingVariableServiceApiFp(configuration).createRoutingVariable(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable(id: string, domain_id?: string, options?: any) {
      return RoutingVariableServiceApiFp(configuration).deleteRoutingVariable(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable(id: string, domain_id?: string, options?: any) {
      return RoutingVariableServiceApiFp(configuration).readRoutingVariable(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable(
      page?: number,
      size?: number,
      domain_id?: string,
      options?: any
    ) {
      return RoutingVariableServiceApiFp(configuration).searchRoutingVariable(
        page,
        size,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {string} id
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable(
      id: string,
      body: EngineUpdateRoutingVariableRequest,
      options?: any
    ) {
      return RoutingVariableServiceApiFp(configuration).updateRoutingVariable(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * RoutingVariableServiceApi - object-oriented interface
 * @export
 * @class RoutingVariableServiceApi
 * @extends {BaseAPI}
 */
export class RoutingVariableServiceApi extends BaseAPI {
  /**
   *
   * @summary Create RoutingVariable
   * @param {EngineCreateRoutingVariableRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  public createRoutingVariable(
    body: EngineCreateRoutingVariableRequest,
    options?: any
  ) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).createRoutingVariable(body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove RoutingVariable
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  public deleteRoutingVariable(id: string, domain_id?: string, options?: any) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).deleteRoutingVariable(id, domain_id, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary RoutingVariable item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  public readRoutingVariable(id: string, domain_id?: string, options?: any) {
    return RoutingVariableServiceApiFp(this.configuration).readRoutingVariable(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of RoutingVariable
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  public searchRoutingVariable(
    page?: number,
    size?: number,
    domain_id?: string,
    options?: any
  ) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).searchRoutingVariable(page, size, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Update RoutingVariable
   * @param {string} id
   * @param {EngineUpdateRoutingVariableRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  public updateRoutingVariable(
    id: string,
    body: EngineUpdateRoutingVariableRequest,
    options?: any
  ) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).updateRoutingVariable(id, body, options)(this.axios, this.basePath)
  }
}

/**
 * SkillServiceApi - axios parameter creator
 * @export
 */
export const SkillServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill(
      body: EngineCreateSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createSkill.'
        )
      }
      const localVarPath = `/call_center/skills`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteSkill.'
        )
      }
      const localVarPath = `/call_center/skills/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill(id: string, domain_id?: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readSkill.'
        )
      }
      const localVarPath = `/call_center/skills/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Skill
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/skills`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Skill
     * @param {string} id
     * @param {EngineUpdateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill(
      id: string,
      body: EngineUpdateSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateSkill.'
        )
      }
      const localVarPath = `/call_center/skills/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SkillServiceApi - functional programming interface
 * @export
 */
export const SkillServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill(
      body: EngineCreateSkillRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).createSkill(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).deleteSkill(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).readSkill(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Skill
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListSkill> {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).searchSkill(page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Skill
     * @param {string} id
     * @param {EngineUpdateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill(
      id: string,
      body: EngineUpdateSkillRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).updateSkill(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * SkillServiceApi - factory interface
 * @export
 */
export const SkillServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill(body: EngineCreateSkillRequest, options?: any) {
      return SkillServiceApiFp(configuration).createSkill(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill(id: string, domain_id?: string, options?: any) {
      return SkillServiceApiFp(configuration).deleteSkill(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill(id: string, domain_id?: string, options?: any) {
      return SkillServiceApiFp(configuration).readSkill(id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of Skill
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill(
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return SkillServiceApiFp(configuration).searchSkill(
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update Skill
     * @param {string} id
     * @param {EngineUpdateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill(id: string, body: EngineUpdateSkillRequest, options?: any) {
      return SkillServiceApiFp(configuration).updateSkill(id, body, options)(
        axios,
        basePath
      )
    },
  }
}

/**
 * SkillServiceApi - object-oriented interface
 * @export
 * @class SkillServiceApi
 * @extends {BaseAPI}
 */
export class SkillServiceApi extends BaseAPI {
  /**
   *
   * @summary Create Skill
   * @param {EngineCreateSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  public createSkill(body: EngineCreateSkillRequest, options?: any) {
    return SkillServiceApiFp(this.configuration).createSkill(body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Remove Skill
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  public deleteSkill(id: string, domain_id?: string, options?: any) {
    return SkillServiceApiFp(this.configuration).deleteSkill(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Skill item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  public readSkill(id: string, domain_id?: string, options?: any) {
    return SkillServiceApiFp(this.configuration).readSkill(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of Skill
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  public searchSkill(
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return SkillServiceApiFp(this.configuration).searchSkill(
      page,
      size,
      q,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update Skill
   * @param {string} id
   * @param {EngineUpdateSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  public updateSkill(
    id: string,
    body: EngineUpdateSkillRequest,
    options?: any
  ) {
    return SkillServiceApiFp(this.configuration).updateSkill(id, body, options)(
      this.axios,
      this.basePath
    )
  }
}

/**
 * SupervisorInTeamServiceApi - axios parameter creator
 * @export
 */
export const SupervisorInTeamServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create SupervisorInTeam
     * @param {string} team_id
     * @param {EngineCreateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupervisorInTeam(
      team_id: string,
      body: EngineCreateSupervisorInTeamRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling createSupervisorInTeam.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(team_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateSupervisorInTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling deleteSupervisorInTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SupervisorInTeam item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling readSupervisorInTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of SupervisorInTeam
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSupervisorInTeam(
      team_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling searchSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(team_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupervisorInTeam(
      team_id: string,
      id: string,
      body: EngineUpdateSupervisorInTeamRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling updateSupervisorInTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateSupervisorInTeam.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateSupervisorInTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SupervisorInTeamServiceApi - functional programming interface
 * @export
 */
export const SupervisorInTeamServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create SupervisorInTeam
     * @param {string} team_id
     * @param {EngineCreateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupervisorInTeam(
      team_id: string,
      body: EngineCreateSupervisorInTeamRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineSupervisorInTeam> {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).createSupervisorInTeam(team_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineSupervisorInTeam> {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteSupervisorInTeam(team_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SupervisorInTeam item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineSupervisorInTeam> {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).readSupervisorInTeam(team_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of SupervisorInTeam
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSupervisorInTeam(
      team_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListSupervisorInTeam> {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).searchSupervisorInTeam(team_id, page, size, q, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupervisorInTeam(
      team_id: string,
      id: string,
      body: EngineUpdateSupervisorInTeamRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineSupervisorInTeam> {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).updateSupervisorInTeam(team_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * SupervisorInTeamServiceApi - factory interface
 * @export
 */
export const SupervisorInTeamServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create SupervisorInTeam
     * @param {string} team_id
     * @param {EngineCreateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupervisorInTeam(
      team_id: string,
      body: EngineCreateSupervisorInTeamRequest,
      options?: any
    ) {
      return SupervisorInTeamServiceApiFp(configuration).createSupervisorInTeam(
        team_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return SupervisorInTeamServiceApiFp(configuration).deleteSupervisorInTeam(
        team_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SupervisorInTeam item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return SupervisorInTeamServiceApiFp(configuration).readSupervisorInTeam(
        team_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of SupervisorInTeam
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSupervisorInTeam(
      team_id: string,
      page?: number,
      size?: number,
      q?: string,
      domain_id?: string,
      options?: any
    ) {
      return SupervisorInTeamServiceApiFp(configuration).searchSupervisorInTeam(
        team_id,
        page,
        size,
        q,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupervisorInTeam(
      team_id: string,
      id: string,
      body: EngineUpdateSupervisorInTeamRequest,
      options?: any
    ) {
      return SupervisorInTeamServiceApiFp(configuration).updateSupervisorInTeam(
        team_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * SupervisorInTeamServiceApi - object-oriented interface
 * @export
 * @class SupervisorInTeamServiceApi
 * @extends {BaseAPI}
 */
export class SupervisorInTeamServiceApi extends BaseAPI {
  /**
   *
   * @summary Create SupervisorInTeam
   * @param {string} team_id
   * @param {EngineCreateSupervisorInTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  public createSupervisorInTeam(
    team_id: string,
    body: EngineCreateSupervisorInTeamRequest,
    options?: any
  ) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).createSupervisorInTeam(team_id, body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove SupervisorInTeam
   * @param {string} team_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  public deleteSupervisorInTeam(
    team_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).deleteSupervisorInTeam(team_id, id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary SupervisorInTeam item
   * @param {string} team_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  public readSupervisorInTeam(
    team_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).readSupervisorInTeam(team_id, id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary List of SupervisorInTeam
   * @param {string} team_id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  public searchSupervisorInTeam(
    team_id: string,
    page?: number,
    size?: number,
    q?: string,
    domain_id?: string,
    options?: any
  ) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).searchSupervisorInTeam(team_id, page, size, q, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Update SupervisorInTeam
   * @param {string} team_id
   * @param {string} id
   * @param {EngineUpdateSupervisorInTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  public updateSupervisorInTeam(
    team_id: string,
    id: string,
    body: EngineUpdateSupervisorInTeamRequest,
    options?: any
  ) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).updateSupervisorInTeam(team_id, id, body, options)(
      this.axios,
      this.basePath
    )
  }
}
