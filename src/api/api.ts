// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019.0.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface EngineAcceptOfDay
 */
export interface EngineAcceptOfDay {
  /**
   *
   * @type {string}
   * @memberof EngineAcceptOfDay
   */
  id?: string
  /**
   *
   * @type {number}
   * @memberof EngineAcceptOfDay
   */
  week_day?: number
  /**
   *
   * @type {number}
   * @memberof EngineAcceptOfDay
   */
  start_time_of_day?: number
  /**
   *
   * @type {number}
   * @memberof EngineAcceptOfDay
   */
  end_time_of_day?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineAcceptOfDay
   */
  disabled?: boolean
}
/**
 *
 * @export
 * @interface EngineAgent
 */
export interface EngineAgent {
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  domain_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgent
   */
  user?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  state?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgent
   */
  description?: string
}
/**
 *
 * @export
 * @interface EngineAgentSkill
 */
export interface EngineAgentSkill {
  /**
   *
   * @type {string}
   * @memberof EngineAgentSkill
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentSkill
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentSkill
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentSkill
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineAgentSkill
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentSkill
   */
  updated_by?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentSkill
   */
  agent?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentSkill
   */
  skill?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineAgentSkill
   */
  capacity?: number
}
/**
 *
 * @export
 * @interface EngineAgentSkillItem
 */
export interface EngineAgentSkillItem {
  /**
   *
   * @type {string}
   * @memberof EngineAgentSkillItem
   */
  id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineAgentSkillItem
   */
  skill?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineAgentSkillItem
   */
  capacity?: number
}
/**
 *
 * @export
 * @interface EngineAgentStatusRequest
 */
export interface EngineAgentStatusRequest {
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatusRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatusRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentStatusRequest
   */
  status?: string
}
/**
 *
 * @export
 * @interface EngineAgentTeam
 */
export interface EngineAgentTeam {
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  strategy?: string
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  max_no_answer?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  wrap_up_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  reject_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  busy_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  no_answer_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineAgentTeam
   */
  call_timeout?: number
  /**
   *
   * @type {string}
   * @memberof EngineAgentTeam
   */
  updated_at?: string
}
/**
 *
 * @export
 * @interface EngineCalendar
 */
export interface EngineCalendar {
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCalendar
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCalendar
   */
  updated_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  start?: string
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  finish?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCalendar
   */
  timezone?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCalendar
   */
  description?: string
}
/**
 *
 * @export
 * @interface EngineCreateAcceptOfDayRequest
 */
export interface EngineCreateAcceptOfDayRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateAcceptOfDayRequest
   */
  calendar_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateAcceptOfDayRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateAcceptOfDayRequest
   */
  week_day?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateAcceptOfDayRequest
   */
  start_time_of_day?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateAcceptOfDayRequest
   */
  end_time_of_day?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateAcceptOfDayRequest
   */
  disabled?: boolean
}
/**
 *
 * @export
 * @interface EngineCreateAgentRequest
 */
export interface EngineCreateAgentRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentRequest
   */
  domain_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateAgentRequest
   */
  user?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentRequest
   */
  description?: string
}
/**
 *
 * @export
 * @interface EngineCreateAgentSkillRequest
 */
export interface EngineCreateAgentSkillRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentSkillRequest
   */
  agent_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateAgentSkillRequest
   */
  skill?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentSkillRequest
   */
  capacity?: number
}
/**
 *
 * @export
 * @interface EngineCreateAgentTeamRequest
 */
export interface EngineCreateAgentTeamRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentTeamRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentTeamRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentTeamRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateAgentTeamRequest
   */
  strategy?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  max_no_answer?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  wrap_up_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  reject_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  busy_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  no_answer_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateAgentTeamRequest
   */
  call_timeout?: number
}
/**
 *
 * @export
 * @interface EngineCreateCalendarRequest
 */
export interface EngineCreateCalendarRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateCalendarRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateCalendarRequest
   */
  start?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateCalendarRequest
   */
  finish?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateCalendarRequest
   */
  timezone?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCreateCalendarRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateCalendarRequest
   */
  domain_id?: string
}
/**
 *
 * @export
 * @interface EngineCreateExceptDateRequest
 */
export interface EngineCreateExceptDateRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateExceptDateRequest
   */
  calendar_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateExceptDateRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateExceptDateRequest
   */
  date?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateExceptDateRequest
   */
  repeat?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateExceptDateRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineCreateExceptDateRequest
   */
  domain_id?: string
}
/**
 *
 * @export
 * @interface EngineCreateOutboundResourceRequest
 */
export interface EngineCreateOutboundResourceRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateOutboundResourceRequest
   */
  limit?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateOutboundResourceRequest
   */
  enabled?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineCreateOutboundResourceRequest
   */
  rps?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateOutboundResourceRequest
   */
  reserve?: boolean
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineCreateOutboundResourceRequest
   */
  variables?: { [key: string]: string }
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceRequest
   */
  number?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateOutboundResourceRequest
   */
  max_successively_errors?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateOutboundResourceRequest
   */
  dial_string?: string
  /**
   *
   * @type {Array<string>}
   * @memberof EngineCreateOutboundResourceRequest
   */
  error_ids?: Array<string>
}
/**
 *
 * @export
 * @interface EngineCreateQueueRequest
 */
export interface EngineCreateQueueRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRequest
   */
  strategy?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateQueueRequest
   */
  enabled?: boolean
  /**
   *
   * @type {object}
   * @memberof EngineCreateQueueRequest
   */
  payload?: object
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateQueueRequest
   */
  calendar?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  priority?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  max_calls?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  sec_between_retries?: number
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRequest
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  max_of_retry?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineCreateQueueRequest
   */
  variables?: { [key: string]: string }
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  timeout?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateQueueRequest
   */
  dnc_list?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  sec_locate_agent?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRequest
   */
  type?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateQueueRequest
   */
  team?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineCreateQueueRoutingRequest
 */
export interface EngineCreateQueueRoutingRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRoutingRequest
   */
  queue_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRoutingRequest
   */
  pattern?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateQueueRoutingRequest
   */
  priority?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateQueueRoutingRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineCreateQueueRoutingRequest
   */
  domain_id?: string
}
/**
 *
 * @export
 * @interface EngineCreateResourceTeamRequest
 */
export interface EngineCreateResourceTeamRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateResourceTeamRequest
   */
  team_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateResourceTeamRequest
   */
  domain_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateResourceTeamRequest
   */
  agent?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateResourceTeamRequest
   */
  skill?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineCreateResourceTeamRequest
   */
  lvl?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateResourceTeamRequest
   */
  min_capacity?: number
  /**
   *
   * @type {number}
   * @memberof EngineCreateResourceTeamRequest
   */
  max_capacity?: number
}
/**
 *
 * @export
 * @interface EngineCreateRoutingOutboundCallRequest
 */
export interface EngineCreateRoutingOutboundCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  description?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  scheme?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  pattern?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  priority?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateRoutingOutboundCallRequest
   */
  disabled?: boolean
}
/**
 *
 * @export
 * @interface EngineCreateRoutingSchemeRequest
 */
export interface EngineCreateRoutingSchemeRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingSchemeRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingSchemeRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingSchemeRequest
   */
  description?: string
  /**
   *
   * @type {number}
   * @memberof EngineCreateRoutingSchemeRequest
   */
  type?: number
  /**
   *
   * @type {object}
   * @memberof EngineCreateRoutingSchemeRequest
   */
  scheme?: object
  /**
   *
   * @type {object}
   * @memberof EngineCreateRoutingSchemeRequest
   */
  payload?: object
  /**
   *
   * @type {boolean}
   * @memberof EngineCreateRoutingSchemeRequest
   */
  debug?: boolean
}
/**
 *
 * @export
 * @interface EngineCreateRoutingVariableRequest
 */
export interface EngineCreateRoutingVariableRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingVariableRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingVariableRequest
   */
  key?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateRoutingVariableRequest
   */
  value?: string
}
/**
 *
 * @export
 * @interface EngineCreateSkillRequest
 */
export interface EngineCreateSkillRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateSkillRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateSkillRequest
   */
  description?: string
}
/**
 *
 * @export
 * @interface EngineCreateSupervisorInTeamRequest
 */
export interface EngineCreateSupervisorInTeamRequest {
  /**
   *
   * @type {string}
   * @memberof EngineCreateSupervisorInTeamRequest
   */
  team_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineCreateSupervisorInTeamRequest
   */
  domain_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineCreateSupervisorInTeamRequest
   */
  agent?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineExceptDate
 */
export interface EngineExceptDate {
  /**
   *
   * @type {string}
   * @memberof EngineExceptDate
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineExceptDate
   */
  calendar_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineExceptDate
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineExceptDate
   */
  date?: string
  /**
   *
   * @type {number}
   * @memberof EngineExceptDate
   */
  repeat?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineExceptDate
   */
  disabled?: boolean
}
/**
 *
 * @export
 * @interface EngineListAcceptOfDay
 */
export interface EngineListAcceptOfDay {
  /**
   *
   * @type {Array<EngineAcceptOfDay>}
   * @memberof EngineListAcceptOfDay
   */
  items?: Array<EngineAcceptOfDay>
}
/**
 *
 * @export
 * @interface EngineListAgent
 */
export interface EngineListAgent {
  /**
   *
   * @type {Array<EngineAgent>}
   * @memberof EngineListAgent
   */
  items?: Array<EngineAgent>
}
/**
 *
 * @export
 * @interface EngineListAgentSkill
 */
export interface EngineListAgentSkill {
  /**
   *
   * @type {Array<EngineAgentSkillItem>}
   * @memberof EngineListAgentSkill
   */
  items?: Array<EngineAgentSkillItem>
}
/**
 *
 * @export
 * @interface EngineListAgentTeam
 */
export interface EngineListAgentTeam {
  /**
   *
   * @type {Array<EngineAgentTeam>}
   * @memberof EngineListAgentTeam
   */
  items?: Array<EngineAgentTeam>
}
/**
 *
 * @export
 * @interface EngineListCalendar
 */
export interface EngineListCalendar {
  /**
   *
   * @type {Array<EngineCalendar>}
   * @memberof EngineListCalendar
   */
  items?: Array<EngineCalendar>
}
/**
 *
 * @export
 * @interface EngineListExceptDate
 */
export interface EngineListExceptDate {
  /**
   *
   * @type {Array<EngineExceptDate>}
   * @memberof EngineListExceptDate
   */
  items?: Array<EngineExceptDate>
}
/**
 *
 * @export
 * @interface EngineListOutboundResource
 */
export interface EngineListOutboundResource {
  /**
   *
   * @type {Array<EngineOutboundResource>}
   * @memberof EngineListOutboundResource
   */
  items?: Array<EngineOutboundResource>
}
/**
 *
 * @export
 * @interface EngineListQueue
 */
export interface EngineListQueue {
  /**
   *
   * @type {Array<EngineQueue>}
   * @memberof EngineListQueue
   */
  items?: Array<EngineQueue>
}
/**
 *
 * @export
 * @interface EngineListQueueRouting
 */
export interface EngineListQueueRouting {
  /**
   *
   * @type {Array<EngineQueueRouting>}
   * @memberof EngineListQueueRouting
   */
  items?: Array<EngineQueueRouting>
}
/**
 *
 * @export
 * @interface EngineListResourceTeam
 */
export interface EngineListResourceTeam {
  /**
   *
   * @type {Array<EngineResourceTeam>}
   * @memberof EngineListResourceTeam
   */
  items?: Array<EngineResourceTeam>
}
/**
 *
 * @export
 * @interface EngineListRoutingInboundCall
 */
export interface EngineListRoutingInboundCall {
  /**
   *
   * @type {Array<EngineRoutingInboundCall>}
   * @memberof EngineListRoutingInboundCall
   */
  items?: Array<EngineRoutingInboundCall>
}
/**
 *
 * @export
 * @interface EngineListRoutingOutboundCall
 */
export interface EngineListRoutingOutboundCall {
  /**
   *
   * @type {Array<EngineRoutingOutboundCall>}
   * @memberof EngineListRoutingOutboundCall
   */
  items?: Array<EngineRoutingOutboundCall>
}
/**
 *
 * @export
 * @interface EngineListRoutingScheme
 */
export interface EngineListRoutingScheme {
  /**
   *
   * @type {Array<EngineRoutingScheme>}
   * @memberof EngineListRoutingScheme
   */
  items?: Array<EngineRoutingScheme>
}
/**
 *
 * @export
 * @interface EngineListRoutingVariable
 */
export interface EngineListRoutingVariable {
  /**
   *
   * @type {Array<EngineRoutingVariable>}
   * @memberof EngineListRoutingVariable
   */
  items?: Array<EngineRoutingVariable>
}
/**
 *
 * @export
 * @interface EngineListSkill
 */
export interface EngineListSkill {
  /**
   *
   * @type {Array<EngineSkill>}
   * @memberof EngineListSkill
   */
  items?: Array<EngineSkill>
}
/**
 *
 * @export
 * @interface EngineListSupervisorInTeam
 */
export interface EngineListSupervisorInTeam {
  /**
   *
   * @type {Array<EngineSupervisorInTeam>}
   * @memberof EngineListSupervisorInTeam
   */
  items?: Array<EngineSupervisorInTeam>
}
/**
 *
 * @export
 * @interface EngineListTimezoneResponse
 */
export interface EngineListTimezoneResponse {
  /**
   *
   * @type {Array<EngineTimezone>}
   * @memberof EngineListTimezoneResponse
   */
  items?: Array<EngineTimezone>
}
/**
 *
 * @export
 * @interface EngineLookup
 */
export interface EngineLookup {
  /**
   *
   * @type {string}
   * @memberof EngineLookup
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineLookup
   */
  name?: string
}
/**
 *
 * @export
 * @interface EngineOutboundResource
 */
export interface EngineOutboundResource {
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineOutboundResource
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineOutboundResource
   */
  updated_by?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineOutboundResource
   */
  limit?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineOutboundResource
   */
  enabled?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineOutboundResource
   */
  rps?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineOutboundResource
   */
  reserve?: boolean
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineOutboundResource
   */
  variables?: { [key: string]: string }
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  number?: string
  /**
   *
   * @type {number}
   * @memberof EngineOutboundResource
   */
  max_successively_errors?: number
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  dial_string?: string
  /**
   *
   * @type {Array<string>}
   * @memberof EngineOutboundResource
   */
  error_ids?: Array<string>
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  last_error_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineOutboundResource
   */
  successively_errors?: number
  /**
   *
   * @type {string}
   * @memberof EngineOutboundResource
   */
  last_error_at?: string
}
/**
 *
 * @export
 * @interface EngineQueue
 */
export interface EngineQueue {
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  updated_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  strategy?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineQueue
   */
  enabled?: boolean
  /**
   *
   * @type {object}
   * @memberof EngineQueue
   */
  payload?: object
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  calendar?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  priority?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  max_calls?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  sec_between_retries?: number
  /**
   *
   * @type {string}
   * @memberof EngineQueue
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  max_of_retry?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineQueue
   */
  variables?: { [key: string]: string }
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  timeout?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  dnc_list?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  sec_locate_agent?: number
  /**
   *
   * @type {number}
   * @memberof EngineQueue
   */
  type?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineQueue
   */
  team?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineQueueRouting
 */
export interface EngineQueueRouting {
  /**
   *
   * @type {string}
   * @memberof EngineQueueRouting
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineQueueRouting
   */
  queue_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineQueueRouting
   */
  pattern?: string
  /**
   *
   * @type {number}
   * @memberof EngineQueueRouting
   */
  priority?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineQueueRouting
   */
  disabled?: boolean
}
/**
 *
 * @export
 * @interface EngineResourceTeam
 */
export interface EngineResourceTeam {
  /**
   *
   * @type {string}
   * @memberof EngineResourceTeam
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineResourceTeam
   */
  team_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineResourceTeam
   */
  domain_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineResourceTeam
   */
  agent?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineResourceTeam
   */
  skill?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineResourceTeam
   */
  lvl?: number
  /**
   *
   * @type {number}
   * @memberof EngineResourceTeam
   */
  min_capacity?: number
  /**
   *
   * @type {number}
   * @memberof EngineResourceTeam
   */
  max_capacity?: number
}
/**
 *
 * @export
 * @interface EngineResponse
 */
export interface EngineResponse {
  /**
   *
   * @type {string}
   * @memberof EngineResponse
   */
  status?: string
}
/**
 *
 * @export
 * @interface EngineRoutingInboundCall
 */
export interface EngineRoutingInboundCall {
  /**
   *
   * @type {string}
   * @memberof EngineRoutingInboundCall
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingInboundCall
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingInboundCall
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingInboundCall
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineRoutingInboundCall
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingInboundCall
   */
  updated_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineRoutingInboundCall
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingInboundCall
   */
  description?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingInboundCall
   */
  start_scheme?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingInboundCall
   */
  stop_scheme?: EngineLookup
  /**
   *
   * @type {Array<string>}
   * @memberof EngineRoutingInboundCall
   */
  numbers?: Array<string>
  /**
   *
   * @type {string}
   * @memberof EngineRoutingInboundCall
   */
  host?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingInboundCall
   */
  timezone?: EngineLookup
  /**
   *
   * @type {boolean}
   * @memberof EngineRoutingInboundCall
   */
  debug?: boolean
  /**
   *
   * @type {boolean}
   * @memberof EngineRoutingInboundCall
   */
  disabled?: boolean
}
/**
 *
 * @export
 * @interface EngineRoutingOutboundCall
 */
export interface EngineRoutingOutboundCall {
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingOutboundCall
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingOutboundCall
   */
  updated_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  description?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingOutboundCall
   */
  scheme?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineRoutingOutboundCall
   */
  pattern?: string
  /**
   *
   * @type {number}
   * @memberof EngineRoutingOutboundCall
   */
  priority?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineRoutingOutboundCall
   */
  disabled?: boolean
}
/**
 *
 * @export
 * @interface EngineRoutingScheme
 */
export interface EngineRoutingScheme {
  /**
   *
   * @type {string}
   * @memberof EngineRoutingScheme
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingScheme
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingScheme
   */
  created_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingScheme
   */
  created_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineRoutingScheme
   */
  updated_at?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineRoutingScheme
   */
  updated_by?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineRoutingScheme
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingScheme
   */
  description?: string
  /**
   *
   * @type {number}
   * @memberof EngineRoutingScheme
   */
  type?: number
  /**
   *
   * @type {object}
   * @memberof EngineRoutingScheme
   */
  scheme?: object
  /**
   *
   * @type {object}
   * @memberof EngineRoutingScheme
   */
  payload?: object
  /**
   *
   * @type {boolean}
   * @memberof EngineRoutingScheme
   */
  debug?: boolean
}
/**
 *
 * @export
 * @interface EngineRoutingVariable
 */
export interface EngineRoutingVariable {
  /**
   *
   * @type {string}
   * @memberof EngineRoutingVariable
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingVariable
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingVariable
   */
  key?: string
  /**
   *
   * @type {string}
   * @memberof EngineRoutingVariable
   */
  value?: string
}
/**
 *
 * @export
 * @interface EngineSkill
 */
export interface EngineSkill {
  /**
   *
   * @type {string}
   * @memberof EngineSkill
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineSkill
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineSkill
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineSkill
   */
  description?: string
}
/**
 *
 * @export
 * @interface EngineSupervisorInTeam
 */
export interface EngineSupervisorInTeam {
  /**
   *
   * @type {string}
   * @memberof EngineSupervisorInTeam
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineSupervisorInTeam
   */
  team_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineSupervisorInTeam
   */
  domain_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineSupervisorInTeam
   */
  agent?: EngineLookup
}
/**
 *
 * @export
 * @interface EngineTimezone
 */
export interface EngineTimezone {
  /**
   *
   * @type {string}
   * @memberof EngineTimezone
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineTimezone
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineTimezone
   */
  offset?: string
}
/**
 *
 * @export
 * @interface EngineUpdateAcceptOfDayRequest
 */
export interface EngineUpdateAcceptOfDayRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAcceptOfDayRequest
   */
  calendar_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAcceptOfDayRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAcceptOfDayRequest
   */
  week_day?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAcceptOfDayRequest
   */
  start_time_of_day?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAcceptOfDayRequest
   */
  end_time_of_day?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateAcceptOfDayRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAcceptOfDayRequest
   */
  id?: string
}
/**
 *
 * @export
 * @interface EngineUpdateAgentRequest
 */
export interface EngineUpdateAgentRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentRequest
   */
  domain_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateAgentRequest
   */
  user?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentRequest
   */
  description?: string
}
/**
 *
 * @export
 * @interface EngineUpdateAgentSkillRequest
 */
export interface EngineUpdateAgentSkillRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentSkillRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentSkillRequest
   */
  agent_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateAgentSkillRequest
   */
  skill?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentSkillRequest
   */
  capacity?: number
}
/**
 *
 * @export
 * @interface EngineUpdateAgentTeamRequest
 */
export interface EngineUpdateAgentTeamRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentTeamRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentTeamRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentTeamRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentTeamRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateAgentTeamRequest
   */
  strategy?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  max_no_answer?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  wrap_up_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  reject_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  busy_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  no_answer_delay_time?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateAgentTeamRequest
   */
  call_timeout?: number
}
/**
 *
 * @export
 * @interface EngineUpdateCalendarRequest
 */
export interface EngineUpdateCalendarRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  start?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  finish?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateCalendarRequest
   */
  timezone?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateCalendarRequest
   */
  domain_id?: string
}
/**
 *
 * @export
 * @interface EngineUpdateExceptDateRequest
 */
export interface EngineUpdateExceptDateRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateExceptDateRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateExceptDateRequest
   */
  calendar_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateExceptDateRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateExceptDateRequest
   */
  date?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateExceptDateRequest
   */
  repeat?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateExceptDateRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineUpdateExceptDateRequest
   */
  domain_id?: string
}
/**
 *
 * @export
 * @interface EngineUpdateOutboundResourceRequest
 */
export interface EngineUpdateOutboundResourceRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  domain_id?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  limit?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  enabled?: boolean
  /**
   *
   * @type {number}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  rps?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  reserve?: boolean
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  variables?: { [key: string]: string }
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  number?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  max_successively_errors?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  dial_string?: string
  /**
   *
   * @type {Array<string>}
   * @memberof EngineUpdateOutboundResourceRequest
   */
  error_ids?: Array<string>
}
/**
 *
 * @export
 * @interface EngineUpdateQueueRequest
 */
export interface EngineUpdateQueueRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRequest
   */
  strategy?: string
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateQueueRequest
   */
  enabled?: boolean
  /**
   *
   * @type {object}
   * @memberof EngineUpdateQueueRequest
   */
  payload?: object
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateQueueRequest
   */
  calendar?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  priority?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  max_calls?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  sec_between_retries?: number
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRequest
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  max_of_retry?: number
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EngineUpdateQueueRequest
   */
  variables?: { [key: string]: string }
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  timeout?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateQueueRequest
   */
  dnc_list?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  sec_locate_agent?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRequest
   */
  type?: number
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateQueueRequest
   */
  team?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRequest
   */
  id?: string
}
/**
 *
 * @export
 * @interface EngineUpdateQueueRoutingRequest
 */
export interface EngineUpdateQueueRoutingRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  queue_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  pattern?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  priority?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof EngineUpdateQueueRoutingRequest
   */
  domain_id?: string
}
/**
 *
 * @export
 * @interface EngineUpdateResourceTeamRequest
 */
export interface EngineUpdateResourceTeamRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateResourceTeamRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateResourceTeamRequest
   */
  team_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateResourceTeamRequest
   */
  domain_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateResourceTeamRequest
   */
  agent?: EngineLookup
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateResourceTeamRequest
   */
  skill?: EngineLookup
  /**
   *
   * @type {number}
   * @memberof EngineUpdateResourceTeamRequest
   */
  lvl?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateResourceTeamRequest
   */
  min_capacity?: number
  /**
   *
   * @type {number}
   * @memberof EngineUpdateResourceTeamRequest
   */
  max_capacity?: number
}
/**
 *
 * @export
 * @interface EngineUpdateRoutingOutboundCallRequest
 */
export interface EngineUpdateRoutingOutboundCallRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  description?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  scheme?: EngineLookup
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  pattern?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  priority?: number
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateRoutingOutboundCallRequest
   */
  disabled?: boolean
}
/**
 *
 * @export
 * @interface EngineUpdateRoutingSchemeRequest
 */
export interface EngineUpdateRoutingSchemeRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingSchemeRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingSchemeRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingSchemeRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingSchemeRequest
   */
  description?: string
  /**
   *
   * @type {number}
   * @memberof EngineUpdateRoutingSchemeRequest
   */
  type?: number
  /**
   *
   * @type {object}
   * @memberof EngineUpdateRoutingSchemeRequest
   */
  scheme?: object
  /**
   *
   * @type {object}
   * @memberof EngineUpdateRoutingSchemeRequest
   */
  payload?: object
  /**
   *
   * @type {boolean}
   * @memberof EngineUpdateRoutingSchemeRequest
   */
  debug?: boolean
}
/**
 *
 * @export
 * @interface EngineUpdateRoutingVariableRequest
 */
export interface EngineUpdateRoutingVariableRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingVariableRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingVariableRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingVariableRequest
   */
  key?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateRoutingVariableRequest
   */
  value?: string
}
/**
 *
 * @export
 * @interface EngineUpdateSkillRequest
 */
export interface EngineUpdateSkillRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSkillRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSkillRequest
   */
  domain_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSkillRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSkillRequest
   */
  description?: string
}
/**
 *
 * @export
 * @interface EngineUpdateSupervisorInTeamRequest
 */
export interface EngineUpdateSupervisorInTeamRequest {
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSupervisorInTeamRequest
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSupervisorInTeamRequest
   */
  team_id?: string
  /**
   *
   * @type {string}
   * @memberof EngineUpdateSupervisorInTeamRequest
   */
  domain_id?: string
  /**
   *
   * @type {EngineLookup}
   * @memberof EngineUpdateSupervisorInTeamRequest
   */
  agent?: EngineLookup
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the  `Value` type union.     The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */
export enum ProtobufNullValue {
  NULLVALUE = 'NULL_VALUE',
}

/**
 * AgentServiceApi - axios parameter creator
 * @export
 */
export const AgentServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(
      body: EngineCreateAgentRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgent.'
        )
      }
      const localVarPath = `/call_center/agents`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateAgentRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent(id: string, domain_id?: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Agent
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent(
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/agents`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(
      id: string,
      body: EngineUpdateAgentRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgent.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateAgentRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus(
      id: string,
      body: EngineAgentStatusRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgentStatus.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentStatus.'
        )
      }
      const localVarPath = `/call_center/agents/{id}/status`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineAgentStatusRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AgentServiceApi - functional programming interface
 * @export
 */
export const AgentServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(
      body: EngineCreateAgentRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).createAgent(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).deleteAgent(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).readAgent(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Agent
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgent> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgent(domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(
      id: string,
      body: EngineUpdateAgentRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).updateAgent(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus(
      id: string,
      body: EngineAgentStatusRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResponse> {
      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(
        configuration
      ).updateAgentStatus(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AgentServiceApi - factory interface
 * @export
 */
export const AgentServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(body: EngineCreateAgentRequest, options?: any) {
      return AgentServiceApiFp(configuration).createAgent(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(id: string, domain_id?: string, options?: any) {
      return AgentServiceApiFp(configuration).deleteAgent(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent(id: string, domain_id?: string, options?: any) {
      return AgentServiceApiFp(configuration).readAgent(id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of Agent
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).searchAgent(
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(id: string, body: EngineUpdateAgentRequest, options?: any) {
      return AgentServiceApiFp(configuration).updateAgent(id, body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus(
      id: string,
      body: EngineAgentStatusRequest,
      options?: any
    ) {
      return AgentServiceApiFp(configuration).updateAgentStatus(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * AgentServiceApi - object-oriented interface
 * @export
 * @class AgentServiceApi
 * @extends {BaseAPI}
 */
export class AgentServiceApi extends BaseAPI {
  /**
   *
   * @summary Create Agent
   * @param {EngineCreateAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public createAgent(body: EngineCreateAgentRequest, options?: any) {
    return AgentServiceApiFp(this.configuration).createAgent(body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Remove Agent
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public deleteAgent(id: string, domain_id?: string, options?: any) {
    return AgentServiceApiFp(this.configuration).deleteAgent(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Agent item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public readAgent(id: string, domain_id?: string, options?: any) {
    return AgentServiceApiFp(this.configuration).readAgent(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of Agent
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgent(
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).searchAgent(
      domain_id,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update Agent
   * @param {string} id
   * @param {EngineUpdateAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public updateAgent(
    id: string,
    body: EngineUpdateAgentRequest,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).updateAgent(id, body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Change agent status
   * @param {string} id
   * @param {EngineAgentStatusRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public updateAgentStatus(
    id: string,
    body: EngineAgentStatusRequest,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration).updateAgentStatus(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * AgentSkillServiceApi - axios parameter creator
 * @export
 */
export const AgentSkillServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {string} agent_id
     * @param {EngineCreateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill(
      agent_id: string,
      body: EngineCreateAgentSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling createAgentSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agent_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateAgentSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling deleteAgentSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling readAgentSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agent_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill(
      agent_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling searchAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agent_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill(
      agent_id: string,
      id: string,
      body: EngineUpdateAgentSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'agent_id' is not null or undefined
      if (agent_id === null || agent_id === undefined) {
        throw new RequiredError(
          'agent_id',
          'Required parameter agent_id was null or undefined when calling updateAgentSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgentSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentSkill.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateAgentSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AgentSkillServiceApi - functional programming interface
 * @export
 */
export const AgentSkillServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {string} agent_id
     * @param {EngineCreateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill(
      agent_id: string,
      body: EngineCreateAgentSkillRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).createAgentSkill(agent_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).deleteAgentSkill(agent_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).readAgentSkill(agent_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agent_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill(
      agent_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgentSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).searchAgentSkill(agent_id, domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill(
      agent_id: string,
      id: string,
      body: EngineUpdateAgentSkillRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentSkill> {
      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(
        configuration
      ).updateAgentSkill(agent_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AgentSkillServiceApi - factory interface
 * @export
 */
export const AgentSkillServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {string} agent_id
     * @param {EngineCreateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill(
      agent_id: string,
      body: EngineCreateAgentSkillRequest,
      options?: any
    ) {
      return AgentSkillServiceApiFp(configuration).createAgentSkill(
        agent_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentSkillServiceApiFp(configuration).deleteAgentSkill(
        agent_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill(
      agent_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return AgentSkillServiceApiFp(configuration).readAgentSkill(
        agent_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agent_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill(
      agent_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return AgentSkillServiceApiFp(configuration).searchAgentSkill(
        agent_id,
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill(
      agent_id: string,
      id: string,
      body: EngineUpdateAgentSkillRequest,
      options?: any
    ) {
      return AgentSkillServiceApiFp(configuration).updateAgentSkill(
        agent_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * AgentSkillServiceApi - object-oriented interface
 * @export
 * @class AgentSkillServiceApi
 * @extends {BaseAPI}
 */
export class AgentSkillServiceApi extends BaseAPI {
  /**
   *
   * @summary Create AgentSkill
   * @param {string} agent_id
   * @param {EngineCreateAgentSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public createAgentSkill(
    agent_id: string,
    body: EngineCreateAgentSkillRequest,
    options?: any
  ) {
    return AgentSkillServiceApiFp(this.configuration).createAgentSkill(
      agent_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove AgentSkill
   * @param {string} agent_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public deleteAgentSkill(
    agent_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentSkillServiceApiFp(this.configuration).deleteAgentSkill(
      agent_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary AgentSkill item
   * @param {string} agent_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public readAgentSkill(
    agent_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return AgentSkillServiceApiFp(this.configuration).readAgentSkill(
      agent_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of AgentSkill
   * @param {string} agent_id
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public searchAgentSkill(
    agent_id: string,
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return AgentSkillServiceApiFp(this.configuration).searchAgentSkill(
      agent_id,
      domain_id,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update AgentSkill
   * @param {string} agent_id
   * @param {string} id
   * @param {EngineUpdateAgentSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentSkillServiceApi
   */
  public updateAgentSkill(
    agent_id: string,
    id: string,
    body: EngineUpdateAgentSkillRequest,
    options?: any
  ) {
    return AgentSkillServiceApiFp(this.configuration).updateAgentSkill(
      agent_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * AgentTeamServiceApi - axios parameter creator
 * @export
 */
export const AgentTeamServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam(
      body: EngineCreateAgentTeamRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateAgentTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam(
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/teams`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {string} id
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam(
      id: string,
      body: EngineUpdateAgentTeamRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgentTeam.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateAgentTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AgentTeamServiceApi - functional programming interface
 * @export
 */
export const AgentTeamServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam(
      body: EngineCreateAgentTeamRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentTeam> {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).createAgentTeam(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentTeam> {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteAgentTeam(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentTeam> {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).readAgentTeam(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAgentTeam> {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).searchAgentTeam(domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {string} id
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam(
      id: string,
      body: EngineUpdateAgentTeamRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAgentTeam> {
      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(
        configuration
      ).updateAgentTeam(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AgentTeamServiceApi - factory interface
 * @export
 */
export const AgentTeamServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any) {
      return AgentTeamServiceApiFp(configuration).createAgentTeam(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam(id: string, domain_id?: string, options?: any) {
      return AgentTeamServiceApiFp(configuration).deleteAgentTeam(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam(id: string, domain_id?: string, options?: any) {
      return AgentTeamServiceApiFp(configuration).readAgentTeam(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return AgentTeamServiceApiFp(configuration).searchAgentTeam(
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {string} id
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam(
      id: string,
      body: EngineUpdateAgentTeamRequest,
      options?: any
    ) {
      return AgentTeamServiceApiFp(configuration).updateAgentTeam(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * AgentTeamServiceApi - object-oriented interface
 * @export
 * @class AgentTeamServiceApi
 * @extends {BaseAPI}
 */
export class AgentTeamServiceApi extends BaseAPI {
  /**
   *
   * @summary Create AgentTeam
   * @param {EngineCreateAgentTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  public createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any) {
    return AgentTeamServiceApiFp(this.configuration).createAgentTeam(
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove AgentTeam
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  public deleteAgentTeam(id: string, domain_id?: string, options?: any) {
    return AgentTeamServiceApiFp(this.configuration).deleteAgentTeam(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary AgentTeam item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  public readAgentTeam(id: string, domain_id?: string, options?: any) {
    return AgentTeamServiceApiFp(this.configuration).readAgentTeam(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of AgentTeam
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  public searchAgentTeam(
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return AgentTeamServiceApiFp(this.configuration).searchAgentTeam(
      domain_id,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update AgentTeam
   * @param {string} id
   * @param {EngineUpdateAgentTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTeamServiceApi
   */
  public updateAgentTeam(
    id: string,
    body: EngineUpdateAgentTeamRequest,
    options?: any
  ) {
    return AgentTeamServiceApiFp(this.configuration).updateAgentTeam(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * CalendarServiceApi - axios parameter creator
 * @export
 */
export const CalendarServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create AcceptOfDay
     * @param {string} calendar_id
     * @param {EngineCreateAcceptOfDayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAcceptOfDay(
      calendar_id: string,
      body: EngineCreateAcceptOfDayRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'calendar_id' is not null or undefined
      if (calendar_id === null || calendar_id === undefined) {
        throw new RequiredError(
          'calendar_id',
          'Required parameter calendar_id was null or undefined when calling createAcceptOfDay.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAcceptOfDay.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/accepts`.replace(
        `{${'calendar_id'}}`,
        encodeURIComponent(String(calendar_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateAcceptOfDayRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar(
      body: EngineCreateCalendarRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createCalendar.'
        )
      }
      const localVarPath = `/calendars`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateCalendarRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create ExceptDate
     * @param {string} calendar_id
     * @param {EngineCreateExceptDateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExceptDate(
      calendar_id: string,
      body: EngineCreateExceptDateRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'calendar_id' is not null or undefined
      if (calendar_id === null || calendar_id === undefined) {
        throw new RequiredError(
          'calendar_id',
          'Required parameter calendar_id was null or undefined when calling createExceptDate.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createExceptDate.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/excepts`.replace(
        `{${'calendar_id'}}`,
        encodeURIComponent(String(calendar_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateExceptDateRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete AcceptOfDay
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAcceptOfDay(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'calendar_id' is not null or undefined
      if (calendar_id === null || calendar_id === undefined) {
        throw new RequiredError(
          'calendar_id',
          'Required parameter calendar_id was null or undefined when calling deleteAcceptOfDay.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAcceptOfDay.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/accepts/{id}`
        .replace(`{${'calendar_id'}}`, encodeURIComponent(String(calendar_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteCalendar.'
        )
      }
      const localVarPath = `/calendars/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete ExceptDate
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteExceptDate(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'calendar_id' is not null or undefined
      if (calendar_id === null || calendar_id === undefined) {
        throw new RequiredError(
          'calendar_id',
          'Required parameter calendar_id was null or undefined when calling deleteExceptDate.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteExceptDate.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/excepts/{id}`
        .replace(`{${'calendar_id'}}`, encodeURIComponent(String(calendar_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Read AcceptOfDay
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAcceptOfDay(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'calendar_id' is not null or undefined
      if (calendar_id === null || calendar_id === undefined) {
        throw new RequiredError(
          'calendar_id',
          'Required parameter calendar_id was null or undefined when calling readAcceptOfDay.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAcceptOfDay.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/accepts/{id}`
        .replace(`{${'calendar_id'}}`, encodeURIComponent(String(calendar_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readCalendar.'
        )
      }
      const localVarPath = `/calendars/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Read ExceptDate
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readExceptDate(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'calendar_id' is not null or undefined
      if (calendar_id === null || calendar_id === undefined) {
        throw new RequiredError(
          'calendar_id',
          'Required parameter calendar_id was null or undefined when calling readExceptDate.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readExceptDate.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/excepts/{id}`
        .replace(`{${'calendar_id'}}`, encodeURIComponent(String(calendar_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List AcceptOfDay
     * @param {string} calendar_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAcceptOfDay(
      calendar_id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'calendar_id' is not null or undefined
      if (calendar_id === null || calendar_id === undefined) {
        throw new RequiredError(
          'calendar_id',
          'Required parameter calendar_id was null or undefined when calling searchAcceptOfDay.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/accepts`.replace(
        `{${'calendar_id'}}`,
        encodeURIComponent(String(calendar_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of calendar
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar(
      page?: number,
      size?: number,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/calendars`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List ExceptDate
     * @param {string} calendar_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchExceptDate(
      calendar_id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'calendar_id' is not null or undefined
      if (calendar_id === null || calendar_id === undefined) {
        throw new RequiredError(
          'calendar_id',
          'Required parameter calendar_id was null or undefined when calling searchExceptDate.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/excepts`.replace(
        `{${'calendar_id'}}`,
        encodeURIComponent(String(calendar_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List timezones
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones(
      page?: number,
      size?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/calendars/timezones`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update AcceptOfDay
     * @param {string} calendar_id
     * @param {string} id
     * @param {EngineUpdateAcceptOfDayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAcceptOfDay(
      calendar_id: string,
      id: string,
      body: EngineUpdateAcceptOfDayRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'calendar_id' is not null or undefined
      if (calendar_id === null || calendar_id === undefined) {
        throw new RequiredError(
          'calendar_id',
          'Required parameter calendar_id was null or undefined when calling updateAcceptOfDay.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAcceptOfDay.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAcceptOfDay.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/accepts/{id}`
        .replace(`{${'calendar_id'}}`, encodeURIComponent(String(calendar_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateAcceptOfDayRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update calendar
     * @param {string} id
     * @param {EngineUpdateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar(
      id: string,
      body: EngineUpdateCalendarRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateCalendar.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateCalendar.'
        )
      }
      const localVarPath = `/calendars/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateCalendarRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update ExceptDate
     * @param {string} calendar_id
     * @param {string} id
     * @param {EngineUpdateExceptDateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExceptDate(
      calendar_id: string,
      id: string,
      body: EngineUpdateExceptDateRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'calendar_id' is not null or undefined
      if (calendar_id === null || calendar_id === undefined) {
        throw new RequiredError(
          'calendar_id',
          'Required parameter calendar_id was null or undefined when calling updateExceptDate.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateExceptDate.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateExceptDate.'
        )
      }
      const localVarPath = `/calendars/{calendar_id}/excepts/{id}`
        .replace(`{${'calendar_id'}}`, encodeURIComponent(String(calendar_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateExceptDateRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CalendarServiceApi - functional programming interface
 * @export
 */
export const CalendarServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create AcceptOfDay
     * @param {string} calendar_id
     * @param {EngineCreateAcceptOfDayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAcceptOfDay(
      calendar_id: string,
      body: EngineCreateAcceptOfDayRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAcceptOfDay> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).createAcceptOfDay(calendar_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar(
      body: EngineCreateCalendarRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCalendar> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).createCalendar(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create ExceptDate
     * @param {string} calendar_id
     * @param {EngineCreateExceptDateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExceptDate(
      calendar_id: string,
      body: EngineCreateExceptDateRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineExceptDate> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).createExceptDate(calendar_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Delete AcceptOfDay
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAcceptOfDay(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAcceptOfDay> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).deleteAcceptOfDay(calendar_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCalendar> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).deleteCalendar(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Delete ExceptDate
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteExceptDate(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineExceptDate> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).deleteExceptDate(calendar_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Read AcceptOfDay
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAcceptOfDay(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAcceptOfDay> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).readAcceptOfDay(calendar_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCalendar> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).readCalendar(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Read ExceptDate
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readExceptDate(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineExceptDate> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).readExceptDate(calendar_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List AcceptOfDay
     * @param {string} calendar_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAcceptOfDay(
      calendar_id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListAcceptOfDay> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).searchAcceptOfDay(calendar_id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of calendar
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar(
      page?: number,
      size?: number,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListCalendar> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).searchCalendar(page, size, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List ExceptDate
     * @param {string} calendar_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchExceptDate(
      calendar_id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListExceptDate> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).searchExceptDate(calendar_id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List timezones
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones(
      page?: number,
      size?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListTimezoneResponse> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).searchTimezones(page, size, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update AcceptOfDay
     * @param {string} calendar_id
     * @param {string} id
     * @param {EngineUpdateAcceptOfDayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAcceptOfDay(
      calendar_id: string,
      id: string,
      body: EngineUpdateAcceptOfDayRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineAcceptOfDay> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).updateAcceptOfDay(calendar_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update calendar
     * @param {string} id
     * @param {EngineUpdateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar(
      id: string,
      body: EngineUpdateCalendarRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineCalendar> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).updateCalendar(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update ExceptDate
     * @param {string} calendar_id
     * @param {string} id
     * @param {EngineUpdateExceptDateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExceptDate(
      calendar_id: string,
      id: string,
      body: EngineUpdateExceptDateRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineExceptDate> {
      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(
        configuration
      ).updateExceptDate(calendar_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * CalendarServiceApi - factory interface
 * @export
 */
export const CalendarServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create AcceptOfDay
     * @param {string} calendar_id
     * @param {EngineCreateAcceptOfDayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAcceptOfDay(
      calendar_id: string,
      body: EngineCreateAcceptOfDayRequest,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).createAcceptOfDay(
        calendar_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar(body: EngineCreateCalendarRequest, options?: any) {
      return CalendarServiceApiFp(configuration).createCalendar(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Create ExceptDate
     * @param {string} calendar_id
     * @param {EngineCreateExceptDateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExceptDate(
      calendar_id: string,
      body: EngineCreateExceptDateRequest,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).createExceptDate(
        calendar_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Delete AcceptOfDay
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAcceptOfDay(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).deleteAcceptOfDay(
        calendar_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar(id: string, domain_id?: string, options?: any) {
      return CalendarServiceApiFp(configuration).deleteCalendar(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Delete ExceptDate
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteExceptDate(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).deleteExceptDate(
        calendar_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Read AcceptOfDay
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAcceptOfDay(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).readAcceptOfDay(
        calendar_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar(id: string, domain_id?: string, options?: any) {
      return CalendarServiceApiFp(configuration).readCalendar(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Read ExceptDate
     * @param {string} calendar_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readExceptDate(
      calendar_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).readExceptDate(
        calendar_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List AcceptOfDay
     * @param {string} calendar_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAcceptOfDay(calendar_id: string, domain_id?: string, options?: any) {
      return CalendarServiceApiFp(configuration).searchAcceptOfDay(
        calendar_id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of calendar
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar(
      page?: number,
      size?: number,
      domain_id?: string,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).searchCalendar(
        page,
        size,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List ExceptDate
     * @param {string} calendar_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchExceptDate(calendar_id: string, domain_id?: string, options?: any) {
      return CalendarServiceApiFp(configuration).searchExceptDate(
        calendar_id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List timezones
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones(page?: number, size?: number, options?: any) {
      return CalendarServiceApiFp(configuration).searchTimezones(
        page,
        size,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update AcceptOfDay
     * @param {string} calendar_id
     * @param {string} id
     * @param {EngineUpdateAcceptOfDayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAcceptOfDay(
      calendar_id: string,
      id: string,
      body: EngineUpdateAcceptOfDayRequest,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).updateAcceptOfDay(
        calendar_id,
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update calendar
     * @param {string} id
     * @param {EngineUpdateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar(
      id: string,
      body: EngineUpdateCalendarRequest,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).updateCalendar(
        id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update ExceptDate
     * @param {string} calendar_id
     * @param {string} id
     * @param {EngineUpdateExceptDateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExceptDate(
      calendar_id: string,
      id: string,
      body: EngineUpdateExceptDateRequest,
      options?: any
    ) {
      return CalendarServiceApiFp(configuration).updateExceptDate(
        calendar_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * CalendarServiceApi - object-oriented interface
 * @export
 * @class CalendarServiceApi
 * @extends {BaseAPI}
 */
export class CalendarServiceApi extends BaseAPI {
  /**
   *
   * @summary Create AcceptOfDay
   * @param {string} calendar_id
   * @param {EngineCreateAcceptOfDayRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public createAcceptOfDay(
    calendar_id: string,
    body: EngineCreateAcceptOfDayRequest,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).createAcceptOfDay(
      calendar_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Create calendar
   * @param {EngineCreateCalendarRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public createCalendar(body: EngineCreateCalendarRequest, options?: any) {
    return CalendarServiceApiFp(this.configuration).createCalendar(
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Create ExceptDate
   * @param {string} calendar_id
   * @param {EngineCreateExceptDateRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public createExceptDate(
    calendar_id: string,
    body: EngineCreateExceptDateRequest,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).createExceptDate(
      calendar_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Delete AcceptOfDay
   * @param {string} calendar_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public deleteAcceptOfDay(
    calendar_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).deleteAcceptOfDay(
      calendar_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove calendar
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public deleteCalendar(id: string, domain_id?: string, options?: any) {
    return CalendarServiceApiFp(this.configuration).deleteCalendar(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Delete ExceptDate
   * @param {string} calendar_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public deleteExceptDate(
    calendar_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).deleteExceptDate(
      calendar_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Read AcceptOfDay
   * @param {string} calendar_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public readAcceptOfDay(
    calendar_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).readAcceptOfDay(
      calendar_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Calendar item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public readCalendar(id: string, domain_id?: string, options?: any) {
    return CalendarServiceApiFp(this.configuration).readCalendar(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Read ExceptDate
   * @param {string} calendar_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public readExceptDate(
    calendar_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).readExceptDate(
      calendar_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List AcceptOfDay
   * @param {string} calendar_id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public searchAcceptOfDay(
    calendar_id: string,
    domain_id?: string,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).searchAcceptOfDay(
      calendar_id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of calendar
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public searchCalendar(
    page?: number,
    size?: number,
    domain_id?: string,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).searchCalendar(
      page,
      size,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List ExceptDate
   * @param {string} calendar_id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public searchExceptDate(
    calendar_id: string,
    domain_id?: string,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).searchExceptDate(
      calendar_id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List timezones
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public searchTimezones(page?: number, size?: number, options?: any) {
    return CalendarServiceApiFp(this.configuration).searchTimezones(
      page,
      size,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update AcceptOfDay
   * @param {string} calendar_id
   * @param {string} id
   * @param {EngineUpdateAcceptOfDayRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public updateAcceptOfDay(
    calendar_id: string,
    id: string,
    body: EngineUpdateAcceptOfDayRequest,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).updateAcceptOfDay(
      calendar_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update calendar
   * @param {string} id
   * @param {EngineUpdateCalendarRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public updateCalendar(
    id: string,
    body: EngineUpdateCalendarRequest,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).updateCalendar(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update ExceptDate
   * @param {string} calendar_id
   * @param {string} id
   * @param {EngineUpdateExceptDateRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarServiceApi
   */
  public updateExceptDate(
    calendar_id: string,
    id: string,
    body: EngineUpdateExceptDateRequest,
    options?: any
  ) {
    return CalendarServiceApiFp(this.configuration).updateExceptDate(
      calendar_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * OutboundResourceServiceApi - axios parameter creator
 * @export
 */
export const OutboundResourceServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource(
      body: EngineCreateOutboundResourceRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateOutboundResourceRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource(
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/resources`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource(
      id: string,
      body: EngineUpdateOutboundResourceRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateOutboundResource.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateOutboundResourceRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OutboundResourceServiceApi - functional programming interface
 * @export
 */
export const OutboundResourceServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource(
      body: EngineCreateOutboundResourceRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).createOutboundResource(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).deleteOutboundResource(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).readOutboundResource(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).searchOutboundResource(domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource(
      id: string,
      body: EngineUpdateOutboundResourceRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineOutboundResource> {
      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).updateOutboundResource(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * OutboundResourceServiceApi - factory interface
 * @export
 */
export const OutboundResourceServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource(
      body: EngineCreateOutboundResourceRequest,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(configuration).createOutboundResource(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource(id: string, domain_id?: string, options?: any) {
      return OutboundResourceServiceApiFp(configuration).deleteOutboundResource(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource(id: string, domain_id?: string, options?: any) {
      return OutboundResourceServiceApiFp(configuration).readOutboundResource(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(configuration).searchOutboundResource(
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource(
      id: string,
      body: EngineUpdateOutboundResourceRequest,
      options?: any
    ) {
      return OutboundResourceServiceApiFp(configuration).updateOutboundResource(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * OutboundResourceServiceApi - object-oriented interface
 * @export
 * @class OutboundResourceServiceApi
 * @extends {BaseAPI}
 */
export class OutboundResourceServiceApi extends BaseAPI {
  /**
   *
   * @summary Create OutboundResource
   * @param {EngineCreateOutboundResourceRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public createOutboundResource(
    body: EngineCreateOutboundResourceRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).createOutboundResource(body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove OutboundResource
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public deleteOutboundResource(id: string, domain_id?: string, options?: any) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).deleteOutboundResource(id, domain_id, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary OutboundResource item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public readOutboundResource(id: string, domain_id?: string, options?: any) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).readOutboundResource(id, domain_id, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of OutboundResource
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public searchOutboundResource(
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).searchOutboundResource(domain_id, size, page, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Update OutboundResource
   * @param {string} id
   * @param {EngineUpdateOutboundResourceRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public updateOutboundResource(
    id: string,
    body: EngineUpdateOutboundResourceRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(
      this.configuration
    ).updateOutboundResource(id, body, options)(this.axios, this.basePath)
  }
}

/**
 * QueueRoutingServiceApi - axios parameter creator
 * @export
 */
export const QueueRoutingServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary CreateQueueRouting
     * @param {string} queue_id
     * @param {EngineCreateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueRouting(
      queue_id: string,
      body: EngineCreateQueueRoutingRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling createQueueRouting.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createQueueRouting.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/routings`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateQueueRoutingRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling deleteQueueRouting.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteQueueRouting.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling readQueueRouting.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readQueueRouting.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueRouting(
      queue_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling searchQueueRouting.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/routings`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queue_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary UpdateQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueRouting(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueRoutingRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'queue_id' is not null or undefined
      if (queue_id === null || queue_id === undefined) {
        throw new RequiredError(
          'queue_id',
          'Required parameter queue_id was null or undefined when calling updateQueueRouting.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateQueueRouting.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateQueueRouting.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateQueueRoutingRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * QueueRoutingServiceApi - functional programming interface
 * @export
 */
export const QueueRoutingServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary CreateQueueRouting
     * @param {string} queue_id
     * @param {EngineCreateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueRouting(
      queue_id: string,
      body: EngineCreateQueueRoutingRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueRouting> {
      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(
        configuration
      ).createQueueRouting(queue_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueRouting> {
      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(
        configuration
      ).deleteQueueRouting(queue_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueRouting> {
      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(
        configuration
      ).readQueueRouting(queue_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueRouting(
      queue_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListQueueRouting> {
      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(
        configuration
      ).searchQueueRouting(queue_id, domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary UpdateQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueRouting(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueRoutingRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineQueueRouting> {
      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(
        configuration
      ).updateQueueRouting(queue_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * QueueRoutingServiceApi - factory interface
 * @export
 */
export const QueueRoutingServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary CreateQueueRouting
     * @param {string} queue_id
     * @param {EngineCreateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueRouting(
      queue_id: string,
      body: EngineCreateQueueRoutingRequest,
      options?: any
    ) {
      return QueueRoutingServiceApiFp(configuration).createQueueRouting(
        queue_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return QueueRoutingServiceApiFp(configuration).deleteQueueRouting(
        queue_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueRouting(
      queue_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return QueueRoutingServiceApiFp(configuration).readQueueRouting(
        queue_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueRouting(
      queue_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return QueueRoutingServiceApiFp(configuration).searchQueueRouting(
        queue_id,
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary UpdateQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueRouting(
      queue_id: string,
      id: string,
      body: EngineUpdateQueueRoutingRequest,
      options?: any
    ) {
      return QueueRoutingServiceApiFp(configuration).updateQueueRouting(
        queue_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * QueueRoutingServiceApi - object-oriented interface
 * @export
 * @class QueueRoutingServiceApi
 * @extends {BaseAPI}
 */
export class QueueRoutingServiceApi extends BaseAPI {
  /**
   *
   * @summary CreateQueueRouting
   * @param {string} queue_id
   * @param {EngineCreateQueueRoutingRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueRoutingServiceApi
   */
  public createQueueRouting(
    queue_id: string,
    body: EngineCreateQueueRoutingRequest,
    options?: any
  ) {
    return QueueRoutingServiceApiFp(this.configuration).createQueueRouting(
      queue_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary DeleteQueueRouting
   * @param {string} queue_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueRoutingServiceApi
   */
  public deleteQueueRouting(
    queue_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return QueueRoutingServiceApiFp(this.configuration).deleteQueueRouting(
      queue_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary ReadQueueRouting
   * @param {string} queue_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueRoutingServiceApi
   */
  public readQueueRouting(
    queue_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return QueueRoutingServiceApiFp(this.configuration).readQueueRouting(
      queue_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary SearchQueueRouting
   * @param {string} queue_id
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueRoutingServiceApi
   */
  public searchQueueRouting(
    queue_id: string,
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return QueueRoutingServiceApiFp(this.configuration).searchQueueRouting(
      queue_id,
      domain_id,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary UpdateQueueRouting
   * @param {string} queue_id
   * @param {string} id
   * @param {EngineUpdateQueueRoutingRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueRoutingServiceApi
   */
  public updateQueueRouting(
    queue_id: string,
    id: string,
    body: EngineUpdateQueueRoutingRequest,
    options?: any
  ) {
    return QueueRoutingServiceApiFp(this.configuration).updateQueueRouting(
      queue_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * QueueServiceApi - axios parameter creator
 * @export
 */
export const QueueServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue(
      body: EngineCreateQueueRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createQueue.'
        )
      }
      const localVarPath = `/call_center/queues`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateQueueRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue(id: string, domain_id?: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Queue
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue(
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/queues`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Queue
     * @param {string} id
     * @param {EngineUpdateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue(
      id: string,
      body: EngineUpdateQueueRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateQueue.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateQueueRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * QueueServiceApi - functional programming interface
 * @export
 */
export const QueueServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue(
      body: EngineCreateQueueRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).createQueue(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).deleteQueue(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).readQueue(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Queue
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).searchQueue(domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Queue
     * @param {string} id
     * @param {EngineUpdateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue(
      id: string,
      body: EngineUpdateQueueRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {
      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(
        configuration
      ).updateQueue(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * QueueServiceApi - factory interface
 * @export
 */
export const QueueServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue(body: EngineCreateQueueRequest, options?: any) {
      return QueueServiceApiFp(configuration).createQueue(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue(id: string, domain_id?: string, options?: any) {
      return QueueServiceApiFp(configuration).deleteQueue(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue(id: string, domain_id?: string, options?: any) {
      return QueueServiceApiFp(configuration).readQueue(id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of Queue
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return QueueServiceApiFp(configuration).searchQueue(
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update Queue
     * @param {string} id
     * @param {EngineUpdateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue(id: string, body: EngineUpdateQueueRequest, options?: any) {
      return QueueServiceApiFp(configuration).updateQueue(id, body, options)(
        axios,
        basePath
      )
    },
  }
}

/**
 * QueueServiceApi - object-oriented interface
 * @export
 * @class QueueServiceApi
 * @extends {BaseAPI}
 */
export class QueueServiceApi extends BaseAPI {
  /**
   *
   * @summary Create Queue
   * @param {EngineCreateQueueRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public createQueue(body: EngineCreateQueueRequest, options?: any) {
    return QueueServiceApiFp(this.configuration).createQueue(body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Remove Queue
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public deleteQueue(id: string, domain_id?: string, options?: any) {
    return QueueServiceApiFp(this.configuration).deleteQueue(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Queue item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public readQueue(id: string, domain_id?: string, options?: any) {
    return QueueServiceApiFp(this.configuration).readQueue(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of Queue
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public searchQueue(
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return QueueServiceApiFp(this.configuration).searchQueue(
      domain_id,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update Queue
   * @param {string} id
   * @param {EngineUpdateQueueRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueServiceApi
   */
  public updateQueue(
    id: string,
    body: EngineUpdateQueueRequest,
    options?: any
  ) {
    return QueueServiceApiFp(this.configuration).updateQueue(id, body, options)(
      this.axios,
      this.basePath
    )
  }
}

/**
 * ResourceTeamServiceApi - axios parameter creator
 * @export
 */
export const ResourceTeamServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create ResourceTeam
     * @param {string} team_id
     * @param {EngineCreateResourceTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeam(
      team_id: string,
      body: EngineCreateResourceTeamRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling createResourceTeam.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createResourceTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/resources`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(team_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateResourceTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove ResourceTeam
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling deleteResourceTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteResourceTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/resources/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ResourceTeam item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling readResourceTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readResourceTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/resources/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of ResourceTeam
     * @param {string} team_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeam(
      team_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling searchResourceTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/resources`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(team_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update ResourceTeam
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeam(
      team_id: string,
      id: string,
      body: EngineUpdateResourceTeamRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling updateResourceTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateResourceTeam.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateResourceTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/resources/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateResourceTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ResourceTeamServiceApi - functional programming interface
 * @export
 */
export const ResourceTeamServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create ResourceTeam
     * @param {string} team_id
     * @param {EngineCreateResourceTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeam(
      team_id: string,
      body: EngineCreateResourceTeamRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeam> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).createResourceTeam(team_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove ResourceTeam
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeam> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteResourceTeam(team_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ResourceTeam item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeam> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).readResourceTeam(team_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of ResourceTeam
     * @param {string} team_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeam(
      team_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListResourceTeam> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).searchResourceTeam(team_id, domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update ResourceTeam
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeam(
      team_id: string,
      id: string,
      body: EngineUpdateResourceTeamRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineResourceTeam> {
      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(
        configuration
      ).updateResourceTeam(team_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * ResourceTeamServiceApi - factory interface
 * @export
 */
export const ResourceTeamServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create ResourceTeam
     * @param {string} team_id
     * @param {EngineCreateResourceTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceTeam(
      team_id: string,
      body: EngineCreateResourceTeamRequest,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).createResourceTeam(
        team_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove ResourceTeam
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).deleteResourceTeam(
        team_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary ResourceTeam item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readResourceTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).readResourceTeam(
        team_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of ResourceTeam
     * @param {string} team_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchResourceTeam(
      team_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).searchResourceTeam(
        team_id,
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update ResourceTeam
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceTeam(
      team_id: string,
      id: string,
      body: EngineUpdateResourceTeamRequest,
      options?: any
    ) {
      return ResourceTeamServiceApiFp(configuration).updateResourceTeam(
        team_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * ResourceTeamServiceApi - object-oriented interface
 * @export
 * @class ResourceTeamServiceApi
 * @extends {BaseAPI}
 */
export class ResourceTeamServiceApi extends BaseAPI {
  /**
   *
   * @summary Create ResourceTeam
   * @param {string} team_id
   * @param {EngineCreateResourceTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public createResourceTeam(
    team_id: string,
    body: EngineCreateResourceTeamRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).createResourceTeam(
      team_id,
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove ResourceTeam
   * @param {string} team_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public deleteResourceTeam(
    team_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeam(
      team_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary ResourceTeam item
   * @param {string} team_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public readResourceTeam(
    team_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).readResourceTeam(
      team_id,
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of ResourceTeam
   * @param {string} team_id
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public searchResourceTeam(
    team_id: string,
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).searchResourceTeam(
      team_id,
      domain_id,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update ResourceTeam
   * @param {string} team_id
   * @param {string} id
   * @param {EngineUpdateResourceTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceTeamServiceApi
   */
  public updateResourceTeam(
    team_id: string,
    id: string,
    body: EngineUpdateResourceTeamRequest,
    options?: any
  ) {
    return ResourceTeamServiceApiFp(this.configuration).updateResourceTeam(
      team_id,
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * RoutingOutboundCallServiceApi - axios parameter creator
 * @export
 */
export const RoutingOutboundCallServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall(
      body: EngineCreateRoutingOutboundCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateRoutingOutboundCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall(
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/routing/outbound/calls`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall(
      id: string,
      body: EngineUpdateRoutingOutboundCallRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateRoutingOutboundCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateRoutingOutboundCallRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RoutingOutboundCallServiceApi - functional programming interface
 * @export
 */
export const RoutingOutboundCallServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall(
      body: EngineCreateRoutingOutboundCallRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).createRoutingOutboundCall(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).deleteRoutingOutboundCall(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).readRoutingOutboundCall(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).searchRoutingOutboundCall(domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall(
      id: string,
      body: EngineUpdateRoutingOutboundCallRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingOutboundCall> {
      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).updateRoutingOutboundCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * RoutingOutboundCallServiceApi - factory interface
 * @export
 */
export const RoutingOutboundCallServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall(
      body: EngineCreateRoutingOutboundCallRequest,
      options?: any
    ) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).createRoutingOutboundCall(body, options)(axios, basePath)
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall(id: string, domain_id?: string, options?: any) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).deleteRoutingOutboundCall(id, domain_id, options)(axios, basePath)
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall(id: string, domain_id?: string, options?: any) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).readRoutingOutboundCall(id, domain_id, options)(axios, basePath)
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).searchRoutingOutboundCall(domain_id, size, page, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall(
      id: string,
      body: EngineUpdateRoutingOutboundCallRequest,
      options?: any
    ) {
      return RoutingOutboundCallServiceApiFp(
        configuration
      ).updateRoutingOutboundCall(id, body, options)(axios, basePath)
    },
  }
}

/**
 * RoutingOutboundCallServiceApi - object-oriented interface
 * @export
 * @class RoutingOutboundCallServiceApi
 * @extends {BaseAPI}
 */
export class RoutingOutboundCallServiceApi extends BaseAPI {
  /**
   *
   * @summary Create RoutingOutboundCall
   * @param {EngineCreateRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public createRoutingOutboundCall(
    body: EngineCreateRoutingOutboundCallRequest,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).createRoutingOutboundCall(body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove RoutingOutboundCall
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public deleteRoutingOutboundCall(
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).deleteRoutingOutboundCall(id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary RoutingOutboundCall item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public readRoutingOutboundCall(
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).readRoutingOutboundCall(id, domain_id, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of RoutingOutboundCall
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public searchRoutingOutboundCall(
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).searchRoutingOutboundCall(domain_id, size, page, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Update RoutingOutboundCall
   * @param {string} id
   * @param {EngineUpdateRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public updateRoutingOutboundCall(
    id: string,
    body: EngineUpdateRoutingOutboundCallRequest,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(
      this.configuration
    ).updateRoutingOutboundCall(id, body, options)(this.axios, this.basePath)
  }
}

/**
 * RoutingSchemeServiceApi - axios parameter creator
 * @export
 */
export const RoutingSchemeServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingScheme
     * @param {EngineCreateRoutingSchemeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingScheme(
      body: EngineCreateRoutingSchemeRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createRoutingScheme.'
        )
      }
      const localVarPath = `/routing/schemes`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateRoutingSchemeRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove RoutingScheme
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingScheme(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteRoutingScheme.'
        )
      }
      const localVarPath = `/routing/schemes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RoutingScheme item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingScheme(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readRoutingScheme.'
        )
      }
      const localVarPath = `/routing/schemes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List RoutingScheme
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingScheme(
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/routing/schemes`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update RoutingScheme
     * @param {string} id
     * @param {EngineUpdateRoutingSchemeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingScheme(
      id: string,
      body: EngineUpdateRoutingSchemeRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateRoutingScheme.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateRoutingScheme.'
        )
      }
      const localVarPath = `/routing/schemes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateRoutingSchemeRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RoutingSchemeServiceApi - functional programming interface
 * @export
 */
export const RoutingSchemeServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingScheme
     * @param {EngineCreateRoutingSchemeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingScheme(
      body: EngineCreateRoutingSchemeRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingScheme> {
      const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(
        configuration
      ).createRoutingScheme(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove RoutingScheme
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingScheme(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingScheme> {
      const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(
        configuration
      ).deleteRoutingScheme(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RoutingScheme item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingScheme(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingScheme> {
      const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(
        configuration
      ).readRoutingScheme(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List RoutingScheme
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingScheme(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListRoutingScheme> {
      const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(
        configuration
      ).searchRoutingScheme(domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update RoutingScheme
     * @param {string} id
     * @param {EngineUpdateRoutingSchemeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingScheme(
      id: string,
      body: EngineUpdateRoutingSchemeRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingScheme> {
      const localVarAxiosArgs = RoutingSchemeServiceApiAxiosParamCreator(
        configuration
      ).updateRoutingScheme(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * RoutingSchemeServiceApi - factory interface
 * @export
 */
export const RoutingSchemeServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create RoutingScheme
     * @param {EngineCreateRoutingSchemeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingScheme(body: EngineCreateRoutingSchemeRequest, options?: any) {
      return RoutingSchemeServiceApiFp(configuration).createRoutingScheme(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove RoutingScheme
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingScheme(id: string, domain_id?: string, options?: any) {
      return RoutingSchemeServiceApiFp(configuration).deleteRoutingScheme(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary RoutingScheme item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingScheme(id: string, domain_id?: string, options?: any) {
      return RoutingSchemeServiceApiFp(configuration).readRoutingScheme(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List RoutingScheme
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingScheme(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return RoutingSchemeServiceApiFp(configuration).searchRoutingScheme(
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update RoutingScheme
     * @param {string} id
     * @param {EngineUpdateRoutingSchemeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingScheme(
      id: string,
      body: EngineUpdateRoutingSchemeRequest,
      options?: any
    ) {
      return RoutingSchemeServiceApiFp(configuration).updateRoutingScheme(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * RoutingSchemeServiceApi - object-oriented interface
 * @export
 * @class RoutingSchemeServiceApi
 * @extends {BaseAPI}
 */
export class RoutingSchemeServiceApi extends BaseAPI {
  /**
   *
   * @summary Create RoutingScheme
   * @param {EngineCreateRoutingSchemeRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemeServiceApi
   */
  public createRoutingScheme(
    body: EngineCreateRoutingSchemeRequest,
    options?: any
  ) {
    return RoutingSchemeServiceApiFp(this.configuration).createRoutingScheme(
      body,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove RoutingScheme
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemeServiceApi
   */
  public deleteRoutingScheme(id: string, domain_id?: string, options?: any) {
    return RoutingSchemeServiceApiFp(this.configuration).deleteRoutingScheme(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary RoutingScheme item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemeServiceApi
   */
  public readRoutingScheme(id: string, domain_id?: string, options?: any) {
    return RoutingSchemeServiceApiFp(this.configuration).readRoutingScheme(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List RoutingScheme
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemeServiceApi
   */
  public searchRoutingScheme(
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return RoutingSchemeServiceApiFp(this.configuration).searchRoutingScheme(
      domain_id,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update RoutingScheme
   * @param {string} id
   * @param {EngineUpdateRoutingSchemeRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingSchemeServiceApi
   */
  public updateRoutingScheme(
    id: string,
    body: EngineUpdateRoutingSchemeRequest,
    options?: any
  ) {
    return RoutingSchemeServiceApiFp(this.configuration).updateRoutingScheme(
      id,
      body,
      options
    )(this.axios, this.basePath)
  }
}

/**
 * RoutingVariableServiceApi - axios parameter creator
 * @export
 */
export const RoutingVariableServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable(
      body: EngineCreateRoutingVariableRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateRoutingVariableRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable(
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/routing/variables`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {string} id
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable(
      id: string,
      body: EngineUpdateRoutingVariableRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateRoutingVariable.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateRoutingVariable.'
        )
      }
      const localVarPath = `/routing/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateRoutingVariableRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RoutingVariableServiceApi - functional programming interface
 * @export
 */
export const RoutingVariableServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable(
      body: EngineCreateRoutingVariableRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingVariable> {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).createRoutingVariable(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingVariable> {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).deleteRoutingVariable(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable(
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingVariable> {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).readRoutingVariable(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListRoutingVariable> {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).searchRoutingVariable(domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {string} id
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable(
      id: string,
      body: EngineUpdateRoutingVariableRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineRoutingVariable> {
      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(
        configuration
      ).updateRoutingVariable(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * RoutingVariableServiceApi - factory interface
 * @export
 */
export const RoutingVariableServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable(
      body: EngineCreateRoutingVariableRequest,
      options?: any
    ) {
      return RoutingVariableServiceApiFp(configuration).createRoutingVariable(
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable(id: string, domain_id?: string, options?: any) {
      return RoutingVariableServiceApiFp(configuration).deleteRoutingVariable(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable(id: string, domain_id?: string, options?: any) {
      return RoutingVariableServiceApiFp(configuration).readRoutingVariable(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return RoutingVariableServiceApiFp(configuration).searchRoutingVariable(
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {string} id
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable(
      id: string,
      body: EngineUpdateRoutingVariableRequest,
      options?: any
    ) {
      return RoutingVariableServiceApiFp(configuration).updateRoutingVariable(
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * RoutingVariableServiceApi - object-oriented interface
 * @export
 * @class RoutingVariableServiceApi
 * @extends {BaseAPI}
 */
export class RoutingVariableServiceApi extends BaseAPI {
  /**
   *
   * @summary Create RoutingVariable
   * @param {EngineCreateRoutingVariableRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  public createRoutingVariable(
    body: EngineCreateRoutingVariableRequest,
    options?: any
  ) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).createRoutingVariable(body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove RoutingVariable
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  public deleteRoutingVariable(id: string, domain_id?: string, options?: any) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).deleteRoutingVariable(id, domain_id, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary RoutingVariable item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  public readRoutingVariable(id: string, domain_id?: string, options?: any) {
    return RoutingVariableServiceApiFp(this.configuration).readRoutingVariable(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of RoutingVariable
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  public searchRoutingVariable(
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).searchRoutingVariable(domain_id, size, page, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Update RoutingVariable
   * @param {string} id
   * @param {EngineUpdateRoutingVariableRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingVariableServiceApi
   */
  public updateRoutingVariable(
    id: string,
    body: EngineUpdateRoutingVariableRequest,
    options?: any
  ) {
    return RoutingVariableServiceApiFp(
      this.configuration
    ).updateRoutingVariable(id, body, options)(this.axios, this.basePath)
  }
}

/**
 * SkillServiceApi - axios parameter creator
 * @export
 */
export const SkillServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill(
      body: EngineCreateSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createSkill.'
        )
      }
      const localVarPath = `/call_center/skills`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill(
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteSkill.'
        )
      }
      const localVarPath = `/call_center/skills/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill(id: string, domain_id?: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readSkill.'
        )
      }
      const localVarPath = `/call_center/skills/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Skill
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill(
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/call_center/skills`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Skill
     * @param {string} id
     * @param {EngineUpdateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill(
      id: string,
      body: EngineUpdateSkillRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateSkill.'
        )
      }
      const localVarPath = `/call_center/skills/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateSkillRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SkillServiceApi - functional programming interface
 * @export
 */
export const SkillServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill(
      body: EngineCreateSkillRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).createSkill(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).deleteSkill(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill(
      id: string,
      domain_id?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).readSkill(id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Skill
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListSkill> {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).searchSkill(domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Skill
     * @param {string} id
     * @param {EngineUpdateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill(
      id: string,
      body: EngineUpdateSkillRequest,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {
      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(
        configuration
      ).updateSkill(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * SkillServiceApi - factory interface
 * @export
 */
export const SkillServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill(body: EngineCreateSkillRequest, options?: any) {
      return SkillServiceApiFp(configuration).createSkill(body, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill(id: string, domain_id?: string, options?: any) {
      return SkillServiceApiFp(configuration).deleteSkill(
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill(id: string, domain_id?: string, options?: any) {
      return SkillServiceApiFp(configuration).readSkill(id, domain_id, options)(
        axios,
        basePath
      )
    },
    /**
     *
     * @summary List of Skill
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill(
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return SkillServiceApiFp(configuration).searchSkill(
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update Skill
     * @param {string} id
     * @param {EngineUpdateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill(id: string, body: EngineUpdateSkillRequest, options?: any) {
      return SkillServiceApiFp(configuration).updateSkill(id, body, options)(
        axios,
        basePath
      )
    },
  }
}

/**
 * SkillServiceApi - object-oriented interface
 * @export
 * @class SkillServiceApi
 * @extends {BaseAPI}
 */
export class SkillServiceApi extends BaseAPI {
  /**
   *
   * @summary Create Skill
   * @param {EngineCreateSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  public createSkill(body: EngineCreateSkillRequest, options?: any) {
    return SkillServiceApiFp(this.configuration).createSkill(body, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Remove Skill
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  public deleteSkill(id: string, domain_id?: string, options?: any) {
    return SkillServiceApiFp(this.configuration).deleteSkill(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Skill item
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  public readSkill(id: string, domain_id?: string, options?: any) {
    return SkillServiceApiFp(this.configuration).readSkill(
      id,
      domain_id,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary List of Skill
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  public searchSkill(
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return SkillServiceApiFp(this.configuration).searchSkill(
      domain_id,
      size,
      page,
      options
    )(this.axios, this.basePath)
  }

  /**
   *
   * @summary Update Skill
   * @param {string} id
   * @param {EngineUpdateSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SkillServiceApi
   */
  public updateSkill(
    id: string,
    body: EngineUpdateSkillRequest,
    options?: any
  ) {
    return SkillServiceApiFp(this.configuration).updateSkill(id, body, options)(
      this.axios,
      this.basePath
    )
  }
}

/**
 * SupervisorInTeamServiceApi - axios parameter creator
 * @export
 */
export const SupervisorInTeamServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create SupervisorInTeam
     * @param {string} team_id
     * @param {EngineCreateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupervisorInTeam(
      team_id: string,
      body: EngineCreateSupervisorInTeamRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling createSupervisorInTeam.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(team_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineCreateSupervisorInTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling deleteSupervisorInTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SupervisorInTeam item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling readSupervisorInTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of SupervisorInTeam
     * @param {string} team_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSupervisorInTeam(
      team_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling searchSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(
        `{${'team_id'}}`,
        encodeURIComponent(String(team_id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domain_id !== undefined) {
        localVarQueryParameter['domain_id'] = domain_id
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupervisorInTeam(
      team_id: string,
      id: string,
      body: EngineUpdateSupervisorInTeamRequest,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          'team_id',
          'Required parameter team_id was null or undefined when calling updateSupervisorInTeam.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateSupervisorInTeam.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateSupervisorInTeam.'
        )
      }
      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Webitel-Access')
            : configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      }
      const needsSerialization =
        <any>'EngineUpdateSupervisorInTeamRequest' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SupervisorInTeamServiceApi - functional programming interface
 * @export
 */
export const SupervisorInTeamServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create SupervisorInTeam
     * @param {string} team_id
     * @param {EngineCreateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupervisorInTeam(
      team_id: string,
      body: EngineCreateSupervisorInTeamRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineSupervisorInTeam> {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).createSupervisorInTeam(team_id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineSupervisorInTeam> {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).deleteSupervisorInTeam(team_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SupervisorInTeam item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineSupervisorInTeam> {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).readSupervisorInTeam(team_id, id, domain_id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of SupervisorInTeam
     * @param {string} team_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSupervisorInTeam(
      team_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineListSupervisorInTeam> {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).searchSupervisorInTeam(team_id, domain_id, size, page, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupervisorInTeam(
      team_id: string,
      id: string,
      body: EngineUpdateSupervisorInTeamRequest,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<EngineSupervisorInTeam> {
      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(
        configuration
      ).updateSupervisorInTeam(team_id, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * SupervisorInTeamServiceApi - factory interface
 * @export
 */
export const SupervisorInTeamServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create SupervisorInTeam
     * @param {string} team_id
     * @param {EngineCreateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupervisorInTeam(
      team_id: string,
      body: EngineCreateSupervisorInTeamRequest,
      options?: any
    ) {
      return SupervisorInTeamServiceApiFp(configuration).createSupervisorInTeam(
        team_id,
        body,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Remove SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return SupervisorInTeamServiceApiFp(configuration).deleteSupervisorInTeam(
        team_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary SupervisorInTeam item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSupervisorInTeam(
      team_id: string,
      id: string,
      domain_id?: string,
      options?: any
    ) {
      return SupervisorInTeamServiceApiFp(configuration).readSupervisorInTeam(
        team_id,
        id,
        domain_id,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary List of SupervisorInTeam
     * @param {string} team_id
     * @param {string} [domain_id]
     * @param {number} [size]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSupervisorInTeam(
      team_id: string,
      domain_id?: string,
      size?: number,
      page?: number,
      options?: any
    ) {
      return SupervisorInTeamServiceApiFp(configuration).searchSupervisorInTeam(
        team_id,
        domain_id,
        size,
        page,
        options
      )(axios, basePath)
    },
    /**
     *
     * @summary Update SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupervisorInTeam(
      team_id: string,
      id: string,
      body: EngineUpdateSupervisorInTeamRequest,
      options?: any
    ) {
      return SupervisorInTeamServiceApiFp(configuration).updateSupervisorInTeam(
        team_id,
        id,
        body,
        options
      )(axios, basePath)
    },
  }
}

/**
 * SupervisorInTeamServiceApi - object-oriented interface
 * @export
 * @class SupervisorInTeamServiceApi
 * @extends {BaseAPI}
 */
export class SupervisorInTeamServiceApi extends BaseAPI {
  /**
   *
   * @summary Create SupervisorInTeam
   * @param {string} team_id
   * @param {EngineCreateSupervisorInTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  public createSupervisorInTeam(
    team_id: string,
    body: EngineCreateSupervisorInTeamRequest,
    options?: any
  ) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).createSupervisorInTeam(team_id, body, options)(this.axios, this.basePath)
  }

  /**
   *
   * @summary Remove SupervisorInTeam
   * @param {string} team_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  public deleteSupervisorInTeam(
    team_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).deleteSupervisorInTeam(team_id, id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary SupervisorInTeam item
   * @param {string} team_id
   * @param {string} id
   * @param {string} [domain_id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  public readSupervisorInTeam(
    team_id: string,
    id: string,
    domain_id?: string,
    options?: any
  ) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).readSupervisorInTeam(team_id, id, domain_id, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary List of SupervisorInTeam
   * @param {string} team_id
   * @param {string} [domain_id]
   * @param {number} [size]
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  public searchSupervisorInTeam(
    team_id: string,
    domain_id?: string,
    size?: number,
    page?: number,
    options?: any
  ) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).searchSupervisorInTeam(team_id, domain_id, size, page, options)(
      this.axios,
      this.basePath
    )
  }

  /**
   *
   * @summary Update SupervisorInTeam
   * @param {string} team_id
   * @param {string} id
   * @param {EngineUpdateSupervisorInTeamRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SupervisorInTeamServiceApi
   */
  public updateSupervisorInTeam(
    team_id: string,
    id: string,
    body: EngineUpdateSupervisorInTeamRequest,
    options?: any
  ) {
    return SupervisorInTeamServiceApiFp(
      this.configuration
    ).updateSupervisorInTeam(team_id, id, body, options)(
      this.axios,
      this.basePath
    )
  }
}
